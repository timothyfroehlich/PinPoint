[{"filePath":"/home/froeht/Code/PinPoint/drizzle.config.dev.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/drizzle.config.prod.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/e2e/auth-redirect.e2e.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/e2e/auth.setup.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'triggerTextInitial' is never reassigned. Use 'const' instead.","line":17,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":17,"endColumn":25,"fix":{"range":[585,649],"text":"const triggerTextInitial = (await orgTrigger.textContent()) || \"\";"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { test as setup, expect } from \"@playwright/test\";\n\nconst authFile = \"e2e/.auth/user.json\";\n\nsetup(\"authenticate as Tim dev user\", async ({ page }) => {\n  console.log(\"Setting up authentication for Tim dev user...\");\n  \n  // Go directly to sign-in page\n  await page.goto(\"/auth/sign-in\");\n  await expect(page.locator(\"h1\")).toContainText(/Welcome back|Sign In/i);\n  \n  // Handle organization selection\n  const orgTrigger = page.locator(\"[data-testid='org-select-trigger']\");\n  await expect(orgTrigger).toBeVisible({ timeout: 15000 });\n\n  // Ensure an organization is selected\n  let triggerTextInitial = (await orgTrigger.textContent()) || \"\";\n  if (!triggerTextInitial.trim()) {\n    await orgTrigger.click();\n    for (let i = 0; i < 12; i++) {\n      const firstOption = page.locator('[role=\"option\"]').first();\n      if (await firstOption.isVisible().catch(() => false)) {\n        await firstOption.click();\n        break;\n      }\n      await page.waitForTimeout(250);\n    }\n  }\n  \n  // Close any lingering dropdown overlays\n  await page.keyboard.press(\"Escape\");\n  await page.waitForTimeout(100);\n  await page.keyboard.press(\"Escape\");\n  await expect(orgTrigger).toHaveText(/.+/, { timeout: 5000 });\n\n  // Click dev login button\n  const devLoginBtn = page.locator(\"[data-testid='dev-login-tim']\");\n  await expect(devLoginBtn).toBeVisible({ timeout: 10000 });\n  \n  let clicked = false;\n  for (let attempt = 0; attempt < 5; attempt++) {\n    try {\n      await devLoginBtn.click();\n      clicked = true;\n      break;\n    } catch {\n      await page.keyboard.press(\"Escape\");\n      await page.waitForTimeout(150);\n    }\n  }\n  if (!clicked) {\n    await devLoginBtn.click({ force: true });\n  }\n\n  // Wait for successful login and dashboard redirect\n  for (let i = 0; i < 40; i++) {\n    await page.waitForTimeout(500);\n    const url = page.url();\n    if (/apc\\.localhost:3000\\/dashboard|\\/dashboard$/.test(url)) break;\n  }\n  \n  // Fallback navigate if needed\n  if (!/apc\\.localhost:3000\\/dashboard|\\/dashboard$/.test(page.url())) {\n    await page.goto(\"/dashboard\");\n  }\n  \n  // Verify we're logged in successfully\n  await expect(page.locator(\"h1\")).toContainText(/Dashboard|Issues|Machines/i);\n  \n  console.log(\"Authentication successful, saving state...\");\n  \n  // Save signed-in state to 'e2e/.auth/user.json'\n  await page.context().storageState({ path: authFile });\n  \n  console.log(\"Authentication state saved to\", authFile);\n});","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/e2e/smoke-tests-auth.e2e.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/e2e/smoke-tests.e2e.test.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'triggerTextInitial' is never reassigned. Use 'const' instead.","line":16,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":16,"endColumn":25,"fix":{"range":[657,721],"text":"const triggerTextInitial = (await orgTrigger.textContent()) || \"\";"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"/**\n * Smoke Tests Suite\n * - Auth login via dev button\n * - Navigate to issues list and open first issue\n */\nimport { test, expect } from \"@playwright/test\";\n\nasync function devLoginAsTim(page: import(\"@playwright/test\").Page) {\n  // Go directly to sign-in page instead of relying on home navigation.\n  await page.goto(\"/auth/sign-in\");\n  await expect(page.locator(\"h1\")).toContainText(/Welcome back|Sign In/i);\n  const orgTrigger = page.locator(\"[data-testid='org-select-trigger']\");\n  await expect(orgTrigger).toBeVisible({ timeout: 15000 });\n\n  // Ensure an organization is selected (generic approach). If empty, open and pick first available option.\n  let triggerTextInitial = (await orgTrigger.textContent()) || \"\";\n  if (!triggerTextInitial.trim()) {\n    await orgTrigger.click();\n    for (let i = 0; i < 12; i++) {\n      const firstOption = page.locator('[role=\"option\"]').first();\n      if (await firstOption.isVisible().catch(() => false)) {\n        await firstOption.click();\n        break;\n      }\n      await page.waitForTimeout(250);\n    }\n  }\n  // Close any lingering dropdown overlays\n  await page.keyboard.press(\"Escape\");\n  await page.waitForTimeout(100);\n  await page.keyboard.press(\"Escape\");\n  await expect(orgTrigger).toHaveText(/.+/, { timeout: 5000 });\n\n  const devLoginBtn = page.locator(\"[data-testid='dev-login-tim']\");\n  await expect(devLoginBtn).toBeVisible({ timeout: 10000 });\n  let clicked = false;\n  for (let attempt = 0; attempt < 5; attempt++) {\n    try {\n      await devLoginBtn.click();\n      clicked = true;\n      break;\n    } catch {\n      await page.keyboard.press(\"Escape\");\n      await page.waitForTimeout(150);\n    }\n  }\n  if (!clicked) {\n    await devLoginBtn.click({ force: true });\n  }\n  // Wait for dashboard\n  for (let i = 0; i < 40; i++) {\n    await page.waitForTimeout(500);\n    const url = page.url();\n    if (/apc\\.localhost:3000\\/dashboard|\\/dashboard$/.test(url)) break;\n  }\n  if (!/apc\\.localhost:3000\\/dashboard|\\/dashboard$/.test(page.url())) {\n    // Fallback navigate\n    await page.goto(\"/dashboard\");\n  }\n  await expect(page.locator(\"h1\")).toContainText(/Dashboard|Issues|Machines/i);\n}\n\ntest.describe(\"Smoke Tests\", () => {\n  test(\"login flow (Tim dev user)\", async ({ page }) => {\n    await devLoginAsTim(page);\n  });\n\n  test(\"open first issue from list\", async ({ page }) => {\n    await devLoginAsTim(page);\n    await page.goto(\"/issues\");\n    const issuesList = page.locator(\"[data-testid='issues-list']\").first();\n    await expect(issuesList).toBeVisible({ timeout: 10000 });\n    const firstIssueLink = page\n      .locator(\"[data-testid='issue-card'] [data-testid='issue-link']\")\n      .first();\n    await expect(firstIssueLink).toBeVisible();\n    const firstIssueTitle = await firstIssueLink.textContent();\n    await firstIssueLink.click();\n    await expect(page.locator(\"[data-testid='issue-title']\")).toHaveText(\n      firstIssueTitle ?? /.+/,\n      { timeout: 10000 },\n    );\n    await expect(\n      page.locator(\"[data-testid='issue-status-badge']\"),\n    ).toBeVisible();\n  });\n\n  test(\"issue creation (authenticated)\", async ({ page }) => {\n    const consoleMessages: string[] = [];\n    page.on(\"console\", (msg) =>\n      consoleMessages.push(`[${msg.type()}] ${msg.text()}`),\n    );\n    await devLoginAsTim(page);\n    // Navigate via issues page link to ensure link works\n    await page.goto(\"/issues\");\n    const createLink = page.locator(\"a[href='/issues/create']\").first();\n    await expect(createLink).toBeVisible();\n    await createLink.click();\n    await expect(page.locator(\"[data-testid='create-issue-form']\")).toBeVisible(\n      { timeout: 10000 },\n    );\n\n    const uniqueTitle = `Smoke Issue ${Date.now()}`;\n    await page.locator(\"[data-testid='issue-title-input']\").fill(uniqueTitle);\n    await page\n      .locator(\"[data-testid='issue-description-input']\")\n      .fill(\"Automated smoke test issue description.\");\n\n    // Select first machine\n    const machineTrigger = page.locator(\n      \"[data-testid='machine-select-trigger']\",\n    );\n    await machineTrigger.click();\n    const firstMachine = page.locator(\"[data-testid='machine-option']\").first();\n    await expect(firstMachine).toBeVisible({ timeout: 5000 });\n    await firstMachine.click();\n\n    // Wait for React state flush + hidden input population with a UUID\n    const hiddenMachineId = page\n      .locator(\"[data-testid='machineId-hidden']\")\n      .first();\n    await expect(hiddenMachineId).toHaveAttribute(\"value\", /.+/, {\n      timeout: 5000,\n    });\n    const selectedMachineId = await hiddenMachineId.getAttribute(\"value\");\n    console.log(\"Selected machineId:\", selectedMachineId);\n\n    // Optionally change priority to High\n    try {\n      await page.locator(\"[data-testid='priority-select-trigger']\").click();\n      const high = page.locator(\"[data-testid='priority-option-high']\");\n      if (await high.isVisible({ timeout: 1000 }).catch(() => false)) {\n        await high.click();\n      }\n    } catch {\n      // non-fatal\n    }\n\n    // Ensure machineId hidden input populated before submit\n    // (Already validated above - keep placeholder for readability)\n\n    await page.locator(\"[data-testid='create-issue-submit']\").click();\n\n    // Wait for redirect to issue detail page\n    let redirected = false;\n    for (let i = 0; i < 40; i++) {\n      await page.waitForTimeout(500);\n      if (page.url().includes('/issues/issue_')) {\n        redirected = true;\n        break;\n      }\n    }\n    if (!redirected) {\n      // Gather diagnostics\n      const errorText = await page\n        .locator(\"[data-testid='create-issue-error']\")\n        .first()\n        .textContent()\n        .catch(() => null);\n      const fieldErrors = await page\n        .locator(\"[data-testid='create-issue-field-errors']\")\n        .first()\n        .textContent()\n        .catch(() => null);\n      const formHtml = await page\n        .locator(\"[data-testid='create-issue-form']\")\n        .evaluate((el) => el.outerHTML)\n        .catch(() => \"<no form html>\");\n      console.log(\"Issue creation did not redirect. Diagnostics:\");\n      console.log(\"URL:\", page.url());\n      console.log(\"Error Block:\", errorText);\n      console.log(\"Field Errors:\", fieldErrors);\n      console.log(\"Console Messages:\\n\" + consoleMessages.join(\"\\n\"));\n      console.log(\"Form HTML snippet:\", formHtml.slice(0, 1000));\n    }\n    expect(redirected).toBeTruthy();\n    await expect(page.locator(\"[data-testid='issue-title']\")).toContainText(\n      uniqueTitle,\n      { timeout: 10000 },\n    );\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/next.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/postcss.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/scripts/agent-deps.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/scripts/agent-smoke.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/scripts/agent-workflow.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/scripts/create-dev-users.ts","messages":[],"suppressedMessages":[{"ruleId":"no-restricted-imports","severity":2,"message":"'createClient' import from '@supabase/supabase-js' is restricted. Use '~/lib/supabase/server' createClient() wrapper for SSR per CORE-SSR-001.","line":13,"column":10,"nodeType":"ImportDeclaration","messageId":"importNameWithCustomMessage","endLine":13,"endColumn":22,"suppressions":[{"kind":"directive","justification":"Admin script needs direct Supabase client"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/scripts/generate-pure-material-css.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/scripts/generate-sql-constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/scripts/shellcheck-to-sarif.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/scripts/status-overview.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/scripts/validate-single-file.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/_trpc/Provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/api/admin/export/activity-log/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/api/dev/users/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/api/health/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/api/organizations/public/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/api/qr/[qrCodeId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/api/search/suggestions/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/api/search/universal/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/api/trpc/[trpc]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/auth-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/auth/auth-code-error/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/auth/callback/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/auth/sign-in/components/SignInForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/auth/sign-in/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/auth/sign-up/components/SignUpForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/auth/sign-up/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/client-providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/dashboard/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/dashboard/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/dashboard/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/games/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/games/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/issues/[issueId]/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/issues/[issueId]/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/issues/[issueId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/issues/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/issues/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/issues/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/issues/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/locations/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/locations/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/machines/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/machines/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/machines/new/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/machines/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/profile/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/search/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/settings/activity/components/ActivityLogFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/settings/activity/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/settings/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/settings/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/settings/organization/components/OrganizationLogoForm.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":66,"column":19,"nodeType":"JSXOpeningElement","endLine":73,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Organization Logo Form Client Island\n * Phase 4B.1: Organization logo management\n */\n\n\"use client\";\n\nimport React, { useActionState } from \"react\";\nimport { Button } from \"~/components/ui/button\";\nimport { Input } from \"~/components/ui/input\";\nimport { Label } from \"~/components/ui/label\";\nimport { Card } from \"~/components/ui/card\";\nimport { LoaderIcon, UploadIcon, ImageIcon, XIcon } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { updateOrganizationLogoAction } from \"~/lib/actions/organization-actions\";\nimport { useEffect, useState } from \"react\";\n\ninterface OrganizationLogoFormProps {\n  currentLogoUrl: string;\n}\n\nexport function OrganizationLogoForm({\n  currentLogoUrl,\n}: OrganizationLogoFormProps): JSX.Element {\n  const [state, formAction, isPending] = useActionState(\n    updateOrganizationLogoAction,\n    null,\n  );\n  const [previewUrl, setPreviewUrl] = useState(currentLogoUrl);\n  const [hasImageError, setHasImageError] = useState(false);\n\n  // Show toast notifications based on action state\n  useEffect(() => {\n    if (state?.success && state.message) {\n      toast.success(state.message);\n    } else if (!state?.success && state?.error) {\n      toast.error(state.error);\n    }\n  }, [state]);\n\n  const handleUrlChange = (url: string): void => {\n    setPreviewUrl(url);\n  };\n\n  const clearLogo = (): void => {\n    setPreviewUrl(\"\");\n    setHasImageError(false);\n  };\n\n  // Reset error state when previewUrl changes\n  useEffect(() => {\n    if (previewUrl) {\n      setHasImageError(false);\n    }\n  }, [previewUrl]);\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Current Logo Preview */}\n      {previewUrl && (\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"h-12 w-12 rounded border flex items-center justify-center overflow-hidden bg-muted\">\n                {previewUrl && !hasImageError ? (\n                  <img\n                    src={previewUrl}\n                    alt=\"Organization logo\"\n                    className=\"h-full w-full object-contain\"\n                    onError={() => {\n                      setHasImageError(true);\n                    }}\n                  />\n                ) : (\n                  <ImageIcon className=\"h-6 w-6 text-muted-foreground\" />\n                )}\n              </div>\n              <div>\n                <p className=\"text-sm font-medium\">Current Logo</p>\n                <p className=\"text-xs text-muted-foreground truncate max-w-[200px]\">\n                  {previewUrl}\n                </p>\n              </div>\n            </div>\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={clearLogo}\n              disabled={isPending}\n            >\n              <XIcon className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </Card>\n      )}\n\n      {/* Logo URL Form */}\n      <form action={formAction} className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"logoUrl\">Logo URL</Label>\n          <Input\n            id=\"logoUrl\"\n            name=\"logoUrl\"\n            type=\"url\"\n            value={previewUrl}\n            onChange={(e) => {\n              handleUrlChange(e.target.value);\n            }}\n            placeholder=\"https://example.com/logo.png\"\n            disabled={isPending}\n          />\n          {state && !state.success && state.fieldErrors?.[\"logoUrl\"] && (\n            <p className=\"text-sm text-destructive\">\n              {state.fieldErrors[\"logoUrl\"][0]}\n            </p>\n          )}\n          <p className=\"text-xs text-muted-foreground\">\n            Enter a URL to an image file (PNG, JPG, or SVG recommended)\n          </p>\n        </div>\n\n        {/* Submit Button */}\n        <Button type=\"submit\" disabled={isPending} className=\"w-full\">\n          {isPending ? (\n            <>\n              <LoaderIcon className=\"mr-2 h-4 w-4 animate-spin\" />\n              Updating Logo...\n            </>\n          ) : (\n            <>\n              <UploadIcon className=\"mr-2 h-4 w-4\" />\n              Update Logo\n            </>\n          )}\n        </Button>\n\n        {/* Error Display */}\n        {state && !state.success && !state.fieldErrors && (\n          <div className=\"rounded-md bg-destructive/15 p-3\">\n            <p className=\"text-sm text-destructive\">{state.error}</p>\n          </div>\n        )}\n      </form>\n\n      {/* Logo Guidelines */}\n      <Card className=\"p-4 bg-muted/50\">\n        <h4 className=\"text-sm font-medium mb-2\">Logo Guidelines</h4>\n        <ul className=\"text-xs text-muted-foreground space-y-1\">\n          <li>• Recommended size: 200x200 pixels or larger</li>\n          <li>• Supported formats: PNG, JPG, GIF, SVG</li>\n          <li>• Square or rectangular aspect ratios work best</li>\n          <li>• Ensure the image is publicly accessible</li>\n        </ul>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/settings/organization/components/OrganizationProfileForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/settings/organization/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/settings/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/settings/roles/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/settings/system/components/SystemNotificationSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/settings/system/components/SystemPreferences.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/settings/system/components/SystemSecuritySettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/settings/system/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/settings/users/components/InviteUserDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/settings/users/components/RoleChangeDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/settings/users/components/UserTableActions.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":62,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":74,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * User Table Actions Client Island\n * Phase 4B.2: User management actions dropdown with integrated dialogs\n */\n\n\"use client\";\n\nimport React, { useState } from \"react\";\nimport { Button } from \"~/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"~/components/ui/dropdown-menu\";\nimport {\n  MoreHorizontalIcon,\n  UserIcon,\n  ShieldIcon,\n  MailIcon,\n  TrashIcon,\n} from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { RoleChangeDialog } from \"./RoleChangeDialog\";\n\ninterface UserTableActionsProps {\n  user: {\n    userId: string;\n    email: string;\n    name: string;\n    membershipId: string;\n    role: {\n      id: string;\n      name: string;\n      isSystem: boolean;\n    };\n    emailVerified: Date | null;\n  };\n  currentUserCanManage: boolean;\n  availableRoles?: {\n    id: string;\n    name: string;\n    description?: string;\n    isSystem: boolean;\n  }[];\n}\n\nexport function UserTableActions({\n  user,\n  currentUserCanManage,\n  availableRoles = [],\n}: UserTableActionsProps): JSX.Element | null {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleResendInvitation = (): void => {\n    setIsLoading(true);\n    try {\n      // TODO: Implement resend invitation\n      toast.info(\"Resend invitation coming soon\");\n    } catch (error) {\n      toast.error(\"Failed to resend invitation\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRemoveUser = (): void => {\n    setIsLoading(true);\n    try {\n      // TODO: Implement user removal with confirmation dialog\n      toast.info(\"User removal coming soon\");\n    } catch (error) {\n      toast.error(\"Failed to remove user\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (!currentUserCanManage) {\n    return null;\n  }\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\" disabled={isLoading}>\n          <MoreHorizontalIcon className=\"h-4 w-4\" />\n        </Button>\n      </DropdownMenuTrigger>\n\n      <DropdownMenuContent align=\"end\" className=\"w-56\">\n        <DropdownMenuLabel>User Actions</DropdownMenuLabel>\n\n        <DropdownMenuSeparator />\n\n        <RoleChangeDialog user={user} availableRoles={availableRoles}>\n          <DropdownMenuItem\n            onSelect={(e) => {\n              e.preventDefault();\n            }} // Prevent dropdown from closing\n            className=\"cursor-pointer\"\n          >\n            <ShieldIcon className=\"mr-2 h-4 w-4\" />\n            Change Role\n          </DropdownMenuItem>\n        </RoleChangeDialog>\n\n        {!user.emailVerified && (\n          <DropdownMenuItem onClick={handleResendInvitation}>\n            <MailIcon className=\"mr-2 h-4 w-4\" />\n            Resend Invitation\n          </DropdownMenuItem>\n        )}\n\n        <DropdownMenuItem>\n          <UserIcon className=\"mr-2 h-4 w-4\" />\n          View Profile\n        </DropdownMenuItem>\n\n        <DropdownMenuSeparator />\n\n        {!user.role.isSystem && (\n          <DropdownMenuItem\n            onClick={handleRemoveUser}\n            className=\"text-destructive focus:text-destructive\"\n          >\n            <TrashIcon className=\"mr-2 h-4 w-4\" />\n            Remove User\n          </DropdownMenuItem>\n        )}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/settings/users/page.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":37,"column":7,"nodeType":"MemberExpression","endLine":37,"endColumn":20},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":38,"column":7,"nodeType":"MemberExpression","endLine":38,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * User Management Settings Page\n * Server Component with user directory and role management\n * Phase 4B.2: User and Role Management\n */\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"~/components/ui/card\";\nimport { Badge } from \"~/components/ui/badge\";\nimport { Button } from \"~/components/ui/button\";\nimport { Separator } from \"~/components/ui/separator\";\nimport { UsersIcon, MailIcon, CalendarIcon, ShieldIcon } from \"lucide-react\";\nimport { requireMemberAccess } from \"~/lib/organization-context\";\nimport { api } from \"~/trpc/server\";\nimport { UserTableActions } from \"./components/UserTableActions\";\nimport { InviteUserDialog } from \"./components/InviteUserDialog\";\nimport { format } from \"date-fns\";\n\nexport default async function UsersSettingsPage(): Promise<React.JSX.Element> {\n  await requireMemberAccess();\n\n  // Fetch organization users and roles using the existing admin router\n  const [users, roles] = await Promise.all([\n    api.admin.getUsers(),\n    api.role.getAll(),\n  ]);\n\n  // Group users by role for better organization\n  const usersByRole = users.reduce<Record<string, typeof users>>(\n    (acc, user) => {\n      const roleName = user.role.name;\n      acc[roleName] ??= [];\n      acc[roleName].push(user);\n      return acc;\n    },\n    {},\n  );\n\n  const totalUsers = users.length;\n\n  // Format roles for dialogs\n  const availableRoles = roles.map((role) => ({\n    id: role.id,\n    name: role.name,\n    // description omitted since roles don't have descriptions in schema\n    isSystem: role.isSystem,\n  }));\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">User Management</h1>\n          <p className=\"text-muted-foreground\">\n            Manage team members, roles, and permissions for your organization\n          </p>\n        </div>\n        <InviteUserDialog availableRoles={availableRoles} />\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            <UsersIcon className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalUsers}</div>\n          </CardContent>\n        </Card>\n\n        {Object.entries(usersByRole).map(([roleName, roleUsers]) => (\n          <Card key={roleName}>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">{roleName}s</CardTitle>\n              <ShieldIcon className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{roleUsers.length}</div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Users Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Team Members</CardTitle>\n              <CardDescription>\n                All users in your organization with their roles and status\n              </CardDescription>\n            </div>\n            <Button size=\"sm\" asChild>\n              <InviteUserDialog availableRoles={availableRoles} />\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {users.map((user, index) => (\n              <div key={user.userId}>\n                <div className=\"flex items-center justify-between py-4\">\n                  {/* User Info */}\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"h-10 w-10 rounded-full bg-gradient-to-r from-primary to-primary-container flex items-center justify-center\">\n                      <span className=\"text-sm font-medium text-white\">\n                        {(user.name\n                          ? user.name.charAt(0)\n                          : user.email.charAt(0)\n                        ).toUpperCase()}\n                      </span>\n                    </div>\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <p className=\"text-sm font-medium\">\n                          {user.name || \"No name set\"}\n                        </p>\n                        {user.role.isSystem && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            System\n                          </Badge>\n                        )}\n                      </div>\n                      <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                        <div className=\"flex items-center\">\n                          <MailIcon className=\"mr-1 h-3 w-3\" />\n                          {user.email}\n                        </div>\n                        <div className=\"flex items-center\">\n                          <CalendarIcon className=\"mr-1 h-3 w-3\" />\n                          Joined {format(new Date(user.createdAt), \"MMM yyyy\")}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Role and Actions */}\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"text-right\">\n                      <Badge variant=\"secondary\">{user.role.name}</Badge>\n                      {user.emailVerified ? (\n                        <p className=\"text-xs text-tertiary mt-1\">Verified</p>\n                      ) : (\n                        <p className=\"text-xs text-secondary mt-1\">Pending</p>\n                      )}\n                    </div>\n\n                    <UserTableActions\n                      user={user}\n                      currentUserCanManage={true} // TODO: Add proper permission checking\n                      availableRoles={availableRoles}\n                    />\n                  </div>\n                </div>\n\n                {index < users.length - 1 && <Separator />}\n              </div>\n            ))}\n\n            {users.length === 0 && (\n              <div className=\"text-center py-8\">\n                <UsersIcon className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n                <h3 className=\"mt-4 text-lg font-medium\">No users found</h3>\n                <p className=\"mt-2 text-sm text-muted-foreground\">\n                  Get started by inviting your first team member.\n                </p>\n                <div className=\"mt-6\">\n                  <InviteUserDialog availableRoles={availableRoles} />\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Role Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Role Distribution</CardTitle>\n          <CardDescription>\n            Overview of user roles in your organization\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {Object.entries(usersByRole).map(([roleName, roleUsers]) => (\n              <div key={roleName} className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <ShieldIcon className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm font-medium\">{roleName}</span>\n                </div>\n                <div className=\"flex items-center space-x-4\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    {roleUsers.length} user{roleUsers.length !== 1 ? \"s\" : \"\"}\n                  </span>\n                  <Button variant=\"outline\" size=\"sm\" asChild>\n                    <a href={`/settings/roles`}>Manage Role</a>\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/app/sign-in/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/dashboard/dashboard-stats.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":97,"column":45,"nodeType":"MemberExpression","endLine":97,"endColumn":60},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":98,"column":27,"nodeType":"MemberExpression","endLine":98,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card, CardContent, CardHeader, CardTitle } from \"~/components/ui/card\";\nimport {\n  WrenchIcon,\n  AlertCircleIcon,\n  CheckCircleIcon,\n  ClockIcon,\n} from \"lucide-react\";\n\ninterface DashboardStatsProps {\n  stats: {\n    totalIssues: number;\n    openIssues: number;\n    closedIssues: number;\n    totalMachines: number;\n    inProgressIssues?: number;\n  };\n}\n\nexport function DashboardStats({ stats }: DashboardStatsProps): JSX.Element {\n  const resolutionRate =\n    stats.totalIssues > 0\n      ? Math.round((stats.closedIssues / stats.totalIssues) * 100)\n      : 0;\n\n  const inProgressIssues =\n    stats.inProgressIssues ??\n    stats.totalIssues - stats.openIssues - stats.closedIssues;\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      <StatCard\n        title=\"Open Issues\"\n        value={stats.openIssues}\n        icon={<AlertCircleIcon className=\"h-4 w-4\" />}\n        description=\"Requires attention\"\n        trend={stats.openIssues > 0 ? \"needs-attention\" : \"good\"}\n      />\n\n      <StatCard\n        title=\"In Progress\"\n        value={inProgressIssues}\n        icon={<ClockIcon className=\"h-4 w-4\" />}\n        description=\"Being worked on\"\n        trend=\"neutral\"\n      />\n\n      <StatCard\n        title=\"Resolution Rate\"\n        value={`${String(resolutionRate)}%`}\n        icon={<CheckCircleIcon className=\"h-4 w-4\" />}\n        description=\"Issues resolved\"\n        trend={\n          resolutionRate >= 80\n            ? \"good\"\n            : resolutionRate >= 60\n              ? \"neutral\"\n              : \"needs-attention\"\n        }\n      />\n\n      <StatCard\n        title=\"Total Machines\"\n        value={stats.totalMachines}\n        icon={<WrenchIcon className=\"h-4 w-4\" />}\n        description=\"In your inventory\"\n        trend=\"neutral\"\n      />\n    </div>\n  );\n}\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  icon: React.ReactNode;\n  description: string;\n  trend: \"good\" | \"neutral\" | \"needs-attention\";\n}\n\nfunction StatCard({ title, value, icon, description, trend }: StatCardProps): JSX.Element {\n  const trendColors = {\n    good: \"text-tertiary\",\n    neutral: \"text-secondary\",\n    \"needs-attention\": \"text-error\",\n  };\n\n  const bgColors = {\n    good: \"bg-tertiary-container\",\n    neutral: \"bg-secondary-container\",\n    \"needs-attention\": \"bg-error-container\",\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <div className={`p-2 rounded-full ${bgColors[trend]}`}>\n          <div className={trendColors[trend]}>{icon}</div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{value}</div>\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/dashboard/quick-actions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/forms/CreateIssueFormServer.tsx","messages":[{"ruleId":"@typescript-eslint/no-confusing-void-expression","severity":2,"message":"Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.","line":120,"column":37,"nodeType":"CallExpression","messageId":"invalidVoidExprArrow","endLine":120,"endColumn":52,"fix":{"range":[3767,3782],"text":"{ setMachineId(v); }"}},{"ruleId":"@typescript-eslint/no-confusing-void-expression","severity":2,"message":"Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.","line":158,"column":37,"nodeType":"CallExpression","messageId":"invalidVoidExprArrow","endLine":158,"endColumn":51,"fix":{"range":[5110,5124],"text":"{ setPriority(v); }"}},{"ruleId":"@typescript-eslint/no-confusing-void-expression","severity":2,"message":"Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.","line":194,"column":39,"nodeType":"CallExpression","messageId":"invalidVoidExprArrow","endLine":194,"endColumn":55,"fix":{"range":[6414,6430],"text":"{ setAssigneeId(v); }"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"/**\n * Create Issue Form Server Component\n * Phase 3A: Server-first form with Server Actions integration\n * Replaces client-heavy form with server form + client enhancement islands\n */\n\n\"use client\";\n\nimport { useActionState, useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"~/components/ui/card\";\nimport { Button } from \"~/components/ui/button\";\nimport { Input } from \"~/components/ui/input\";\nimport { Textarea } from \"~/components/ui/textarea\";\nimport { Label } from \"~/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"~/components/ui/select\";\nimport type { ActionResult } from \"~/lib/actions/shared\";\nimport type { MachineForIssues } from \"~/lib/types\";\n\ntype Machine = MachineForIssues;\ninterface User {\n  id: string;\n  name: string | null;\n  email: string;\n}\n\ninterface CreateIssueFormServerProps {\n  machines: Machine[];\n  users?: User[];\n  className?: string;\n  action: (\n    prevState: ActionResult<{ id: string }> | null,\n    formData: FormData,\n  ) => Promise<ActionResult<{ id: string }>>;\n  initialMachineId?: string;\n}\n\n/**\n * Client component for issue creation form with Server Actions\n * Uses React 19 useActionState for enhanced form handling\n */\nexport function CreateIssueFormServer({\n  machines,\n  users = [],\n  className,\n  action,\n  initialMachineId,\n}: CreateIssueFormServerProps): JSX.Element {\n  const [state, formAction, isPending] = useActionState(action, null);\n  // Local state to ensure Radix Select values are included in HTML form submission\n  const [machineId, setMachineId] = useState<string | undefined>(\n    initialMachineId,\n  );\n  const [priority, setPriority] = useState<string>(\"medium\");\n  const [assigneeId, setAssigneeId] = useState<string | undefined>(undefined);\n  const router = useRouter();\n\n  // Client-side redirect after successful creation\n  useEffect(() => {\n    if (state && state.success && state.data.id) {\n      router.push(`/issues/${state.data.id}`);\n    }\n  }, [state, router]);\n\n  return (\n    <Card className={className} data-testid=\"create-issue-form-wrapper\">\n      <CardHeader>\n        <CardTitle>Create New Issue</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {/* Server Action form with useActionState */}\n        <form\n          action={formAction}\n          className=\"space-y-6\"\n          data-testid=\"create-issue-form\"\n        >\n          {/* Title field */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">\n              Issue Title <span className=\"text-destructive\">*</span>\n            </Label>\n            <Input\n              id=\"title\"\n              name=\"title\"\n              placeholder=\"Enter issue title\"\n              required\n              disabled={isPending}\n              data-testid=\"issue-title-input\"\n            />\n          </div>\n\n          {/* Description field */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              name=\"description\"\n              placeholder=\"Describe the issue in detail\"\n              rows={4}\n              disabled={isPending}\n              data-testid=\"issue-description-input\"\n            />\n          </div>\n\n          {/* Machine selection (Radix Select does not submit value natively, so we mirror into hidden input) */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"machineId\">\n              Machine <span className=\"text-destructive\">*</span>\n            </Label>\n            <Select\n              required\n              disabled={isPending}\n              value={machineId ?? \"\"}\n              onValueChange={(v) => setMachineId(v)}\n            >\n              <SelectTrigger data-testid=\"machine-select-trigger\">\n                <SelectValue\n                  placeholder=\"Select a machine\"\n                  data-testid=\"machine-select-value\"\n                />\n              </SelectTrigger>\n              <SelectContent>\n                {machines.map((machine) => (\n                  <SelectItem\n                    key={machine.id}\n                    value={machine.id}\n                    data-testid=\"machine-option\"\n                    data-machine-id={machine.id}\n                  >\n                    {machine.name} ({machine.model.name})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {/* Hidden input to ensure value is submitted */}\n            <input\n              type=\"hidden\"\n              name=\"machineId\"\n              value={machineId ?? \"\"}\n              data-testid=\"machineId-hidden\"\n              required\n            />\n          </div>\n\n          {/* Priority selection (mirrored to hidden input) */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"priority\">Priority</Label>\n            <Select\n              disabled={isPending}\n              data-testid=\"priority-select\"\n              value={priority}\n              onValueChange={(v) => setPriority(v)}\n            >\n              <SelectTrigger data-testid=\"priority-select-trigger\">\n                <SelectValue\n                  placeholder=\"Select priority\"\n                  data-testid=\"priority-select-value\"\n                />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"low\" data-testid=\"priority-option-low\">\n                  Low\n                </SelectItem>\n                <SelectItem value=\"medium\" data-testid=\"priority-option-medium\">\n                  Medium\n                </SelectItem>\n                <SelectItem value=\"high\" data-testid=\"priority-option-high\">\n                  High\n                </SelectItem>\n              </SelectContent>\n            </Select>\n            <input\n              type=\"hidden\"\n              name=\"priority\"\n              value={priority}\n              data-testid=\"priority-hidden\"\n            />\n          </div>\n\n          {/* Assignee selection (optional) */}\n          {users.length > 0 && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"assigneeId\">Assignee</Label>\n              <Select\n                disabled={isPending}\n                data-testid=\"assignee-select\"\n                value={assigneeId ?? \"\"}\n                onValueChange={(v) => setAssigneeId(v)}\n              >\n                <SelectTrigger data-testid=\"assignee-select-trigger\">\n                  <SelectValue\n                    placeholder=\"Select assignee (optional)\"\n                    data-testid=\"assignee-select-value\"\n                  />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem\n                    value=\"unassigned\"\n                    data-testid=\"assignee-option-unassigned\"\n                  >\n                    Unassigned\n                  </SelectItem>\n                  {users.map((user) => (\n                    <SelectItem\n                      key={user.id}\n                      value={user.id}\n                      data-testid=\"assignee-option\"\n                      data-assignee-id={user.id}\n                    >\n                      {user.name} ({user.email})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <input\n                type=\"hidden\"\n                name=\"assigneeId\"\n                value={assigneeId ?? \"\"}\n                data-testid=\"assigneeId-hidden\"\n              />\n            </div>\n          )}\n\n          {/* Error/Success display */}\n          {state && !state.success && (\n            <div\n              className=\"text-error text-sm\"\n              data-testid=\"create-issue-error\"\n            >\n              {state.error || \"Failed to create issue. Please try again.\"}\n            </div>\n          )}\n\n          {state && !state.success && state.fieldErrors && (\n            <ul\n              className=\"text-error text-xs space-y-1 list-disc pl-5\"\n              data-testid=\"create-issue-field-errors\"\n            >\n              {Object.entries(state.fieldErrors).map(([field, errors]) => (\n                <li key={field} data-field={field}>\n                  <strong>{field}:</strong> {errors[0]}\n                </li>\n              ))}\n            </ul>\n          )}\n\n          {state && state.success && (\n            <div\n              className=\"text-tertiary text-sm\"\n              data-testid=\"create-issue-success\"\n            >\n              ✅ Issue created successfully! Redirecting...\n            </div>\n          )}\n\n          {/* Server Action submit button */}\n          <Button\n            type=\"submit\"\n            disabled={isPending}\n            className=\"w-full\"\n            data-testid=\"create-issue-submit\"\n          >\n            {isPending ? \"Creating Issue...\" : \"Create Issue\"}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/forms/form-enhancement-client.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/homepage/PinPointHomepage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/hooks/use-mobile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/issues/AdvancedFiltersDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/issues/FilterPresets.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/issues/FilterToolbar.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":237,"column":26,"nodeType":"MemberExpression","endLine":237,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { ChevronDown, ArrowUpDown } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Card } from \"~/components/ui/card\";\nimport { Button } from \"~/components/ui/button\";\nimport { Label } from \"~/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"~/components/ui/select\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"~/components/ui/tooltip\";\nimport { cn } from \"~/lib/utils\";\nimport { ISSUE_SORT_OPTIONS } from \"~/lib/types/filters\";\n\nimport { AdvancedFiltersDropdown } from \"./AdvancedFiltersDropdown\";\nimport { MachineFilterDropdown } from \"./MachineFilterDropdown\";\nimport { FilteredSearch } from \"~/components/ui/filtered-search\";\nimport { StatusTogglePills } from \"./StatusTogglePills\";\nimport { FilterPresets } from \"./FilterPresets\";\n\nimport { api } from \"~/trpc/react\";\n\ninterface IssueFilters {\n  locationId?: string | undefined;\n  machineId?: string | undefined;\n  statusIds?: string[] | undefined;\n  search?: string | undefined;\n  assigneeId?: string | undefined;\n  reporterId?: string | undefined;\n  ownerId?: string | undefined;\n  sortBy: (typeof ISSUE_SORT_OPTIONS)[number];\n  sortOrder: \"asc\" | \"desc\";\n}\n\ninterface FilterToolbarProps {\n  filters: IssueFilters;\n  onFiltersChange: (newFilters: Partial<IssueFilters>) => void;\n  isLoading?: boolean;\n}\n\nexport function FilterToolbar({\n  filters,\n  onFiltersChange,\n  isLoading = false,\n}: FilterToolbarProps): JSX.Element {\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [activePresetId, setActivePresetId] = useState<string>();\n\n  // Fetch locations for filter dropdown\n  const { data: locations } = api.location.getAll.useQuery();\n\n  // Get current user for \"My Issues\" preset\n  const { data: currentUser } = api.user.getProfile.useQuery();\n\n  const handleSortOrderToggle = (): void => {\n    onFiltersChange({\n      sortOrder: filters.sortOrder === \"asc\" ? \"desc\" : \"asc\",\n    });\n  };\n\n  const handlePresetClick = (\n    presetFilters: Partial<IssueFilters>,\n    presetId?: string,\n  ): void => {\n    // Apply preset filters and mark which preset is active\n    onFiltersChange({\n      ...filters,\n      ...presetFilters,\n      // Reset other filters when applying preset\n      ...(Object.keys(presetFilters).length === 0 && {\n        assigneeId: undefined,\n        search: undefined,\n        statusIds: undefined,\n      }),\n    });\n    setActivePresetId(presetId);\n  };\n\n  return (\n    <Card className=\"p-4 mb-6 border\">\n      {/* Filter Presets Row */}\n      <div className=\"mb-4\">\n        <FilterPresets\n          currentUserId={currentUser?.id}\n          onPresetClick={(presetFilters) => {\n            handlePresetClick(presetFilters);\n          }}\n          activePresetId={activePresetId}\n        />\n      </div>\n\n      {/* Primary Filter Row */}\n      <div className=\"flex items-center gap-4 flex-wrap\">\n        {/* Search - Most prominent */}\n        <div className=\"flex-grow min-w-[250px]\">\n          <FilteredSearch\n            value={filters.search ?? \"\"}\n            onChange={(search) => {\n              onFiltersChange({ search: search === \"\" ? undefined : search });\n            }}\n            placeholder=\"Search issues...\"\n          />\n        </div>\n\n        {/* Status Pills - Primary filter */}\n        <div className=\"flex items-center gap-2\">\n          <Label className=\"text-xs font-medium text-muted-foreground\">\n            Status:\n          </Label>\n          <StatusTogglePills\n            value={filters.statusIds ?? []}\n            onChange={(statusIds: string[]) => {\n              onFiltersChange({ statusIds });\n            }}\n            parentLoading={isLoading}\n          />\n        </div>\n\n        {/* Machine Filter - Primary */}\n        <MachineFilterDropdown\n          value={filters.machineId ?? \"\"}\n          onChange={(machineId) => {\n            onFiltersChange({\n              machineId: machineId === \"\" ? undefined : machineId,\n            });\n          }}\n        />\n\n        {/* Advanced Filters Toggle */}\n        <div className=\"flex items-center gap-2\">\n          <AdvancedFiltersDropdown\n            assigneeId={filters.assigneeId ?? \"\"}\n            reporterId={filters.reporterId ?? \"\"}\n            ownerId={filters.ownerId ?? \"\"}\n            onAssigneeChange={(assigneeId) => {\n              onFiltersChange({\n                assigneeId: assigneeId === \"\" ? undefined : assigneeId,\n              });\n            }}\n            onReporterChange={(reporterId) => {\n              onFiltersChange({\n                reporterId: reporterId === \"\" ? undefined : reporterId,\n              });\n            }}\n            onOwnerChange={(ownerId) => {\n              onFiltersChange({\n                ownerId: ownerId === \"\" ? undefined : ownerId,\n              });\n            }}\n          />\n\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => {\n              setShowAdvanced(!showAdvanced);\n            }}\n            aria-label={\n              showAdvanced ? \"Hide advanced filters\" : \"Show advanced filters\"\n            }\n            className={cn(\n              \"h-8 w-8 p-0 transition-all duration-200\",\n              showAdvanced && \"text-primary\",\n            )}\n          >\n            <ChevronDown\n              className={cn(\n                \"h-4 w-4 transition-transform duration-200\",\n                showAdvanced && \"rotate-180\",\n              )}\n            />\n          </Button>\n        </div>\n      </div>\n\n      {/* Secondary Filters - Collapsible */}\n      {showAdvanced && (\n        <div className=\"mt-4 pt-4 border-t flex items-center gap-4 flex-wrap\">\n          {/* Location Filter */}\n          <div className=\"min-w-[150px]\">\n            <Select\n              value={filters.locationId ?? \"\"}\n              onValueChange={(value) => {\n                onFiltersChange({\n                  locationId: value === \"\" ? undefined : value,\n                });\n              }}\n            >\n              <SelectTrigger className=\"h-9\">\n                <SelectValue placeholder=\"All Locations\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Locations</SelectItem>\n                {locations?.map((location: { id: string; name: string }) => (\n                  <SelectItem key={location.id} value={location.id}>\n                    {location.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Sort Controls */}\n          <div className=\"flex items-center gap-2\">\n            <div className=\"min-w-[130px]\">\n              <Select\n                value={filters.sortBy}\n                onValueChange={(value) => {\n                  onFiltersChange({\n                    sortBy: value as IssueFilters[\"sortBy\"],\n                  });\n                }}\n              >\n                <SelectTrigger className=\"h-9\">\n                  <SelectValue placeholder=\"Sort By\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {ISSUE_SORT_OPTIONS.map((option) => {\n                    const labels = {\n                      created: \"Created Date\",\n                      updated: \"Updated Date\",\n                      status: \"Status\",\n                      severity: \"Priority\",\n                      machine: \"Machine\",\n                    } as const;\n                    return (\n                      <SelectItem key={option} value={option}>\n                        {labels[option]}\n                      </SelectItem>\n                    );\n                  })}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleSortOrderToggle}\n                    className={cn(\n                      \"h-8 w-8 p-0 transition-all duration-200\",\n                      filters.sortOrder === \"desc\" && \"text-primary\",\n                    )}\n                  >\n                    <ArrowUpDown\n                      className={cn(\n                        \"h-4 w-4 transition-transform duration-200\",\n                        filters.sortOrder === \"desc\" && \"rotate-180\",\n                      )}\n                    />\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>\n                    Sort{\" \"}\n                    {filters.sortOrder === \"asc\" ? \"Ascending\" : \"Descending\"}\n                  </p>\n                </TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/issues/MachineFilterDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/issues/StatusTogglePills.tsx","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":79,"column":31,"nodeType":"MemberExpression","endLine":79,"endColumn":59,"suppressions":[{"kind":"directive","justification":"category is type-constrained to union type"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":100,"column":31,"nodeType":"MemberExpression","endLine":100,"endColumn":59,"suppressions":[{"kind":"directive","justification":"category is type-constrained to union type"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":110,"column":31,"nodeType":"MemberExpression","endLine":110,"endColumn":59,"suppressions":[{"kind":"directive","justification":"category is type-constrained to union type"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":143,"column":23,"nodeType":"MemberExpression","endLine":143,"endColumn":45,"suppressions":[{"kind":"directive","justification":"category is type-constrained to union type"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/issues/comment-form-client.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/issues/issue-active-filters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/issues/issue-assignment-client.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/issues/issue-detail-server.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/issues/issue-status-update-client.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/issues/issues-list-server.tsx","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-type-conversion","severity":2,"message":"Passing a string to String() does not change the type or value of the string.","line":139,"column":24,"nodeType":"Identifier","messageId":"unnecessaryTypeConversion","endLine":139,"endColumn":30,"suggestions":[{"messageId":"suggestRemove","fix":{"range":[4319,4351],"text":"issue.machine.model.name"},"desc":"Remove the type conversion."},{"messageId":"suggestSatisfies","data":{"type":"string"},"fix":{"range":[4319,4351],"text":"issue.machine.model.name satisfies string"},"desc":"Instead, assert that the value satisfies the string type."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Suspense } from \"react\";\nimport Link from \"next/link\";\nimport { Card, CardContent, CardHeader } from \"~/components/ui/card\";\nimport { Button } from \"~/components/ui/button\";\nimport { Badge } from \"~/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"~/components/ui/avatar\";\nimport { Skeleton } from \"~/components/ui/skeleton\";\nimport {\n  CalendarIcon,\n  UserIcon,\n  WrenchIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from \"lucide-react\";\nimport { getIssuesForOrg, type IssueSorting } from \"~/lib/dal/issues\";\nimport type { IssueFilters } from \"~/lib/types\";\nimport { formatDistanceToNow } from \"date-fns\";\n\n// Type based on actual DAL structure\ninterface Issue {\n  id: string;\n  title: string;\n  description?: string | null;\n  created_at: Date;\n  machine: {\n    id: string;\n    name: string;\n    model_id: string;\n    location_id: string;\n    model: {\n      id: string;\n      name: string;\n    } | null;\n  } | null;\n  assignedTo: {\n    id: string;\n    name: string | null;\n    email: string | null;\n  } | null;\n  status: {\n    id: string;\n    name: string;\n    category: \"NEW\" | \"IN_PROGRESS\" | \"RESOLVED\";\n  } | null;\n  priority: {\n    id: string;\n    name: string;\n    order: number;\n  } | null;\n}\n\ninterface PaginationResult {\n  totalCount: number;\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n  totalPages: number;\n  currentPage: number;\n}\n\ninterface IssuesListServerProps {\n  issues?: Issue[];\n  pagination?: PaginationResult;\n  filters?: IssueFilters;\n  sorting?: IssueSorting;\n  limit?: number;\n}\n\n// Priority color mapping - based on common priority names\nconst priorityColors = {\n  Low: \"bg-primary-container text-on-primary-container border-primary\",\n  Medium: \"bg-secondary-container text-on-secondary-container border-secondary\",\n  High: \"bg-error-container text-on-error-container border-error\",\n  Critical: \"bg-primary-container text-on-primary-container border-primary\",\n} as const;\n\n// Status color mapping - based on status categories\nconst statusColors = {\n  NEW: \"bg-tertiary-container text-on-tertiary-container border-tertiary\",\n  IN_PROGRESS:\n    \"bg-secondary-container text-on-secondary-container border-secondary\",\n  RESOLVED: \"bg-surface-container-low text-on-surface border-outline-variant\",\n} as const;\n\nfunction IssueCard({ issue }: { issue: Issue }): JSX.Element {\n  const priorityColor =\n    issue.priority?.name && issue.priority.name in priorityColors\n      ? priorityColors[issue.priority.name as keyof typeof priorityColors]\n      : \"bg-surface-container-low text-on-surface border-outline-variant\";\n\n  const statusColor = issue.status?.category\n    ? statusColors[issue.status.category]\n    : \"bg-surface-container-low text-on-surface border-outline-variant\";\n\n  return (\n    <Card\n      className=\"hover:shadow-md transition-shadow\"\n      data-testid=\"issue-card\"\n      data-issue-id={issue.id}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex justify-between items-start\">\n          <div className=\"flex-1\">\n            <Link\n              href={`/issues/${issue.id}`}\n              className=\"text-lg font-semibold hover:text-primary transition-colors\"\n              data-testid=\"issue-link\"\n            >\n              {issue.title}\n            </Link>\n            {issue.description && (\n              <p className=\"text-sm text-muted-foreground mt-1 line-clamp-2\">\n                {issue.description}\n              </p>\n            )}\n          </div>\n          <div className=\"flex gap-2 ml-4\">\n            {issue.priority && (\n              <Badge variant=\"outline\" className={priorityColor}>\n                {issue.priority.name}\n              </Badge>\n            )}\n            {issue.status && (\n              <Badge variant=\"outline\" className={statusColor}>\n                {issue.status.name}\n              </Badge>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"pt-0\">\n        <div className=\"flex justify-between items-center text-sm text-muted-foreground\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-1\">\n              <WrenchIcon className=\"h-4 w-4\" />\n              <span>\n                {issue.machine?.name ?? \"Unknown Machine\"}\n                {issue.machine?.model?.name &&\n                  ` (${String(issue.machine.model.name)})`}\n              </span>\n            </div>\n\n            <div className=\"flex items-center gap-1\">\n              <CalendarIcon className=\"h-4 w-4\" />\n              <span>{formatDistanceToNow(new Date(issue.created_at))} ago</span>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-1\">\n            {issue.assignedTo ? (\n              <>\n                <Avatar className=\"h-5 w-5\">\n                  <AvatarFallback className=\"text-xs\">\n                    {issue.assignedTo.name\n                      ?.split(\" \")\n                      .map((n) => n[0])\n                      .join(\"\") ?? \"?\"}\n                  </AvatarFallback>\n                </Avatar>\n                <span>{issue.assignedTo.name ?? \"Unknown\"}</span>\n              </>\n            ) : (\n              <>\n                <UserIcon className=\"h-4 w-4\" />\n                <span>Unassigned</span>\n              </>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Direct data fetching version for pages\nexport async function IssuesListWithData({ limit }: { limit?: number }): Promise<JSX.Element> {\n  const issues = await getIssuesForOrg();\n  const displayIssues = limit ? issues.slice(0, limit) : issues;\n\n  if (displayIssues.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <WrenchIcon className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n        <h3 className=\"mt-4 text-lg font-medium\">No issues found</h3>\n        <p className=\"mt-2 text-sm text-muted-foreground\">\n          Get started by reporting your first issue.\n        </p>\n        <Button asChild className=\"mt-4\">\n          <Link href=\"/issues/create\">Create Issue</Link>\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\" data-testid=\"issues-list\">\n      {displayIssues.map((issue): JSX.Element => (\n        <IssueCard key={issue.id} issue={issue} />\n      ))}\n    </div>\n  );\n}\n\n// Pagination controls component\nfunction PaginationControls({\n  pagination,\n  filters,\n  sorting,\n}: {\n  pagination: PaginationResult;\n  filters: IssueFilters;\n  sorting: IssueSorting;\n}): JSX.Element | null {\n  if (pagination.totalPages <= 1) return null;\n\n  // Build query parameters\n  const buildUrl = (page: number): string => {\n    const params = new URLSearchParams();\n    if (filters.status?.length) params.set(\"status\", filters.status.join(\",\"));\n    if (filters.priority?.length)\n      params.set(\"priority\", filters.priority.join(\",\"));\n    if (filters.assigneeId) params.set(\"assignee\", filters.assigneeId);\n    if (filters.search) params.set(\"search\", filters.search);\n    if (page > 1) params.set(\"page\", page.toString());\n    if (sorting.field !== \"created_at\") params.set(\"sort\", sorting.field);\n    if (sorting.order !== \"desc\") params.set(\"order\", sorting.order);\n\n    return `/issues?${params.toString()}`;\n  };\n\n  return (\n    <div className=\"flex items-center justify-between border-t pt-6\">\n      <div className=\"text-sm text-muted-foreground\">\n        Showing page {pagination.currentPage} of {pagination.totalPages} (\n        {pagination.totalCount} total)\n      </div>\n\n      <div className=\"flex items-center space-x-2\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          asChild\n          disabled={!pagination.hasPreviousPage}\n        >\n          <Link href={buildUrl(pagination.currentPage - 1)}>\n            <ChevronLeftIcon className=\"h-4 w-4 mr-1\" />\n            Previous\n          </Link>\n        </Button>\n\n        <div className=\"text-sm font-medium\">Page {pagination.currentPage}</div>\n\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          asChild\n          disabled={!pagination.hasNextPage}\n        >\n          <Link href={buildUrl(pagination.currentPage + 1)}>\n            Next\n            <ChevronRightIcon className=\"h-4 w-4 ml-1\" />\n          </Link>\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// Props-based version for reuse\nexport function IssuesListServer({\n  issues,\n  pagination,\n  filters,\n  sorting,\n  limit,\n}: IssuesListServerProps): JSX.Element {\n  if (!issues) {\n    return (\n      <Suspense fallback={<IssuesListSkeleton />}>\n        <IssuesListWithData limit={limit ?? 20} />\n      </Suspense>\n    );\n  }\n\n  const displayIssues = limit ? issues.slice(0, limit) : issues;\n\n  if (displayIssues.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <WrenchIcon className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n        <h3 className=\"mt-4 text-lg font-medium\">No issues found</h3>\n        <p className=\"mt-2 text-sm text-muted-foreground\">\n          {filters?.search ||\n          filters?.status?.length ||\n          filters?.priority?.length\n            ? \"Try adjusting your filters to see more results.\"\n            : \"Get started by reporting your first issue.\"}\n        </p>\n        <Button asChild className=\"mt-4\">\n          <Link href=\"/issues/create\">Create Issue</Link>\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\" data-testid=\"issues-list\">\n      {displayIssues.map((issue): JSX.Element => (\n        <IssueCard key={issue.id} issue={issue} />\n      ))}\n\n      {/* Pagination controls */}\n      {pagination && filters && sorting && (\n        <PaginationControls\n          pagination={pagination}\n          filters={filters}\n          sorting={sorting}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction IssuesListSkeleton(): JSX.Element {\n  return (\n    <div className=\"space-y-4\">\n      {Array.from({ length: 3 }).map((_, i): JSX.Element => (\n        <Card key={i}>\n          <CardHeader className=\"pb-3\">\n            <div className=\"space-y-2\">\n              <Skeleton className=\"h-6 w-3/4\" />\n              <Skeleton className=\"h-4 w-1/2\" />\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex justify-between items-center\">\n              <Skeleton className=\"h-4 w-1/3\" />\n              <Skeleton className=\"h-4 w-1/4\" />\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/issues/realtime-comments-client.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":123,"column":21,"nodeType":"MemberExpression","endLine":123,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Realtime Comments Client Island\n * Phase 3D: Focused client island for real-time comment updates\n * Example implementation from Phase 3D specification\n */\n\n\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Alert, AlertDescription } from \"~/components/ui/alert\";\nimport { Badge } from \"~/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"~/components/ui/avatar\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { MessageSquareIcon } from \"lucide-react\";\nimport { REALTIME_SUBSCRIBE_STATES } from \"@supabase/realtime-js\";\n\ninterface Comment {\n  id: string;\n  content: string;\n  author_id: string;\n  issue_id: string;\n  created_at: string;\n  updated_at: string;\n  author?: {\n    id: string;\n    name: string | null;\n    email: string;\n    avatar_url?: string;\n  };\n}\n\ninterface RealtimeCommentsClientProps {\n  issueId: string;\n  currentUserId?: string;\n  existingCommentIds?: string[];\n}\n\n/**\n * Focused client island for real-time comment updates\n * Shows new comments from other users in real-time\n * Own comments are handled optimistically by the comment form\n */\nexport function RealtimeCommentsClient({\n  issueId,\n  currentUserId,\n  existingCommentIds = [],\n}: RealtimeCommentsClientProps): JSX.Element | null {\n  const [newComments, setNewComments] = useState<Comment[]>([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const [statusUpdate, setStatusUpdate] = useState<{\n    status: string;\n    user: string;\n    timestamp: string;\n  } | null>(null);\n\n  useEffect(() => {\n    if (!currentUserId) return;\n\n    // Import Supabase client dynamically to avoid SSR issues\n    const initializeRealtimeConnection = async () => {\n      try {\n        const { createClient } = await import(\"~/utils/supabase/client\");\n        const supabase = createClient();\n\n        setIsConnected(true);\n\n        const channel = supabase\n          .channel(`issue-${issueId}-realtime`)\n          // Listen for new comments\n          .on(\n            \"postgres_changes\",\n            {\n              event: \"INSERT\",\n              schema: \"public\",\n              table: \"comments\",\n              filter: `issue_id=eq.${issueId}`,\n            },\n            (payload) => {\n              // Only show comments from other users and not already loaded\n              if (\n                payload.new[\"author_id\"] !== currentUserId &&\n                !existingCommentIds.includes(String(payload.new[\"id\"]))\n              ) {\n                const newComment = payload.new as Comment;\n\n                setNewComments((prev) => {\n                  // Avoid duplicates\n                  if (prev.some((c) => c.id === newComment.id)) {\n                    return prev;\n                  }\n                  return [...prev, newComment];\n                });\n\n                // Auto-remove notification after 45 seconds\n                setTimeout(() => {\n                  setNewComments((prev) =>\n                    prev.filter((c) => c.id !== newComment.id),\n                  );\n                }, 45000);\n              }\n            },\n          )\n          // Listen for comment updates (edits)\n          .on(\n            \"postgres_changes\",\n            {\n              event: \"UPDATE\",\n              schema: \"public\",\n              table: \"comments\",\n              filter: `issue_id=eq.${issueId}`,\n            },\n            (payload) => {\n              // Update existing comment in real-time\n              if (payload.new[\"author_id\"] !== currentUserId) {\n                const updatedComment = payload.new as Comment;\n\n                setNewComments((prev) => {\n                  const existingIndex = prev.findIndex(\n                    (c) => c.id === updatedComment.id,\n                  );\n                  if (existingIndex !== -1) {\n                    const updated = [...prev];\n                    updated[existingIndex] = updatedComment;\n                    return updated;\n                  }\n                  return prev;\n                });\n              }\n            },\n          )\n          // Listen for issue status changes\n          .on(\n            \"postgres_changes\",\n            {\n              event: \"UPDATE\",\n              schema: \"public\",\n              table: \"issues\",\n              filter: `id=eq.${issueId}`,\n            },\n            (payload) => {\n              // Show status update notification\n              if (payload.new[\"updated_at\"] !== payload.old[\"updated_at\"]) {\n                setStatusUpdate({\n                  status: \"Status updated\",\n                  user: \"Someone\",\n                  timestamp: new Date().toISOString(),\n                });\n\n                // Auto-remove status notification after 10 seconds\n                setTimeout(() => {\n                  setStatusUpdate(null);\n                }, 10000);\n              }\n            },\n          )\n          .subscribe((status) => {\n            if (status === REALTIME_SUBSCRIBE_STATES.SUBSCRIBED) {\n              setIsConnected(true);\n            } else if (status === REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR) {\n              setIsConnected(false);\n            }\n          });\n\n        return () => {\n          void supabase.removeChannel(channel);\n          setIsConnected(false);\n        };\n      } catch (error) {\n        console.error(\"Failed to initialize realtime connection:\", error);\n        setIsConnected(false);\n        return () => {\n          // No-op cleanup function on error\n        };\n      }\n    };\n\n    let cleanupFunction: (() => void) | null = null;\n\n    // Initialize async connection and store cleanup function\n    void initializeRealtimeConnection()\n      .then((cleanup) => {\n        cleanupFunction = cleanup;\n      })\n      .catch(console.error);\n\n    return () => {\n      if (cleanupFunction) {\n        cleanupFunction();\n      }\n    };\n  }, [issueId, currentUserId, existingCommentIds]);\n\n  // Don't render anything if no new comments and no status updates\n  if (newComments.length === 0 && !statusUpdate) {\n    return null;\n  }\n\n  return (\n    <div className=\"space-y-3 mt-4\">\n      {/* Connection status indicator */}\n      {(newComments.length > 0 || statusUpdate) && (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-muted-foreground flex items-center gap-2\">\n            <MessageSquareIcon className=\"h-4 w-4\" />\n            {newComments.length > 0 && statusUpdate\n              ? \"Live updates:\"\n              : newComments.length > 0\n                ? \"New comments from other users:\"\n                : \"Issue updated:\"}\n          </div>\n          <Badge\n            variant={isConnected ? \"secondary\" : \"outline\"}\n            className=\"text-xs\"\n          >\n            {isConnected ? \"Live\" : \"Disconnected\"}\n          </Badge>\n        </div>\n      )}\n\n      {/* Status update notification */}\n      {statusUpdate && (\n        <Alert className=\"border-primary bg-primary-container\">\n          <AlertDescription>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                Issue Updated\n              </Badge>\n              <span className=\"text-sm font-medium\">{statusUpdate.status}</span>\n              <span className=\"text-xs text-muted-foreground\">\n                {formatDistanceToNow(new Date(statusUpdate.timestamp), {\n                  addSuffix: true,\n                })}\n              </span>\n            </div>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Real-time comment notifications */}\n      {newComments.map((comment) => (\n        <Alert\n          key={comment.id}\n          className=\"border-tertiary bg-tertiary-container\"\n        >\n          <AlertDescription>\n            <div className=\"flex items-start gap-3\">\n              <Avatar className=\"h-8 w-8\">\n                <AvatarFallback>\n                  {comment.author?.name\n                    ?.split(\" \")\n                    .map((n) => n[0])\n                    .join(\"\") ?? \"U\"}\n                </AvatarFallback>\n              </Avatar>\n\n              <div className=\"flex-1 space-y-1\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-medium text-sm\">\n                    {comment.author?.name ?? \"Someone\"}\n                  </span>\n                  <span className=\"text-xs text-muted-foreground\">\n                    {formatDistanceToNow(new Date(comment.created_at), {\n                      addSuffix: true,\n                    })}\n                  </span>\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    New Comment\n                  </Badge>\n                </div>\n\n                <div className=\"text-sm text-on-surface whitespace-pre-wrap leading-relaxed\">\n                  {comment.content}\n                </div>\n              </div>\n            </div>\n          </AlertDescription>\n        </Alert>\n      ))}\n\n      {/* Instructions for viewing all comments */}\n      {newComments.length > 0 && (\n        <p className=\"text-xs text-center text-muted-foreground\">\n          New comments will automatically integrate into the main thread\n        </p>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/layout/NavigationSkeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/layout/client/MobileNavToggle.tsx","messages":[{"ruleId":"@next/next/no-html-link-for-pages","severity":2,"message":"Do not use an `<a>` element to navigate to `/issues/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":38,"column":17,"nodeType":"JSXOpeningElement","endLine":38,"endColumn":35},{"ruleId":"@next/next/no-html-link-for-pages","severity":2,"message":"Do not use an `<a>` element to navigate to `/machines/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":41,"column":17,"nodeType":"JSXOpeningElement","endLine":41,"endColumn":37},{"ruleId":"@next/next/no-html-link-for-pages","severity":2,"message":"Do not use an `<a>` element to navigate to `/locations/`. Use `<Link />` from `next/link` instead. See: https://nextjs.org/docs/messages/no-html-link-for-pages","line":44,"column":17,"nodeType":"JSXOpeningElement","endLine":44,"endColumn":38}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"~/components/ui/button\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetTrigger,\n  SheetHeader,\n  SheetTitle,\n} from \"~/components/ui/sheet\";\n// import { Menu } from \"lucide-react\";\n\nexport function MobileNavToggle(): JSX.Element {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <Sheet open={isOpen} onOpenChange={setIsOpen}>\n      <SheetTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\" className=\"md:hidden\">\n          {/* <Menu className=\"h-5 w-5\" /> */}\n          <span className=\"text-lg\">☰</span>\n          <span className=\"sr-only\">Toggle navigation menu</span>\n        </Button>\n      </SheetTrigger>\n      <SheetContent side=\"left\" className=\"w-64 p-0\">\n        <div className=\"flex flex-col h-full\">\n          <SheetHeader className=\"p-4 border-b\">\n            <SheetTitle className=\"text-left\">Navigation</SheetTitle>\n          </SheetHeader>\n          <div className=\"flex-1 p-4\">\n            {/* Navigation items would be rendered here */}\n            <div className=\"space-y-2\">\n              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n                <a href=\"/dashboard\">Dashboard</a>\n              </Button>\n              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n                <a href=\"/issues\">Issues</a>\n              </Button>\n              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n                <a href=\"/machines\">Machines</a>\n              </Button>\n              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n                <a href=\"/locations\">Locations</a>\n              </Button>\n              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n                <a href=\"/reports\">Reports</a>\n              </Button>\n              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n                <a href=\"/settings\">Settings</a>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/layout/navigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/layout/notification-bell-client.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/layout/notification-bell-wrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/layout/notifications-list-server.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/layout/user-menu-client.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/locations/LocationDetailView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/locations/LocationList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/machines/client/create-machine-form-client.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/machines/client/machine-filters-client.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/machines/client/machine-qr-code-client.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":76,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":98,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":19},{"ruleId":"@microsoft/sdl/no-inner-html","severity":2,"message":"Do not write to DOM directly using innerHTML/outerHTML property","line":111,"column":9,"nodeType":"AssignmentExpression","messageId":"noInnerHtml","endLine":155,"endColumn":10},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":165,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":165,"endColumn":19},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":235,"column":17,"nodeType":"JSXOpeningElement","endLine":239,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Machine QR Code Management Client Island\n * Phase 3B: QR code operations with download and regeneration\n * Client Component for interactive QR code management\n */\n\n\"use client\";\n\nimport { useState, useTransition } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"~/components/ui/card\";\nimport { Button } from \"~/components/ui/button\";\nimport { Badge } from \"~/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"~/components/ui/dropdown-menu\";\nimport {\n  DownloadIcon,\n  RefreshCwIcon,\n  QrCodeIcon,\n  MoreVerticalIcon,\n  CheckIcon,\n  XIcon,\n} from \"lucide-react\";\nimport { regenerateQRCodeAction } from \"~/lib/actions/machine-actions\";\n\ninterface MachineQRCodeClientProps {\n  machineId: string;\n  qrCodeUrl?: string | null;\n  qrCodeGeneratedAt?: Date | null;\n  machineName: string;\n  showBulkActions?: boolean;\n}\n\nexport function MachineQRCodeClient({\n  machineId,\n  qrCodeUrl,\n  qrCodeGeneratedAt,\n  machineName,\n  showBulkActions: _showBulkActions = false,\n}: MachineQRCodeClientProps): JSX.Element {\n  const [currentQRCode, setCurrentQRCode] = useState(qrCodeUrl);\n  const [generatedAt, setGeneratedAt] = useState(qrCodeGeneratedAt);\n  const [isPending, startTransition] = useTransition();\n  const [message, setMessage] = useState<{\n    type: \"success\" | \"error\";\n    text: string;\n  } | null>(null);\n\n  const handleRegenerate = (): void => {\n    startTransition(async () => {\n      try {\n        const result = await regenerateQRCodeAction(machineId);\n\n        if (result.success) {\n          setCurrentQRCode(result.data.qrCodeUrl);\n          setGeneratedAt(new Date());\n          setMessage({\n            type: \"success\",\n            text: \"QR code regenerated successfully\",\n          });\n\n          // Clear success message after 3 seconds\n          setTimeout(() => {\n            setMessage(null);\n          }, 3000);\n        } else {\n          setMessage({\n            type: \"error\",\n            text: result.error || \"Failed to regenerate QR code\",\n          });\n        }\n      } catch (error) {\n        setMessage({ type: \"error\", text: \"An unexpected error occurred\" });\n      }\n    });\n  };\n\n  const handleDownload = (): void => {\n    if (!currentQRCode) return;\n\n    try {\n      // Create download link\n      const link = document.createElement(\"a\");\n      link.href = currentQRCode;\n      link.download = `${machineName.replace(/[^a-zA-Z0-9]/g, \"_\")}_QR_Code.png`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      setMessage({ type: \"success\", text: \"QR code downloaded\" });\n      setTimeout(() => {\n        setMessage(null);\n      }, 2000);\n    } catch (error) {\n      setMessage({ type: \"error\", text: \"Failed to download QR code\" });\n    }\n  };\n\n  const handlePrint = (): void => {\n    if (!currentQRCode) return;\n\n    try {\n      // Create a new window for printing\n      const printWindow = window.open(\"\", \"_blank\");\n      if (printWindow) {\n        // Use modern DOM manipulation instead of document.write\n        printWindow.document.documentElement.innerHTML = `\n          <html>\n            <head>\n              <title>QR Code - ${machineName}</title>\n              <style>\n                body { \n                  font-family: Arial, sans-serif; \n                  text-align: center; \n                  padding: 20px; \n                }\n                .qr-container { \n                  margin: 20px auto; \n                  max-width: 400px; \n                }\n                .qr-code { \n                  max-width: 100%; \n                  height: auto; \n                  border: 1px solid #ddd; \n                  padding: 20px;\n                  background: white;\n                }\n                .machine-name { \n                  font-size: 18px; \n                  font-weight: bold; \n                  margin-bottom: 10px; \n                }\n                .generated-date { \n                  font-size: 12px; \n                  color: #666; \n                  margin-top: 10px; \n                }\n                @media print {\n                  body { margin: 0; }\n                }\n              </style>\n            </head>\n            <body>\n              <div class=\"qr-container\">\n                <div class=\"machine-name\">${machineName}</div>\n                <img src=\"${currentQRCode}\" alt=\"QR Code for ${machineName}\" class=\"qr-code\" />\n                ${generatedAt ? `<div class=\"generated-date\">Generated: ${generatedAt.toLocaleDateString()}</div>` : \"\"}\n              </div>\n            </body>\n          </html>\n        `;\n        // Remove document.close() as it's not needed with innerHTML\n        printWindow.print();\n        printWindow.close();\n\n        setMessage({ type: \"success\", text: \"QR code sent to printer\" });\n        setTimeout(() => {\n          setMessage(null);\n        }, 2000);\n      }\n    } catch (error) {\n      setMessage({ type: \"error\", text: \"Failed to print QR code\" });\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <QrCodeIcon className=\"h-5 w-5\" />\n            QR Code\n          </div>\n\n          {currentQRCode && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" disabled={isPending}>\n                  <MoreVerticalIcon className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={handleDownload}>\n                  <DownloadIcon className=\"h-4 w-4 mr-2\" />\n                  Download PNG\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={handlePrint}>\n                  <QrCodeIcon className=\"h-4 w-4 mr-2\" />\n                  Print QR Code\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem\n                  onClick={handleRegenerate}\n                  disabled={isPending}\n                >\n                  <RefreshCwIcon\n                    className={`h-4 w-4 mr-2 ${isPending ? \"animate-spin\" : \"\"}`}\n                  />\n                  Regenerate\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Status Message */}\n        {message && (\n          <div\n            className={`flex items-center gap-2 p-2 rounded-md text-sm ${\n              message.type === \"success\"\n                ? \"bg-tertiary-container text-on-tertiary-container border border-tertiary\"\n                : \"bg-error-container text-on-error-container border border-error\"\n            }`}\n          >\n            {message.type === \"success\" ? (\n              <CheckIcon className=\"h-4 w-4\" />\n            ) : (\n              <XIcon className=\"h-4 w-4\" />\n            )}\n            {message.text}\n          </div>\n        )}\n\n        {currentQRCode ? (\n          <>\n            {/* QR Code Display */}\n            <div className=\"flex justify-center\">\n              <div className=\"p-4 border rounded-lg bg-surface\">\n                <img\n                  src={currentQRCode}\n                  alt={`QR Code for ${machineName}`}\n                  className=\"w-32 h-32 object-contain\"\n                />\n              </div>\n            </div>\n\n            {/* Status Badge */}\n            <div className=\"flex justify-center\">\n              <Badge variant=\"secondary\" className=\"gap-1\">\n                <QrCodeIcon className=\"h-3 w-3\" />\n                Active QR Code\n              </Badge>\n            </div>\n\n            {/* Generation Info */}\n            {generatedAt && (\n              <p className=\"text-xs text-center text-muted-foreground\">\n                Generated on {generatedAt.toLocaleDateString()} at{\" \"}\n                {generatedAt.toLocaleTimeString()}\n              </p>\n            )}\n\n            {/* Primary Actions */}\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleDownload}\n                className=\"flex-1\"\n              >\n                <DownloadIcon className=\"h-4 w-4 mr-2\" />\n                Download\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleRegenerate}\n                disabled={isPending}\n                className=\"flex-1\"\n              >\n                <RefreshCwIcon\n                  className={`h-4 w-4 mr-2 ${isPending ? \"animate-spin\" : \"\"}`}\n                />\n                Regenerate\n              </Button>\n            </div>\n          </>\n        ) : (\n          <>\n            {/* No QR Code State */}\n            <div className=\"flex justify-center items-center h-32 border rounded-lg bg-muted/50\">\n              <div className=\"text-center text-muted-foreground\">\n                <QrCodeIcon className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                <p className=\"text-sm font-medium\">No QR Code Generated</p>\n                <p className=\"text-xs\">\n                  Generate a QR code for issue reporting\n                </p>\n              </div>\n            </div>\n\n            {/* Status Badge */}\n            <div className=\"flex justify-center\">\n              <Badge variant=\"secondary\" className=\"gap-1\">\n                <XIcon className=\"h-3 w-3\" />\n                Not Generated\n              </Badge>\n            </div>\n\n            {/* Generate Action */}\n            <Button\n              onClick={handleRegenerate}\n              disabled={isPending}\n              className=\"w-full\"\n              size=\"sm\"\n            >\n              <QrCodeIcon\n                className={`h-4 w-4 mr-2 ${isPending ? \"animate-spin\" : \"\"}`}\n              />\n              Generate QR Code\n            </Button>\n          </>\n        )}\n\n        {/* Info Text */}\n        <p className=\"text-xs text-center text-muted-foreground\">\n          QR code links to the issue reporting form for this machine\n        </p>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/machines/machine-detail-server.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/machines/machine-header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/machines/machine-inventory-server.tsx","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-type-conversion","severity":2,"message":"Passing a string to String() does not change the type or value of the string.","line":189,"column":28,"nodeType":"Identifier","messageId":"unnecessaryTypeConversion","endLine":189,"endColumn":34,"suggestions":[{"messageId":"suggestRemove","fix":{"range":[6089,6118],"text":"machine.location.city"},"desc":"Remove the type conversion."},{"messageId":"suggestSatisfies","data":{"type":"string"},"fix":{"range":[6089,6118],"text":"machine.location.city satisfies string"},"desc":"Instead, assert that the value satisfies the string type."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Machine Inventory Server Component\n * Phase 3B: Server-first machine inventory with shadcn/ui table\n * Replaces Material UI DataGrid with performance-optimized server rendering\n */\n\nimport Link from \"next/link\";\nimport { Badge } from \"~/components/ui/badge\";\nimport { Button } from \"~/components/ui/button\";\nimport { Card, CardContent } from \"~/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"~/components/ui/table\";\nimport { MapPinIcon, QrCodeIcon, PlusIcon } from \"lucide-react\";\nimport { GenericSearch } from \"~/components/ui/generic-search\";\nimport { MachineFiltersClient } from \"./client/machine-filters-client\";\nimport { PaginationUniversal } from \"~/components/ui/pagination-server\";\nimport type { MachineFilters } from \"~/lib/types\";\nimport type {\n  MachinePagination as MachinePaginationType,\n  MachineSorting,\n} from \"~/lib/dal/machines\";\n\ninterface MachineInventoryServerProps {\n  machines: {\n    items: {\n      id: string;\n      name: string;\n      organization_id: string;\n      location_id: string;\n      model_id: string;\n      owner_id: string | null;\n      qr_code_id: string | null;\n      qr_code_url: string | null;\n      qr_code_generated_at: Date | null;\n      created_at: Date;\n      updated_at: Date;\n      location: {\n        id: string;\n        name: string;\n        city: string | null;\n        state: string | null;\n      } | null;\n      model: {\n        id: string;\n        name: string;\n        manufacturer: string | null;\n        year: number | null;\n      } | null;\n    }[];\n    totalCount: number;\n    hasNextPage: boolean;\n    currentPage: number;\n    totalPages: number;\n  };\n  locations: {\n    id: string;\n    name: string;\n    city: string | null;\n    state: string | null;\n  }[];\n  viewMode: \"table\" | \"grid\";\n  filters: MachineFilters;\n  pagination: MachinePaginationType;\n  sorting: MachineSorting;\n  searchParams?: Record<string, string | string[] | undefined>;\n}\n\nexport function MachineInventoryServer({\n  machines,\n  locations,\n  viewMode,\n  filters,\n  pagination: _pagination,\n  sorting: _sorting,\n  searchParams,\n}: MachineInventoryServerProps): JSX.Element {\n  // Empty state\n  if (machines.items.length === 0) {\n    return (\n      <div className=\"space-y-6\">\n        {/* Search and Filters */}\n        <div className=\"flex flex-col md:flex-row gap-4\">\n          <div className=\"flex-1\">\n            <GenericSearch\n              {...(filters.search && { initialSearch: filters.search })}\n              basePath=\"/machines\"\n              placeholder=\"Search machines, locations, or models...\"\n            />\n          </div>\n          <MachineFiltersClient\n            locations={locations}\n            initialFilters={filters}\n            viewMode={viewMode}\n          />\n        </div>\n\n        {/* Empty State */}\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-16\">\n            <div className=\"text-center space-y-4\">\n              <QrCodeIcon className=\"h-16 w-16 text-muted-foreground mx-auto\" />\n              <div className=\"space-y-2\">\n                <h3 className=\"text-lg font-medium\">No machines found</h3>\n                <p className=\"text-muted-foreground max-w-md\">\n                  {filters.search ||\n                  filters.locationIds?.length ||\n                  filters.modelIds?.length\n                    ? \"Try adjusting your search criteria or filters.\"\n                    : \"Get started by adding your first pinball machine to the inventory.\"}\n                </p>\n              </div>\n              <Button asChild>\n                <Link href=\"/machines/new\">\n                  <PlusIcon className=\"h-4 w-4 mr-2\" />\n                  Add Machine\n                </Link>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Search and Filters */}\n      <div className=\"flex flex-col md:flex-row gap-4\">\n        <div className=\"flex-1\">\n          <GenericSearch\n            {...(filters.search && { initialSearch: filters.search })}\n            basePath=\"/machines\"\n            placeholder=\"Search machines, locations, or models...\"\n            size=\"sm\"\n          />\n        </div>\n        <MachineFiltersClient\n          locations={locations}\n          initialFilters={filters}\n          viewMode={viewMode}\n        />\n      </div>\n\n      {/* Results Header */}\n      <div className=\"flex items-center justify-between\">\n        <Badge variant=\"secondary\" className=\"text-sm\">\n          {machines.totalCount.toLocaleString()} machine\n          {machines.totalCount !== 1 ? \"s\" : \"\"}\n        </Badge>\n\n        <div className=\"text-sm text-muted-foreground\">\n          Page {machines.currentPage} of {machines.totalPages}\n        </div>\n      </div>\n\n      {/* Machine Display */}\n      {viewMode === \"grid\" ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n          {machines.items.map((machine) => (\n            <Card\n              key={machine.id}\n              className=\"hover:shadow-md transition-shadow\"\n            >\n              <CardContent className=\"p-4 space-y-3\">\n                <div className=\"space-y-1\">\n                  <Link\n                    href={`/machines/${machine.id}`}\n                    className=\"font-medium hover:underline block\"\n                  >\n                    {machine.name}\n                  </Link>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {machine.model?.manufacturer} {machine.model?.name}\n                    {machine.model?.year && ` (${String(machine.model.year)})`}\n                  </p>\n                </div>\n\n                <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                  <MapPinIcon className=\"h-3 w-3\" />\n                  <span className=\"truncate\">\n                    {machine.location?.name ?? \"Unknown Location\"}\n                    {machine.location?.city &&\n                      `, ${String(machine.location.city)}`}\n                  </span>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  {machine.qr_code_url ? (\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      <QrCodeIcon className=\"h-3 w-3 mr-1\" />\n                      QR Active\n                    </Badge>\n                  ) : (\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      No QR Code\n                    </Badge>\n                  )}\n\n                  <Button asChild variant=\"ghost\" size=\"sm\">\n                    <Link href={`/machines/${machine.id}`}>View</Link>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Machine</TableHead>\n                <TableHead>Location</TableHead>\n                <TableHead>Model</TableHead>\n                <TableHead>QR Code</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {machines.items.map((machine) => (\n                <TableRow key={machine.id}>\n                  <TableCell className=\"space-y-1\">\n                    <Link\n                      href={`/machines/${machine.id}`}\n                      className=\"font-medium hover:underline block\"\n                    >\n                      {machine.name}\n                    </Link>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Added {machine.created_at.toLocaleDateString()}\n                    </div>\n                  </TableCell>\n\n                  <TableCell>\n                    <div className=\"flex items-center gap-1\">\n                      <MapPinIcon className=\"h-3 w-3 text-muted-foreground\" />\n                      <span className=\"truncate\">\n                        {machine.location?.name ?? \"Unknown\"}\n                      </span>\n                    </div>\n                    {machine.location?.city && (\n                      <div className=\"text-sm text-muted-foreground\">\n                        {machine.location.city}\n                        {machine.location.state &&\n                          `, ${machine.location.state}`}\n                      </div>\n                    )}\n                  </TableCell>\n\n                  <TableCell>\n                    <div className=\"space-y-1\">\n                      <div className=\"font-medium\">\n                        {machine.model?.name ?? \"Unknown Model\"}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {machine.model?.manufacturer}\n                        {machine.model?.year &&\n                          ` (${String(machine.model.year)})`}\n                      </div>\n                    </div>\n                  </TableCell>\n\n                  <TableCell>\n                    {machine.qr_code_url ? (\n                      <Badge variant=\"secondary\">\n                        <QrCodeIcon className=\"h-3 w-3 mr-1\" />\n                        Active\n                      </Badge>\n                    ) : (\n                      <Badge variant=\"secondary\">Not Generated</Badge>\n                    )}\n                  </TableCell>\n\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      <Button asChild variant=\"ghost\" size=\"sm\">\n                        <Link href={`/machines/${machine.id}`}>View</Link>\n                      </Button>\n                      <Button asChild variant=\"ghost\" size=\"sm\">\n                        <Link href={`/machines/${machine.id}/edit`}>Edit</Link>\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Card>\n      )}\n\n      {/* Pagination */}\n      <PaginationUniversal\n        currentPage={machines.currentPage}\n        totalPages={machines.totalPages}\n        totalCount={machines.totalCount}\n        baseUrl=\"/machines\"\n        itemName=\"machines\"\n        {...(searchParams && { searchParams })}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/machines/machine-stats-server.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/nav-documents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/nav-main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/nav-secondary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/nav-user.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/notifications/notification-client.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/permissions/PermissionGate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/permissions/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/profile/ProfilePictureUpload.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":34,"column":13,"nodeType":"JSXOpeningElement","endLine":38,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Placeholder ProfilePictureUpload Component\n * TODO: Implement full profile picture upload functionality\n */\n\ninterface UserProfileResponse {\n  id: string;\n  name: string | null;\n  email?: string | null;\n  image?: string | null;\n  profile_picture?: string | null;\n}\n\ninterface ProfilePictureUploadProps {\n  currentUser: UserProfileResponse;\n  onUploadSuccess: () => void;\n  size: string;\n  currentImage?: string;\n  onImageChange?: (imageUrl: string) => void;\n}\n\nexport function ProfilePictureUpload({\n  currentUser: _currentUser,\n  onUploadSuccess: _onUploadSuccess,\n  size: _size,\n  currentImage,\n  onImageChange: _onImageChange,\n}: ProfilePictureUploadProps): JSX.Element {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"w-20 h-20 rounded-full bg-muted flex items-center justify-center\">\n          {currentImage ? (\n            <img\n              src={currentImage}\n              alt=\"Profile\"\n              className=\"w-full h-full rounded-full object-cover\"\n            />\n          ) : (\n            <span className=\"text-2xl text-muted-foreground\">👤</span>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-medium\">Profile Picture</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Profile picture upload is coming soon.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/search/advanced-search-form-optimized.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/search/advanced-search-form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/search/filter-configs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/search/global-search-shortcut.tsx","messages":[{"ruleId":"@typescript-eslint/non-nullable-type-assertion-style","severity":2,"message":"Use a ! assertion to more succinctly remove null and undefined from the type.","line":53,"column":23,"nodeType":"TSAsExpression","messageId":"preferNonNullAssertion","endLine":55,"endColumn":30,"fix":{"range":[1436,1522],"text":"document.querySelector(\n          \"[data-search-input]\",\n        )!"}},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":172,"column":13,"nodeType":"MemberExpression","endLine":172,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"/**\n * Global Search Shortcut Component\n * Phase 3C: Keyboard shortcut (Cmd/Ctrl+K) for global search\n */\n\n\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"~/components/ui/dialog\";\nimport { UniversalSearch } from \"./universal-search\";\nimport { type SearchResult } from \"~/lib/services/search-service\";\n\ninterface GlobalSearchShortcutProps {\n  children?: React.ReactNode;\n}\n\nexport function GlobalSearchShortcut({ children }: GlobalSearchShortcutProps): JSX.Element {\n  const router = useRouter();\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Handle keyboard shortcut\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent): void => {\n      // Cmd+K or Ctrl+K to open search\n      if ((event.metaKey || event.ctrlKey) && event.key === \"k\") {\n        event.preventDefault();\n        setIsOpen(true);\n      }\n\n      // Escape to close\n      if (event.key === \"Escape\" && isOpen) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return (): void => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [isOpen]);\n\n  // Focus input when dialog opens\n  useEffect(() => {\n    if (isOpen) {\n      // Small delay to ensure dialog is fully rendered\n      const timer = setTimeout((): void => {\n        const input = document.querySelector(\n          \"[data-search-input]\",\n        ) as HTMLInputElement;\n        input.focus();\n      }, 100);\n\n      return (): void => {\n        clearTimeout(timer);\n      };\n    }\n\n    return undefined;\n  }, [isOpen]);\n\n  const handleResultSelect = (result: SearchResult): void => {\n    setIsOpen(false);\n    router.push(result.url);\n  };\n\n  const handleOpenChange = (open: boolean): void => {\n    setIsOpen(open);\n  };\n\n  return (\n    <>\n      {/* Trigger element (optional) */}\n      {children && (\n        <div\n          onClick={() => {\n            setIsOpen(true);\n          }}\n          className=\"cursor-pointer\"\n        >\n          {children}\n        </div>\n      )}\n\n      {/* Search Dialog */}\n      <Dialog open={isOpen} onOpenChange={handleOpenChange}>\n        <DialogContent className=\"max-w-2xl p-0\">\n          <DialogHeader className=\"sr-only\">\n            <DialogTitle>Global Search</DialogTitle>\n          </DialogHeader>\n\n          <div className=\"p-4\">\n            <UniversalSearch\n              placeholder=\"Search issues, machines, users, locations...\"\n              showSuggestions={true}\n              showRecentSearches={true}\n              maxSuggestions={8}\n              autoFocus={true}\n              onResultSelect={handleResultSelect}\n              className=\"w-full\"\n            />\n\n            <div className=\"flex items-center justify-between text-xs text-muted-foreground mt-3 px-3\">\n              <div className=\"flex items-center gap-4\">\n                <span>🔍 Search across everything</span>\n                <span>↑↓ Navigate</span>\n                <span>↵ Select</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <kbd className=\"pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-100\">\n                  ESC\n                </kbd>\n                <span>to close</span>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\n/**\n * Search Button Trigger\n * Button that opens global search when clicked\n */\ninterface SearchButtonTriggerProps {\n  variant?: \"default\" | \"outline\" | \"ghost\";\n  size?: \"sm\" | \"default\" | \"lg\";\n  showShortcut?: boolean;\n  className?: string;\n}\n\nexport function SearchButtonTrigger({\n  variant = \"outline\",\n  size = \"sm\",\n  showShortcut = true,\n  className = \"\",\n}: SearchButtonTriggerProps): JSX.Element {\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // Get the appropriate shortcut key based on platform\n  const shortcutKey = mounted\n    ? navigator.userAgent.includes(\"Mac\")\n      ? \"⌘\"\n      : \"Ctrl\"\n    : \"Ctrl\";\n\n  // Variant styles matching shadcn/ui button patterns\n  const variantStyles = {\n    default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n    outline:\n      \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n    ghost: \"hover:bg-accent hover:text-accent-foreground\",\n  };\n\n  return (\n    <GlobalSearchShortcut>\n      <button\n        className={`\n          inline-flex items-center justify-start gap-2 px-3 py-2 text-sm font-medium rounded-md\n          focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\n          ${variantStyles[variant]}\n          ${size === \"sm\" ? \"h-8 text-xs\" : size === \"lg\" ? \"h-12 text-base\" : \"h-10 text-sm\"}\n          ${className}\n        `}\n        type=\"button\"\n      >\n        <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n          <svg\n            className=\"h-4 w-4 text-muted-foreground\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n            strokeWidth={2}\n          >\n            <circle cx=\"11\" cy=\"11\" r=\"8\" />\n            <path d=\"M21 21l-4.35-4.35\" />\n          </svg>\n          <span className=\"text-muted-foreground truncate\">\n            Search anything...\n          </span>\n        </div>\n\n        {showShortcut && (\n          <kbd className=\"pointer-events-none hidden h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-100 sm:flex\">\n            {shortcutKey}K\n          </kbd>\n        )}\n      </button>\n    </GlobalSearchShortcut>\n  );\n}\n\n/**\n * Hook for global search shortcut functionality\n * Can be used in other components to implement search shortcuts\n */\nexport function useGlobalSearchShortcut(): {\n  isSearchOpen: boolean;\n  openSearch: () => void;\n  closeSearch: () => void;\n} {\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent): void => {\n      if ((event.metaKey || event.ctrlKey) && event.key === \"k\") {\n        event.preventDefault();\n        setIsSearchOpen(true);\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return (): void => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, []);\n\n  return {\n    isSearchOpen,\n    openSearch: (): void => {\n      setIsSearchOpen(true);\n    },\n    closeSearch: (): void => {\n      setIsSearchOpen(false);\n    },\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/search/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/search/universal-search-results.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/search/universal-search.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":90,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":90,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":125,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":125,"endColumn":72}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Universal Search Component\n * Enhanced search for navigation bar with cross-entity results, suggestions, and recent searches\n *\n * Features:\n * - Cross-entity search with suggestions\n * - Recent searches stored in localStorage\n * - Entity categorization with icons and colors\n * - Keyboard navigation support\n * - Loading states and transitions\n */\n\n\"use client\";\n\nimport { useState, useEffect, useRef, useTransition } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { Input } from \"~/components/ui/input\";\nimport { Button } from \"~/components/ui/button\";\nimport { Card, CardContent } from \"~/components/ui/card\";\nimport { Badge } from \"~/components/ui/badge\";\nimport {\n  SearchIcon,\n  XIcon,\n  Loader2,\n  ClockIcon,\n  ArrowRightIcon,\n} from \"lucide-react\";\nimport { useDebounce } from \"~/lib/hooks/use-debounce\";\nimport { type SearchResult } from \"~/lib/services/search-service\";\nimport {\n  ENTITY_ICONS,\n  ENTITY_COLORS,\n  type EntityType,\n} from \"~/lib/constants/entity-ui\";\n\ninterface UniversalSearchProps {\n  placeholder?: string;\n  showSuggestions?: boolean;\n  showRecentSearches?: boolean;\n  maxSuggestions?: number;\n  className?: string;\n  autoFocus?: boolean;\n  onResultSelect?: (result: SearchResult) => void;\n}\n\ninterface SearchSuggestionsResponse {\n  suggestions: SearchResult[];\n  query: string;\n  timestamp: string;\n}\n\nexport function UniversalSearch({\n  placeholder = \"Search issues, machines, users...\",\n  showSuggestions = true,\n  showRecentSearches = true,\n  maxSuggestions = 5,\n  className = \"\",\n  autoFocus = false,\n  onResultSelect,\n}: UniversalSearchProps): JSX.Element {\n  const router = useRouter();\n  const [isPending, startTransition] = useTransition();\n\n  // Search state\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [suggestions, setSuggestions] = useState<SearchResult[]>([]);\n  const [recentSearches, setRecentSearches] = useState<string[]>([]);\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [isLoadingSuggestions, setIsLoadingSuggestions] = useState(false);\n  const [mounted, setMounted] = useState(false);\n\n  // Refs\n  const inputRef = useRef<HTMLInputElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  // Debounce search input for API calls\n  const debouncedSearchValue = useDebounce(searchValue, 300);\n\n  // Set mounted state to prevent hydration mismatches\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // Load recent searches from localStorage on mount\n  useEffect(() => {\n    if (mounted && showRecentSearches) {\n      const saved = localStorage.getItem(\"pinpoint-recent-searches\");\n      if (saved) {\n        try {\n          const parsed = JSON.parse(saved);\n          if (\n            Array.isArray(parsed) &&\n            parsed.every((item) => typeof item === \"string\")\n          ) {\n            setRecentSearches(parsed);\n          }\n        } catch (error) {\n          console.error(\"Failed to parse recent searches:\", error);\n        }\n      }\n    }\n  }, [mounted, showRecentSearches]);\n\n  // Fetch search suggestions when debounced value changes\n  useEffect(() => {\n    if (\n      !showSuggestions ||\n      !debouncedSearchValue ||\n      debouncedSearchValue.length < 2\n    ) {\n      setSuggestions([]);\n      return undefined;\n    }\n\n    const fetchSuggestions = async (): Promise<void> => {\n      setIsLoadingSuggestions(true);\n      try {\n        const params = new URLSearchParams({\n          q: debouncedSearchValue,\n          limit: maxSuggestions.toString(),\n        });\n\n        const response = await fetch(`/api/search/suggestions?${params}`);\n        if (response.ok) {\n          const data: SearchSuggestionsResponse = await response.json();\n          setSuggestions(data.suggestions);\n        } else {\n          console.error(\"Failed to fetch suggestions:\", response.statusText);\n          setSuggestions([]);\n        }\n      } catch (error) {\n        console.error(\"Error fetching suggestions:\", error);\n        setSuggestions([]);\n      } finally {\n        setIsLoadingSuggestions(false);\n      }\n    };\n\n    void fetchSuggestions();\n  }, [debouncedSearchValue, showSuggestions, maxSuggestions]);\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    if (!mounted) return undefined;\n\n    const handleClickOutside = (event: MouseEvent): void => {\n      if (\n        dropdownRef.current &&\n        !dropdownRef.current.contains(event.target as Node) &&\n        inputRef.current &&\n        !inputRef.current.contains(event.target as Node)\n      ) {\n        setShowDropdown(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return (): void => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [mounted]);\n\n  // Handle keyboard navigation\n  useEffect(() => {\n    if (!mounted) return undefined;\n\n    const handleKeyDown = (event: KeyboardEvent): void => {\n      if (event.key === \"Escape\") {\n        setShowDropdown(false);\n        inputRef.current?.blur();\n      }\n    };\n\n    if (showDropdown) {\n      document.addEventListener(\"keydown\", handleKeyDown);\n      return (): void => {\n        document.removeEventListener(\"keydown\", handleKeyDown);\n      };\n    }\n    \n    // Explicit return for consistency when showDropdown is false\n    return undefined;\n  }, [mounted, showDropdown]);\n\n  const saveRecentSearch = (query: string): void => {\n    if (!mounted || !showRecentSearches || !query.trim()) return;\n\n    const newRecentSearches = [\n      query.trim(),\n      ...recentSearches.filter((s) => s !== query.trim()).slice(0, 4),\n    ];\n\n    setRecentSearches(newRecentSearches);\n    localStorage.setItem(\n      \"pinpoint-recent-searches\",\n      JSON.stringify(newRecentSearches),\n    );\n  };\n\n  const handleSubmit = (e: React.FormEvent): void => {\n    e.preventDefault();\n\n    if (searchValue.trim()) {\n      saveRecentSearch(searchValue);\n      startTransition(() => {\n        router.push(`/search?q=${encodeURIComponent(searchValue.trim())}`);\n      });\n      setShowDropdown(false);\n    }\n  };\n\n  const handleInputFocus = (): void => {\n    setShowDropdown(true);\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const value = e.target.value;\n    setSearchValue(value);\n\n    if (value.length >= 2) {\n      setShowDropdown(true);\n    }\n  };\n\n  const clearSearch = (): void => {\n    setSearchValue(\"\");\n    setSuggestions([]);\n    setShowDropdown(false);\n    inputRef.current?.focus();\n  };\n\n  const selectSuggestion = (result: SearchResult): void => {\n    if (onResultSelect) {\n      onResultSelect(result);\n    } else {\n      saveRecentSearch(result.title);\n      startTransition(() => {\n        router.push(result.url);\n      });\n    }\n    setShowDropdown(false);\n  };\n\n  const selectRecentSearch = (recentSearch: string): void => {\n    setSearchValue(recentSearch);\n    startTransition(() => {\n      router.push(`/search?q=${encodeURIComponent(recentSearch)}`);\n    });\n    setShowDropdown(false);\n  };\n\n  const shouldShowDropdown =\n    showDropdown &&\n    (suggestions.length > 0 ||\n      (recentSearches.length > 0 && searchValue.length === 0) ||\n      isLoadingSuggestions);\n\n  return (\n    <div className={`relative ${className}`}>\n      <form onSubmit={handleSubmit}>\n        <div className=\"relative\">\n          <SearchIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            ref={inputRef}\n            type=\"search\"\n            placeholder={placeholder}\n            value={searchValue}\n            onChange={handleInputChange}\n            onFocus={handleInputFocus}\n            className=\"pl-10 pr-10\"\n            autoFocus={autoFocus}\n            disabled={isPending}\n          />\n\n          {/* Loading indicator */}\n          {(isPending || isLoadingSuggestions) && (\n            <div className=\"absolute right-8 top-1/2 transform -translate-y-1/2\">\n              <Loader2 className=\"h-4 w-4 animate-spin text-muted-foreground\" />\n            </div>\n          )}\n\n          {/* Clear search button */}\n          {searchValue && (\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={clearSearch}\n              className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n              disabled={isPending}\n            >\n              <XIcon className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n      </form>\n\n      {/* Search suggestions dropdown */}\n      {shouldShowDropdown && (\n        <Card\n          ref={dropdownRef}\n          className=\"absolute top-full left-0 right-0 mt-1 z-50 max-h-96 overflow-y-auto shadow-lg\"\n        >\n          <CardContent className=\"p-2\">\n            {/* Recent searches */}\n            {recentSearches.length > 0 && searchValue.length === 0 && (\n              <div className=\"mb-4\">\n                <div className=\"flex items-center gap-2 px-3 py-2 text-xs font-medium text-muted-foreground\">\n                  <ClockIcon className=\"h-3 w-3\" />\n                  Recent searches\n                </div>\n                {recentSearches.map((recentSearch, index) => (\n                  <button\n                    key={index}\n                    onClick={(): void => {\n                      selectRecentSearch(recentSearch);\n                    }}\n                    className=\"w-full text-left px-3 py-2 hover:bg-muted rounded-md flex items-center gap-2 transition-colors\"\n                  >\n                    <SearchIcon className=\"h-3 w-3 text-muted-foreground\" />\n                    <span className=\"text-sm\">{recentSearch}</span>\n                  </button>\n                ))}\n              </div>\n            )}\n\n            {/* Loading state */}\n            {isLoadingSuggestions && (\n              <div className=\"flex items-center justify-center py-4\">\n                <Loader2 className=\"h-4 w-4 animate-spin text-muted-foreground\" />\n                <span className=\"ml-2 text-sm text-muted-foreground\">\n                  Searching...\n                </span>\n              </div>\n            )}\n\n            {/* Search suggestions */}\n            {suggestions.length > 0 && (\n              <div>\n                {searchValue.length >= 2 && (\n                  <div className=\"flex items-center gap-2 px-3 py-2 text-xs font-medium text-muted-foreground\">\n                    <SearchIcon className=\"h-3 w-3\" />\n                    Results for \"{searchValue}\"\n                  </div>\n                )}\n                {suggestions.map((suggestion) => {\n                  const IconComponent =\n                    ENTITY_ICONS[suggestion.entity as EntityType];\n                  const colorClass =\n                    ENTITY_COLORS[suggestion.entity as EntityType];\n\n                  return (\n                    <button\n                      key={`${suggestion.entity}-${suggestion.id}`}\n                      onClick={(): void => {\n                        selectSuggestion(suggestion);\n                      }}\n                      className=\"w-full text-left px-3 py-3 hover:bg-muted rounded-md transition-colors\"\n                    >\n                      <div className=\"flex items-start justify-between gap-3\">\n                        <div className=\"flex items-start gap-3 min-w-0 flex-1\">\n                          <IconComponent className=\"h-4 w-4 text-muted-foreground mt-0.5 shrink-0\" />\n                          <div className=\"min-w-0 flex-1\">\n                            <div className=\"font-medium text-sm truncate\">\n                              {suggestion.title}\n                            </div>\n                            {suggestion.subtitle && (\n                              <div className=\"text-xs text-muted-foreground truncate\">\n                                {suggestion.subtitle}\n                              </div>\n                            )}\n                            {suggestion.description && (\n                              <div className=\"text-xs text-muted-foreground line-clamp-2 mt-1\">\n                                {suggestion.description}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-1 shrink-0\">\n                          <Badge\n                            variant=\"secondary\"\n                            className={`text-xs ${colorClass}`}\n                          >\n                            {suggestion.entity}\n                          </Badge>\n                          <ArrowRightIcon className=\"h-3 w-3 text-muted-foreground\" />\n                        </div>\n                      </div>\n                    </button>\n                  );\n                })}\n              </div>\n            )}\n\n            {/* Show all results option */}\n            {searchValue.length >= 2 && !isLoadingSuggestions && (\n              <div className=\"border-t mt-2 pt-2\">\n                <button\n                  onClick={handleSubmit}\n                  className=\"w-full text-left px-3 py-2 hover:bg-muted rounded-md flex items-center gap-2 transition-colors text-sm font-medium\"\n                >\n                  <SearchIcon className=\"h-4 w-4\" />\n                  <span>See all results for \"{searchValue}\"</span>\n                  <ArrowRightIcon className=\"h-4 w-4 ml-auto\" />\n                </button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/site-header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/UserAvatar.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":44,"column":11,"nodeType":"MemberExpression","endLine":44,"endColumn":29},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":80,"column":9,"nodeType":"MemberExpression","endLine":80,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"~/components/ui/avatar\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"~/components/ui/tooltip\";\nimport { useState } from \"react\";\nimport { cn } from \"~/lib/utils\";\n\ninterface UserAvatarProps {\n  user?: {\n    id: string;\n    name?: string | null;\n    profilePicture?: string | null;\n  } | null;\n  size?: \"small\" | \"medium\" | \"large\";\n  clickable?: boolean;\n  showTooltip?: boolean;\n  onClick?: () => void;\n}\n\nconst SIZE_CLASSES = {\n  small: \"h-8 w-8 text-sm\",\n  medium: \"h-10 w-10 text-sm\",\n  large: \"h-16 w-16 text-lg\",\n} as const;\n\nexport function UserAvatar({\n  user,\n  size = \"medium\",\n  clickable = false,\n  showTooltip = true,\n  onClick,\n}: UserAvatarProps): React.JSX.Element {\n  const [imageError, setImageError] = useState(false);\n\n  if (!user) {\n    const avatarElement = (\n      <Avatar\n        className={cn(\n          SIZE_CLASSES[size],\n          clickable && \"cursor-pointer hover:opacity-80\",\n        )}\n        onClick={onClick}\n      >\n        <AvatarFallback>?</AvatarFallback>\n      </Avatar>\n    );\n\n    return showTooltip ? (\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>{avatarElement}</TooltipTrigger>\n          <TooltipContent>\n            <p>Unknown User</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    ) : (\n      avatarElement\n    );\n  }\n\n  const displayName = user.name ?? \"Unknown User\";\n  const initials = displayName\n    .split(\" \")\n    .map((word) => word.charAt(0).toUpperCase())\n    .slice(0, 2)\n    .join(\"\");\n\n  const avatarSrc =\n    !imageError && user.profilePicture ? user.profilePicture : undefined;\n\n  const avatarElement = (\n    <Avatar\n      className={cn(\n        SIZE_CLASSES[size],\n        clickable && \"cursor-pointer hover:opacity-80\",\n      )}\n      onClick={onClick}\n    >\n      {avatarSrc && (\n        <AvatarImage\n          src={avatarSrc}\n          alt={`${displayName}'s profile picture`}\n          onError={() => {\n            setImageError(true);\n          }}\n        />\n      )}\n      <AvatarFallback>{initials}</AvatarFallback>\n    </Avatar>\n  );\n\n  if (showTooltip && displayName) {\n    return (\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>{avatarElement}</TooltipTrigger>\n          <TooltipContent>\n            <p>{displayName}</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    );\n  }\n\n  return avatarElement;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/error-boundary-card.tsx","messages":[],"suppressedMessages":[{"ruleId":"no-restricted-properties","severity":2,"message":"'process.env' is restricted from being used. Use the 'env' object from '~/env.js' instead of 'process.env'. It is validated and type-safe. See src/env.js for available variables and T3 Env documentation: https://env.t3.gg/docs/introduction","line":58,"column":24,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":58,"endColumn":35,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/filtered-search.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/filters-server.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":100,"column":32,"nodeType":"MemberExpression","endLine":100,"endColumn":57},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":271,"column":9,"nodeType":"MemberExpression","endLine":271,"endColumn":20},{"ruleId":"@typescript-eslint/no-base-to-string","severity":2,"message":"'value' may use Object's default stringification format ('[object Object]') when stringified.","line":271,"column":23,"nodeType":"Identifier","messageId":"baseToString","endLine":271,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Server-First Filter Form Components\n * Phase 3B: Progressive enhancement filter forms\n *\n * Provides server-rendered filter forms that work without JavaScript\n * Enhanced with client-side progressive enhancement for better UX\n */\n\nimport { redirect } from \"next/navigation\";\nimport { Button } from \"~/components/ui/button\";\nimport { Input } from \"~/components/ui/input\";\nimport { Label } from \"~/components/ui/label\";\nimport { Badge } from \"~/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"~/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"~/components/ui/select\";\nimport { X, Filter, Search } from \"lucide-react\";\n\ninterface FilterOption {\n  value: string;\n  label: string;\n  count?: number;\n}\n\ninterface ActiveFilter {\n  key: string;\n  label: string;\n  value: string;\n  removeUrl: string;\n}\n\ninterface FiltersServerProps {\n  currentFilters: Record<string, unknown>;\n  searchPlaceholder?: string;\n  filterOptions: Record<string, FilterOption[]>;\n  activeFilters: ActiveFilter[];\n  actionUrl: string;\n  clearAllUrl: string;\n  children?: React.ReactNode;\n}\n\n/**\n * Server-first filter form with progressive enhancement\n * Works without JavaScript, enhanced with client-side interactivity\n */\nexport function FiltersServer({\n  currentFilters,\n  searchPlaceholder = \"Search...\",\n  filterOptions,\n  activeFilters,\n  actionUrl,\n  clearAllUrl,\n  children,\n}: FiltersServerProps): JSX.Element {\n  return (\n    <Card>\n      <CardHeader className=\"pb-4\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <Filter className=\"h-4 w-4\" />\n          Filters\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Server Action Form - Works without JavaScript */}\n        <form action={actionUrl} method=\"GET\" className=\"space-y-4\">\n          {/* Search Input */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"search\" className=\"text-sm font-medium\">\n              Search\n            </Label>\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                id=\"search\"\n                name=\"search\"\n                placeholder={searchPlaceholder}\n                defaultValue={(currentFilters[\"search\"] as string) || \"\"}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n\n          {/* Dynamic Filter Controls */}\n          {Object.entries(filterOptions).map(([filterKey, options]) => (\n            <div key={filterKey} className=\"space-y-2\">\n              <Label\n                htmlFor={filterKey}\n                className=\"text-sm font-medium capitalize\"\n              >\n                {filterKey.replace(/_/g, \" \")}\n              </Label>\n              <Select\n                name={filterKey}\n                defaultValue={(currentFilters[filterKey] as string) || \"all\"}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">\n                    All {filterKey.replace(/_/g, \" \")}\n                  </SelectItem>\n                  {options.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                      {option.count !== undefined && (\n                        <span className=\"ml-1 text-muted-foreground\">\n                          ({option.count})\n                        </span>\n                      )}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          ))}\n\n          {/* Custom filter children */}\n          {children}\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-2 pt-2\">\n            <Button type=\"submit\" className=\"flex-1\">\n              Apply Filters\n            </Button>\n            <Button type=\"button\" variant=\"outline\" asChild>\n              <a href={clearAllUrl}>Clear All</a>\n            </Button>\n          </div>\n        </form>\n\n        {/* Active Filters Display */}\n        {activeFilters.length > 0 && (\n          <div className=\"space-y-2 pt-4 border-t\">\n            <Label className=\"text-sm font-medium\">Active Filters</Label>\n            <div className=\"flex flex-wrap gap-2\">\n              {activeFilters.map((filter) => (\n                <ActiveFilterBadge\n                  key={`${filter.key}-${filter.value}`}\n                  filter={filter}\n                />\n              ))}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n/**\n * Active filter badge with remove functionality\n */\nfunction ActiveFilterBadge({ filter }: { filter: ActiveFilter }): JSX.Element {\n  return (\n    <Badge variant=\"secondary\" className=\"flex items-center gap-1 pr-1\">\n      <span className=\"text-xs\">\n        {filter.label}: {filter.value}\n      </span>\n      <Button asChild variant=\"ghost\" size=\"sm\" className=\"h-4 w-4 p-0\">\n        <a href={filter.removeUrl} className=\"hover:text-error\">\n          <X className=\"h-3 w-3\" />\n        </a>\n      </Button>\n    </Badge>\n  );\n}\n\n/**\n * Compact filter bar for inline filtering\n */\ninterface FilterBarServerProps {\n  currentFilters: Record<string, unknown>;\n  quickFilters: {\n    key: string;\n    label: string;\n    options: FilterOption[];\n  }[];\n  searchUrl: string;\n  clearUrl: string;\n}\n\nexport function FilterBarServer({\n  currentFilters,\n  quickFilters,\n  searchUrl,\n  clearUrl,\n}: FilterBarServerProps): JSX.Element {\n  const hasActiveFilters = Object.values(currentFilters).some(\n    (value) =>\n      value !== undefined &&\n      value !== \"\" &&\n      (Array.isArray(value) ? value.length > 0 : true),\n  );\n\n  return (\n    <div className=\"flex items-center gap-2 p-2 bg-muted/50 rounded-lg\">\n      {/* Quick Search */}\n      <form action={searchUrl} method=\"GET\" className=\"flex-1\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            name=\"search\"\n            placeholder=\"Quick search...\"\n            defaultValue={(currentFilters[\"search\"] as string) || \"\"}\n            className=\"pl-10 bg-background\"\n          />\n        </div>\n      </form>\n\n      {/* Quick Filter Buttons */}\n      {quickFilters.map((filter) => (\n        <Select\n          key={filter.key}\n          name={filter.key}\n          defaultValue={(currentFilters[filter.key] as string) || \"all\"}\n        >\n          <SelectTrigger className=\"w-auto bg-background\">\n            <SelectValue>{filter.label}</SelectValue>\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All</SelectItem>\n            {filter.options.map((option) => (\n              <SelectItem key={option.value} value={option.value}>\n                {option.label}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      ))}\n\n      {/* Clear Filters */}\n      {hasActiveFilters && (\n        <Button asChild variant=\"ghost\" size=\"sm\">\n          <a href={clearUrl}>\n            <X className=\"h-4 w-4 mr-1\" />\n            Clear\n          </a>\n        </Button>\n      )}\n    </div>\n  );\n}\n\n/**\n * Server Action helper for handling form submissions\n * Creates a server action that redirects with new filter parameters\n */\nexport function createFilterAction(\n  basePath: string,\n  urlBuilder: (\n    basePath: string,\n    params: Record<string, unknown>,\n    currentParams?: Record<string, unknown>,\n  ) => string,\n): (formData: FormData) => void {\n  return function handleFilterSubmit(formData: FormData) {\n    \"use server\";\n\n    // Extract form data\n    const params: Record<string, unknown> = {};\n\n    for (const [key, value] of formData.entries()) {\n      if (value && value !== \"all\") {\n        params[key] = value.toString();\n      }\n    }\n\n    // Reset to first page when filters change\n    params[\"page\"] = 1;\n\n    // Build new URL with filters\n    const newUrl = urlBuilder(basePath, params);\n    redirect(newUrl);\n  };\n}\n\n/**\n * Multi-select checkbox group for array-based filters\n */\ninterface CheckboxFilterProps {\n  name: string;\n  label: string;\n  options: FilterOption[];\n  selectedValues: string[];\n}\n\nexport function CheckboxFilter({\n  name,\n  label,\n  options,\n  selectedValues,\n}: CheckboxFilterProps): JSX.Element {\n  return (\n    <div className=\"space-y-2\">\n      <Label className=\"text-sm font-medium\">{label}</Label>\n      <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n        {options.map((option) => (\n          <label\n            key={option.value}\n            className=\"flex items-center space-x-2 text-sm\"\n          >\n            <input\n              type=\"checkbox\"\n              name={name}\n              value={option.value}\n              defaultChecked={selectedValues.includes(option.value)}\n              className=\"rounded border-outline\"\n            />\n            <span className=\"flex-1\">{option.label}</span>\n            {option.count !== undefined && (\n              <span className=\"text-muted-foreground\">({option.count})</span>\n            )}\n          </label>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/generic-search.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/pagination-server.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/sidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":93,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":93,"endColumn":74}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { PanelLeftIcon } from \"lucide-react\";\n\nimport { useIsMobile } from \"~/components/hooks/use-mobile\";\nimport { cn } from \"~/lib/utils\";\nimport { Button } from \"~/components/ui/button\";\nimport { Input } from \"~/components/ui/input\";\nimport { Separator } from \"~/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"~/components/ui/sheet\";\nimport { Skeleton } from \"~/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"~/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ninterface SidebarContextProps {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null);\n\nfunction useSidebar(): SidebarContextProps {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}): JSX.Element {\n  const isMobile = useIsMobile();\n  const [openMobile, setOpenMobile] = React.useState(false);\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen);\n  const open = openProp ?? _open;\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value;\n      if (setOpenProp) {\n        setOpenProp(openState);\n      } else {\n        _setOpen(openState);\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${String(openState)}; path=/; max-age=${String(SIDEBAR_COOKIE_MAX_AGE)}`;\n    },\n    [setOpenProp, open],\n  );\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);\n  }, [isMobile, setOpen, setOpenMobile]);\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent): void => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault();\n        toggleSidebar();\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return (): void => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [toggleSidebar]);\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\";\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],\n  );\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className,\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  );\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\";\n  variant?: \"sidebar\" | \"floating\" | \"inset\";\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n}): JSX.Element {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    );\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon)\",\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className,\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>): JSX.Element {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"size-7\", className)}\n      onClick={(event): void => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">): JSX.Element {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">): JSX.Element {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>): JSX.Element {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">): JSX.Element {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">): JSX.Element {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>): JSX.Element {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">): JSX.Element {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">): JSX.Element {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }): JSX.Element {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }): JSX.Element {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">): JSX.Element {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">): JSX.Element {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">): JSX.Element {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  );\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean;\n  isActive?: boolean;\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n} & VariantProps<typeof sidebarMenuButtonVariants>): JSX.Element {\n  const Comp = asChild ? Slot : \"button\";\n  const { isMobile, state } = useSidebar();\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  );\n\n  if (!tooltip) {\n    return button;\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    };\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  );\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean;\n  showOnHover?: boolean;\n}): JSX.Element {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">): JSX.Element {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean;\n}): JSX.Element {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${String(Math.floor(Math.random() * 40) + 50)}%`;\n  }, []);\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-(--skeleton-width) flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">): JSX.Element {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">): JSX.Element {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean;\n  size?: \"sm\" | \"md\";\n  isActive?: boolean;\n}): JSX.Element {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/components/utils/lazy-client-island.tsx","messages":[{"ruleId":"no-restricted-properties","severity":2,"message":"'process.env' is restricted from being used. Use the 'env' object from '~/env.js' instead of 'process.env'. It is validated and type-safe. See src/env.js for available variables and T3 Env documentation: https://env.t3.gg/docs/introduction","line":104,"column":11,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":104,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":150,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4344,4347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4344,4347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Lazy Client Island Wrapper\n * Phase 3D: Dynamic imports for non-critical client islands\n * Reduces initial bundle size and improves performance\n */\n\n\"use client\";\n\nimport { useState, useEffect, useRef, Suspense } from \"react\";\nimport { type ComponentType } from \"react\";\n\ninterface LazyClientIslandProps<T = Record<string, unknown>> {\n  /** Component to lazy load */\n  importComponent: () => Promise<{ default: ComponentType<T> }>;\n  /** Props to pass to the lazy component */\n  componentProps: T;\n  /** Fallback component while loading */\n  fallback?: React.ReactNode;\n  /** Whether to load immediately (default: false) */\n  loadImmediately?: boolean;\n  /** Intersection observer threshold (default: 0.1) */\n  threshold?: number;\n  /** Loading strategy: 'intersection' | 'idle' | 'immediate' */\n  strategy?: \"intersection\" | \"idle\" | \"immediate\";\n  /** Component name for debugging */\n  name?: string;\n}\n\n/**\n * Lazy loading wrapper for client islands\n * Uses Intersection Observer or requestIdleCallback for optimal loading\n */\nexport function LazyClientIsland<T = Record<string, unknown>>({\n  importComponent,\n  componentProps,\n  fallback = <div className=\"h-16 bg-muted animate-pulse rounded\" />,\n  loadImmediately = false,\n  threshold = 0.1,\n  strategy = \"intersection\",\n  name = \"LazyComponent\",\n}: LazyClientIslandProps<T>): JSX.Element | null {\n  const [Component, setComponent] = useState<ComponentType<T> | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // Load component immediately if requested\n  useEffect(() => {\n    if (loadImmediately || strategy === \"immediate\") {\n      void loadComponent();\n    }\n  }, [loadImmediately, strategy]);\n\n  // Intersection observer loading\n  useEffect(() => {\n    if (Component || isLoading || strategy !== \"intersection\") return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry?.isIntersecting) {\n          void loadComponent();\n          observer.disconnect();\n        }\n      },\n      { threshold },\n    );\n\n    if (containerRef.current) {\n      observer.observe(containerRef.current);\n    }\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [Component, isLoading, strategy, threshold]);\n\n  // Idle loading\n  useEffect(() => {\n    if (Component || isLoading || strategy !== \"idle\") return;\n\n    const loadOnIdle = (): void => {\n      if (\"requestIdleCallback\" in window) {\n        requestIdleCallback(() => void loadComponent(), { timeout: 2000 });\n      } else {\n        // Fallback for browsers without requestIdleCallback\n        setTimeout(() => void loadComponent(), 1000);\n      }\n    };\n\n    loadOnIdle();\n  }, [Component, isLoading, strategy]);\n\n  const loadComponent = async (): Promise<void> => {\n    if (Component || isLoading) return;\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const { default: ImportedComponent } = await importComponent();\n      setComponent(() => ImportedComponent);\n\n      // Performance monitoring\n      if (process.env.NODE_ENV === \"development\") {\n        console.log(`✅ Lazy loaded client island: ${name}`);\n      }\n    } catch (err) {\n      const error =\n        err instanceof Error ? err : new Error(\"Failed to load component\");\n      setError(error);\n      console.error(`❌ Failed to lazy load client island ${name}:`, error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Error state\n  if (error) {\n    return (\n      <div className=\"rounded-md border border-error bg-error-container p-4\">\n        <div className=\"text-sm text-on-error-container\">\n          <strong>Failed to load component:</strong> {error.message}\n        </div>\n        <button\n          onClick={() => {\n            setError(null);\n            void loadComponent();\n          }}\n          className=\"mt-2 text-xs text-error hover:text-error underline\"\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  // Loading state\n  if (isLoading || !Component) {\n    return (\n      <div ref={containerRef} data-lazy-loading={name}>\n        {fallback}\n      </div>\n    );\n  }\n\n  // Render loaded component\n  return (\n    <div ref={containerRef} data-lazy-loaded={name}>\n      <Suspense fallback={fallback}>\n        <Component {...(componentProps as any)} />\n      </Suspense>\n    </div>\n  );\n}\n\n/**\n * Hook for preloading components\n * Useful for critical components that should be preloaded on route change\n */\nexport function usePreloadComponent<T = Record<string, unknown>>(\n  importComponent: () => Promise<{ default: ComponentType<T> }>,\n): { preload: () => Promise<void>; isPreloaded: boolean } {\n  const [isPreloaded, setIsPreloaded] = useState(false);\n\n  const preload = async (): Promise<void> => {\n    if (isPreloaded) return;\n\n    try {\n      await importComponent();\n      setIsPreloaded(true);\n    } catch (error) {\n      console.error(\"Failed to preload component:\", error);\n    }\n  };\n\n  return { preload, isPreloaded };\n}\n\n/**\n * Higher-order component for creating lazy client islands\n */\nexport function createLazyClientIsland<T = Record<string, unknown>>(\n  importComponent: () => Promise<{ default: ComponentType<T> }>,\n  defaultProps?: Partial<LazyClientIslandProps<T>>,\n): (props: T & Partial<LazyClientIslandProps<T>>) => JSX.Element {\n  return function LazyWrapper(props: T & Partial<LazyClientIslandProps<T>>): JSX.Element {\n    const {\n      fallback,\n      loadImmediately,\n      threshold,\n      strategy,\n      name,\n      ...componentProps\n    } = props;\n\n    return (\n      <LazyClientIsland\n        importComponent={importComponent}\n        componentProps={componentProps as T}\n        fallback={fallback ?? defaultProps?.fallback}\n        loadImmediately={loadImmediately ?? defaultProps?.loadImmediately ?? false}\n        threshold={threshold ?? defaultProps?.threshold ?? 0.1}\n        strategy={strategy ?? defaultProps?.strategy ?? \"intersection\"}\n        name={name ?? defaultProps?.name ?? \"LazyComponent\"}\n      />\n    );\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/contexts/PermissionDepsContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/env.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/hooks/useClientMounted.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/hooks/usePermissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/actions/admin-actions.ts","messages":[{"ruleId":"@typescript-eslint/no-deprecated","severity":2,"message":"`email` is deprecated. Use `z.email()` instead.","line":39,"column":21,"nodeType":"Identifier","messageId":"deprecatedWithReason","endLine":39,"endColumn":26},{"ruleId":"@typescript-eslint/no-deprecated","severity":2,"message":"`email` is deprecated. Use `z.email()` instead.","line":61,"column":28,"nodeType":"Identifier","messageId":"deprecatedWithReason","endLine":61,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":436,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":436,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":437,"column":63,"nodeType":"Property","messageId":"anyAssignment","endLine":437,"endColumn":77},{"ruleId":"@typescript-eslint/no-unnecessary-type-conversion","severity":2,"message":"Passing a string to String() does not change the type or value of the string.","line":551,"column":57,"nodeType":"Identifier","messageId":"unnecessaryTypeConversion","endLine":551,"endColumn":63,"suggestions":[{"messageId":"suggestRemove","fix":{"range":[17086,17102],"text":"filename"},"desc":"Remove the type conversion."},{"messageId":"suggestSatisfies","data":{"type":"string"},"fix":{"range":[17086,17102],"text":"filename satisfies string"},"desc":"Instead, assert that the value satisfies the string type."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Administrative Server Actions (2025 Performance Patterns)\n * Form handling and mutations for admin operations with React 19 cache API\n */\n\n\"use server\";\n\nimport { revalidatePath, revalidateTag } from \"next/cache\";\nimport { z } from \"zod\";\nimport { uuidSchema } from \"~/lib/validation/schemas\";\nimport { eq, and } from \"drizzle-orm\";\nimport { users, memberships, roles } from \"~/server/db/schema\";\nimport { generatePrefixedId } from \"~/lib/utils/id-generation\";\nimport {\n  updateSystemSettings,\n  type SystemSettingsData,\n} from \"~/lib/dal/system-settings\";\nimport {\n  logActivity,\n  ACTIVITY_ACTIONS,\n  ACTIVITY_ENTITIES,\n  exportActivityLog,\n} from \"~/lib/dal/activity-log\";\nimport {\n  requireAuthContextWithRole,\n  validateFormData,\n  actionSuccess,\n  actionError,\n  runAfterResponse,\n  type ActionResult,\n} from \"./shared\";\nimport { db } from \"~/lib/dal/shared\";\nimport { requirePermission } from \"./shared\";\nimport { PERMISSIONS } from \"~/server/auth/permissions.constants\";\n// Removed unused getDB alias import\n\n// Enhanced validation schemas with better error messages\nconst inviteUserSchema = z.object({\n  email: z.string().email().transform((s: string) => s.trim().toLowerCase()),\n  name: z.string().max(100, \"Name must be less than 100 characters\").optional(),\n  roleId: uuidSchema.optional(),\n  message: z\n    .string()\n    .max(500, \"Message must be less than 500 characters\")\n    .optional(),\n});\n\n// Explicit type for better TypeScript inference\ntype InviteUserData = z.infer<typeof inviteUserSchema>;\n\nconst updateUserRoleSchema = z.object({\n  userId: uuidSchema,\n  roleId: uuidSchema,\n});\n\n// Explicit type for better TypeScript inference\ntype UpdateUserRoleData = z.infer<typeof updateUserRoleSchema>;\n\nconst removeUserSchema = z.object({\n  userId: uuidSchema,\n  confirmEmail: z.string().email().transform((s: string) => s.trim().toLowerCase()),\n});\n\n// Explicit type for better TypeScript inference\ntype RemoveUserData = z.infer<typeof removeUserSchema>;\n\nconst updateSystemSettingsSchema = z.object({\n  settings: z.object({\n    emailNotifications: z.boolean().optional(),\n    pushNotifications: z.boolean().optional(),\n    issueUpdates: z.boolean().optional(),\n    weeklyDigest: z.boolean().optional(),\n    maintenanceAlerts: z.boolean().optional(),\n    twoFactorRequired: z.boolean().optional(),\n    sessionTimeout: z.number().int().min(0).max(1440).optional(),\n    passwordMinLength: z.number().int().min(6).max(128).optional(),\n    loginAttempts: z.number().int().min(0).max(10).optional(),\n    timezone: z.string().optional(),\n    dateFormat: z.string().optional(),\n    theme: z.enum([\"light\", \"dark\", \"system\"]).optional(),\n    language: z.string().optional(),\n    itemsPerPage: z.number().int().min(10).max(100).optional(),\n  }),\n});\n\n/**\n * Invite user to organization via Server Action (React 19 useActionState compatible)\n * Enhanced with validation and background processing\n */\nexport async function inviteUserAction(\n  _prevState: ActionResult<{ success: boolean }> | null,\n  formData: FormData,\n): Promise<ActionResult<{ success: boolean }>> {\n  try {\n    const { user, organizationId, membership } =\n      await requireAuthContextWithRole();\n\n    // Enhanced validation with Zod\n    const validation: ActionResult<InviteUserData> = validateFormData(formData, inviteUserSchema);\n    if (!validation.success) {\n      return validation;\n    }\n\n    await requirePermission(membership, PERMISSIONS.USER_MANAGE, db);\n\n    // Check if user already exists in the system\n    const existingUser = await db.query.users.findFirst({\n      where: eq(users.email, validation.data.email),\n    });\n\n    if (existingUser) {\n      // Check if user is already a member of this organization\n      const existingMembership = await db.query.memberships.findFirst({\n        where: and(\n          eq(memberships.user_id, existingUser.id),\n          eq(memberships.organization_id, organizationId),\n        ),\n      });\n\n      if (existingMembership) {\n        return actionError(\"User is already a member of this organization\");\n      }\n    }\n\n    // Get default role if none specified\n    let roleId = validation.data.roleId;\n    if (!roleId) {\n      const defaultRole = await db.query.roles.findFirst({\n        where: and(\n          eq(roles.organization_id, organizationId),\n          eq(roles.is_default, true),\n        ),\n      });\n\n      if (!defaultRole) {\n        return actionError(\n          \"No default role configured. Please contact support.\",\n        );\n      }\n\n      roleId = defaultRole.id;\n    }\n\n    // Create user record if they don't exist\n    let userId = existingUser?.id;\n    if (!existingUser) {\n      // Create a new user record with unverified email\n      const newUser = await db\n        .insert(users)\n        .values({\n          id: generatePrefixedId(\"user\"),\n          email: validation.data.email,\n          name: validation.data.name ?? null,\n          email_verified: null, // Email not verified until they complete signup\n        })\n        .returning({ id: users.id });\n\n      userId = newUser[0]?.id;\n      if (!userId) {\n        return actionError(\"Failed to create user record\");\n      }\n    }\n\n    // Type guard to ensure userId is defined\n    if (!userId) {\n      return actionError(\"User ID not available\");\n    }\n\n    // Create membership for the user\n    const [newMembership] = await db\n      .insert(memberships)\n      .values({\n        id: generatePrefixedId(\"membership\"),\n        user_id: userId,\n        organization_id: organizationId,\n        role_id: roleId,\n      })\n      .returning({ id: memberships.id });\n\n    if (!newMembership) {\n      return actionError(\"Failed to create user membership\");\n    }\n\n    console.log(\"User invitation processed:\", {\n      email: validation.data.email,\n      userId,\n      organizationId,\n      roleId,\n      membershipId: newMembership.id,\n    });\n\n    // Cache invalidation\n    revalidatePath(\"/settings/users\");\n    revalidatePath(\"/settings\");\n    revalidateTag(\"admin\");\n    revalidateTag(\"users\");\n\n    // Background processing\n    runAfterResponse(async () => {\n      console.log(\n        `User invitation processed for ${validation.data.email} by ${user.email ?? \"unknown\"}`,\n        {\n          userId,\n          membershipId: newMembership.id,\n          organizationId,\n          roleId,\n        },\n      );\n\n      // Log the activity\n      await logActivity({\n        organizationId,\n        userId: user.id,\n        action: ACTIVITY_ACTIONS.INVITATION_SENT,\n        entity: ACTIVITY_ENTITIES.USER,\n        entityId: userId,\n        details: `Invited ${validation.data.email} to join the organization`,\n        severity: \"info\",\n      });\n\n      // TODO: Send actual invitation email with signup/login link\n      // The email should include:\n      // - Welcome message with personal note if provided\n      // - Link to complete account setup (for new users)\n      // - Link to login and accept invitation (for existing users)\n      // - Organization details and role information\n      //\n      // Example implementation:\n      // await sendInvitationEmail({\n      //   to: validation.data.email,\n      //   userExists: !!existingUser,\n      //   organizationName: organization.name,\n      //   organizationId,\n      //   inviterName: user.name || user.email,\n      //   roleName: role.name,\n      //   personalMessage: validation.data.message,\n      //   signupUrl: existingUser\n      //     ? `${baseUrl}/auth/sign-in?invitation=${invitationToken}`\n      //     : `${baseUrl}/auth/sign-up?invitation=${invitationToken}`,\n      // });\n    });\n\n    return actionSuccess(\n      { success: true },\n      \"User invitation sent successfully\",\n    );\n  } catch (error) {\n    console.error(\"Invite user error:\", error);\n    return actionError(\n      error instanceof Error\n        ? error.message\n        : \"Failed to send invitation. Please try again.\",\n    );\n  }\n}\n\n/**\n * Update user role via Server Action (React 19 useActionState compatible)\n */\nexport async function updateUserRoleAction(\n  _prevState: ActionResult<{ success: boolean }> | null,\n  formData: FormData,\n): Promise<ActionResult<{ success: boolean }>> {\n  try {\n    const { user, organizationId, membership } =\n      await requireAuthContextWithRole();\n\n    // Enhanced validation\n    const validation: ActionResult<UpdateUserRoleData> = validateFormData(formData, updateUserRoleSchema);\n    if (!validation.success) {\n      return validation;\n    }\n\n    await requirePermission(membership, PERMISSIONS.USER_MANAGE, db);\n\n    // Verify role exists in this organization\n    const role = await db.query.roles.findFirst({\n      where: and(\n        eq(roles.id, validation.data.roleId),\n        eq(roles.organization_id, organizationId),\n      ),\n    });\n\n    if (!role) {\n      return actionError(\"Role not found or access denied\");\n    }\n\n    // Update user role (membership)\n    const [updatedMembership] = await db\n      .update(memberships)\n      .set({ role_id: validation.data.roleId })\n      .where(\n        and(\n          eq(memberships.user_id, validation.data.userId),\n          eq(memberships.organization_id, organizationId),\n        ),\n      )\n      .returning({ user_id: memberships.user_id });\n\n    if (!updatedMembership) {\n      return actionError(\"User not found or access denied\");\n    }\n\n    // Cache invalidation\n    revalidatePath(\"/settings/users\");\n    revalidatePath(\"/settings/roles\");\n    revalidateTag(\"admin\");\n    revalidateTag(\"users\");\n\n    // Background processing\n    runAfterResponse(async () => {\n      console.log(\n        `User role updated by ${user.email ?? \"unknown\"}: ${validation.data.userId} -> ${role.name}`,\n      );\n\n      // Log the activity\n      await logActivity({\n        organizationId,\n        userId: user.id,\n        action: ACTIVITY_ACTIONS.ROLE_CHANGED,\n        entity: ACTIVITY_ENTITIES.USER,\n        entityId: validation.data.userId,\n        details: `Changed user role to ${role.name}`,\n        severity: \"warning\",\n      });\n    });\n\n    return actionSuccess(\n      { success: true },\n      `User role updated to ${role.name}`,\n    );\n  } catch (error) {\n    console.error(\"Update user role error:\", error);\n    return actionError(\n      error instanceof Error ? error.message : \"Failed to update user role\",\n    );\n  }\n}\n\n/**\n * Remove user from organization via Server Action (React 19 useActionState compatible)\n */\nexport async function removeUserAction(\n  _prevState: ActionResult<{ success: boolean }> | null,\n  formData: FormData,\n): Promise<ActionResult<{ success: boolean }>> {\n  try {\n    const { user, organizationId, membership } =\n      await requireAuthContextWithRole();\n\n    // Enhanced validation\n    const validation: ActionResult<RemoveUserData> = validateFormData(formData, removeUserSchema);\n    if (!validation.success) {\n      return validation;\n    }\n\n    await requirePermission(membership, PERMISSIONS.USER_MANAGE, db);\n\n    // Verify user exists and email matches (safety check)\n    const targetUser = await db.query.users.findFirst({\n      where: eq(users.id, validation.data.userId),\n      columns: { id: true, email: true },\n    });\n\n    if (!targetUser || targetUser.email !== validation.data.confirmEmail) {\n      return actionError(\"User not found or email confirmation doesn't match\");\n    }\n\n    // Remove membership (soft delete would be better for audit trail)\n    const [removedMembership] = await db\n      .delete(memberships)\n      .where(\n        and(\n          eq(memberships.user_id, validation.data.userId),\n          eq(memberships.organization_id, organizationId),\n        ),\n      )\n      .returning({ user_id: memberships.user_id });\n\n    if (!removedMembership) {\n      return actionError(\"User not found in this organization\");\n    }\n\n    // Cache invalidation\n    revalidatePath(\"/settings/users\");\n    revalidateTag(\"admin\");\n    revalidateTag(\"users\");\n\n    // Background processing\n    runAfterResponse(async () => {\n      console.log(\n        `User removed from organization by ${user.email ?? \"unknown\"}: ${validation.data.confirmEmail}`,\n      );\n\n      // Log the activity\n      await logActivity({\n        organizationId,\n        userId: user.id,\n        action: ACTIVITY_ACTIONS.USER_DELETED,\n        entity: ACTIVITY_ENTITIES.USER,\n        entityId: validation.data.userId,\n        details: `Removed user ${validation.data.confirmEmail} from organization`,\n        severity: \"warning\",\n      });\n    });\n\n    return actionSuccess(\n      { success: true },\n      \"User removed from organization successfully\",\n    );\n  } catch (error) {\n    console.error(\"Remove user error:\", error);\n    return actionError(\n      error instanceof Error ? error.message : \"Failed to remove user\",\n    );\n  }\n}\n\n/**\n * Update system settings via Server Action (React 19 useActionState compatible)\n */\nexport async function updateSystemSettingsAction(\n  _prevState: ActionResult<{ success: boolean }> | null,\n  formData: FormData,\n): Promise<ActionResult<{ success: boolean }>> {\n  try {\n    const { user, organizationId, membership } =\n      await requireAuthContextWithRole();\n\n    // Parse JSON data from form\n    const settingsData = formData.get(\"settings\") as string;\n    if (!settingsData) {\n      return actionError(\"No settings data provided\");\n    }\n\n    const data = JSON.parse(settingsData);\n    const validation = updateSystemSettingsSchema.safeParse({ settings: data });\n\n    if (!validation.success) {\n      return actionError(\"Invalid settings data\");\n    }\n\n    // Permission check for settings update\n    await requirePermission(membership, PERMISSIONS.ORGANIZATION_MANAGE, db);\n\n    // Convert flat form data to nested SystemSettingsData structure\n    const flatSettings = validation.data.settings;\n    const systemSettingsData: SystemSettingsData = {\n      notifications: {\n        emailNotifications: flatSettings.emailNotifications ?? true,\n        pushNotifications: flatSettings.pushNotifications ?? false,\n        issueUpdates: flatSettings.issueUpdates ?? true,\n        weeklyDigest: flatSettings.weeklyDigest ?? true,\n        maintenanceAlerts: flatSettings.maintenanceAlerts ?? true,\n      },\n      security: {\n        twoFactorRequired: flatSettings.twoFactorRequired ?? false,\n        sessionTimeout: flatSettings.sessionTimeout ?? 30,\n        passwordMinLength: flatSettings.passwordMinLength ?? 8,\n        loginAttempts: flatSettings.loginAttempts ?? 5,\n      },\n      preferences: {\n        timezone: flatSettings.timezone ?? \"UTC\",\n        dateFormat: flatSettings.dateFormat ?? \"YYYY-MM-DD\",\n        theme: flatSettings.theme ?? \"system\",\n        language: flatSettings.language ?? \"en\",\n        itemsPerPage: flatSettings.itemsPerPage ?? 25,\n      },\n      features: {\n        realTimeUpdates: true, // Default values for features not in form\n        analyticsTracking: true,\n        betaFeatures: false,\n        maintenanceMode: false,\n      },\n    };\n\n    await updateSystemSettings(organizationId, systemSettingsData);\n\n    // Cache invalidation\n    revalidatePath(\"/settings/system\");\n    revalidatePath(\"/settings\");\n    revalidateTag(\"admin\");\n    revalidateTag(\"settings\");\n\n    // Background processing\n    runAfterResponse(async () => {\n      console.log(`System settings updated by ${user.email ?? \"unknown\"}`);\n\n      // Log the activity\n      await logActivity({\n        organizationId,\n        userId: user.id,\n        action: ACTIVITY_ACTIONS.SETTINGS_UPDATED,\n        entity: ACTIVITY_ENTITIES.SETTINGS,\n        entityId: \"system-settings\",\n        details: `Updated system settings: ${Object.keys(validation.data.settings).join(\", \")}`,\n        severity: \"info\",\n      });\n    });\n\n    return actionSuccess(\n      { success: true },\n      \"System settings updated successfully\",\n    );\n  } catch (error) {\n    console.error(\"Update system settings error:\", error);\n    return actionError(\n      error instanceof Error\n        ? error.message\n        : \"Failed to update system settings\",\n    );\n  }\n}\n\n/**\n * Export activity log to CSV via Server Action\n */\nexport async function exportActivityLogAction(): Promise<Response> {\n  try {\n    const { user, organizationId, membership } =\n      await requireAuthContextWithRole();\n\n    await requirePermission(membership, PERMISSIONS.ADMIN_VIEW_ANALYTICS, db);\n\n    // Export activity log to CSV\n    const csvData = await exportActivityLog(organizationId, {\n      // Export all data with reasonable limit\n      limit: 10000,\n    });\n\n    // Log the export activity\n    await logActivity({\n      organizationId,\n      userId: user.id,\n      action: ACTIVITY_ACTIONS.EXPORT_GENERATED,\n      entity: ACTIVITY_ENTITIES.EXPORT,\n      entityId: \"activity-log-csv\",\n      details: \"Exported activity log to CSV file\",\n      severity: \"info\",\n    });\n\n    // Generate filename with timestamp\n    const timestamp = new Date().toISOString().split(\"T\")[0];\n    const filename = `activity-log-${timestamp ?? \"unknown\"}.csv`;\n\n    // Return CSV file response\n    return new Response(csvData, {\n      status: 200,\n      headers: {\n        \"Content-Type\": \"text/csv\",\n        \"Content-Disposition\": `attachment; filename=\"${String(filename)}\"`,\n      },\n    });\n  } catch (error) {\n    console.error(\"Export activity log error:\", error);\n\n    // Return error response\n    return new Response(\"Failed to export activity log\", {\n      status: 500,\n      headers: {\n        \"Content-Type\": \"text/plain\",\n      },\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/actions/auth-actions.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[941,944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[941,944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-properties","severity":2,"message":"'process.env' is restricted from being used. Use the 'env' object from '~/env.js' instead of 'process.env'. It is validated and type-safe. See src/env.js for available variables and T3 Env documentation: https://env.t3.gg/docs/introduction","line":202,"column":7,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":202,"endColumn":18}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Authentication Server Actions - Modern Supabase OAuth & Magic Link\n * Implements Google OAuth and Magic Link authentication with Server Actions\n */\n\n\"use server\";\n\nimport { revalidatePath } from \"next/cache\";\nimport { redirect } from \"next/navigation\";\nimport { headers } from \"next/headers\";\nimport { z } from \"zod\";\nimport { createClient } from \"~/lib/supabase/server\";\nimport { emailSchema, idSchema } from \"~/lib/validation/schemas\";\nimport {\n  validateOrganizationExists,\n  getOrganizationSubdomainById,\n} from \"~/lib/dal/public-organizations\";\nimport { isDevelopment } from \"~/lib/environment\";\nimport { extractFormFields } from \"~/lib/utils/form-data\";\nimport { getCookieDomain } from \"~/lib/utils/domain\";\nimport { actionError } from \"./shared\";\n\n// Workaround for Turbopack bug PACK-5180: re-export types using import/export pattern\nimport type { ActionResult as _ActionResult } from \"./shared\";\nexport type ActionResult<T = any> = _ActionResult<T>;\n\n// Validation schemas\nconst magicLinkSchema = z.object({\n  email: emailSchema,\n  organizationId: idSchema,\n});\n\nconst oauthProviderSchema = z.object({\n  provider: z.enum([\"google\"]),\n  organizationId: idSchema,\n  redirectTo: z.url().optional(),\n});\n\n/**\n * Get base domain for callback URLs using server-side headers\n * Handles both development (localhost) and production domains\n */\nasync function getBaseDomain(): Promise<string> {\n  const headersList = await headers();\n  const host = headersList.get(\"host\") ?? \"localhost:3000\";\n\n  if (isDevelopment()) {\n    return \"localhost:3000\";\n  }\n\n  // Use getCookieDomain to extract base domain, then remove leading dot\n  // e.g., \"org1.mysite.com\" -> \".mysite.com\" -> \"mysite.com\"\n  return getCookieDomain(host).replace(/^\\./, \"\");\n}\n\n/**\n * Send Magic Link for passwordless authentication\n */\nexport async function sendMagicLink(\n  _prevState: ActionResult<{ message: string }> | null,\n  formData: FormData,\n): Promise<ActionResult<{ message: string }>> {\n  try {\n    // Validate form data with type safety\n    let data: { email: string; organizationId: string };\n    try {\n      data = extractFormFields(formData, magicLinkSchema);\n    } catch (error) {\n      return actionError(\n        error instanceof Error ? error.message : \"Form validation failed\",\n      );\n    }\n\n    const { email, organizationId } = data;\n\n    // Validate organization exists\n    const organizationValid = await validateOrganizationExists(organizationId);\n    if (!organizationValid) {\n      return actionError(\"Invalid organization selected\", {\n        organizationId: [\"Selected organization is not valid\"],\n      });\n    }\n    const supabase = await createClient();\n\n    // Get organization subdomain for redirect URL\n    const subdomain = await getOrganizationSubdomainById(organizationId);\n    if (!subdomain) {\n      return actionError(\"Organization configuration error\");\n    }\n\n    // Build callback URL with organization subdomain\n    const baseDomain = await getBaseDomain();\n    const callbackUrl = isDevelopment()\n      ? `https://${subdomain}.localhost:3000/auth/callback`\n      : `https://${subdomain}.${baseDomain}/auth/callback`;\n\n    // Send magic link with organization metadata\n    const { error } = await supabase.auth.signInWithOtp({\n      email,\n      options: {\n        shouldCreateUser: true,\n        emailRedirectTo: `${callbackUrl}?organizationId=${organizationId}`,\n        data: {\n          organizationId,\n        },\n      },\n    });\n\n    if (error) {\n      console.error(\"Magic link error:\", error);\n      return actionError(\"Failed to send magic link. Please try again.\");\n    }\n\n    return {\n      success: true,\n      data: {\n        message: `Magic link sent to ${email}! Check your inbox and click the link to sign in.`,\n      },\n    };\n  } catch (error) {\n    console.error(\"Magic link action error:\", error);\n    return actionError(\"An unexpected error occurred. Please try again.\");\n  }\n}\n\n/**\n * Initiate OAuth authentication flow\n */\nexport async function signInWithOAuth(\n  provider: \"google\",\n  organizationId: string,\n  redirectTo?: string,\n): Promise<never> {\n  try {\n    // Validate inputs\n    const validation = oauthProviderSchema.safeParse({\n      provider,\n      organizationId,\n      redirectTo,\n    });\n    if (!validation.success) {\n      redirect(\"/auth/auth-code-error?error=invalid_input\");\n    }\n\n    // Validate organization exists\n    const organizationValid = await validateOrganizationExists(organizationId);\n    if (!organizationValid) {\n      redirect(\"/auth/auth-code-error?error=invalid_organization\");\n    }\n\n    const supabase = await createClient();\n\n    // Get organization subdomain for redirect URL\n    const subdomain = await getOrganizationSubdomainById(organizationId);\n    if (!subdomain) {\n      redirect(\"/auth/auth-code-error?error=organization_config\");\n    }\n\n    // Build callback URL with organization subdomain\n    const baseDomain = await getBaseDomain();\n    const callbackUrl = isDevelopment()\n      ? `https://${subdomain}.localhost:3000/auth/callback`\n      : `https://${subdomain}.${baseDomain}/auth/callback`;\n\n    // Build query params for callback\n    const queryParams = new URLSearchParams({ organizationId });\n    if (redirectTo) {\n      queryParams.set(\"next\", redirectTo);\n    }\n\n    // Initiate OAuth flow\n    const { data, error } = await supabase.auth.signInWithOAuth({\n      provider,\n      options: {\n        redirectTo: `${callbackUrl}?${queryParams.toString()}`,\n      },\n    });\n\n    if (error) {\n      console.error(\"OAuth initiation error:\", error);\n      redirect(\"/auth/auth-code-error?error=oauth_failed\");\n    }\n\n    if (data.url) {\n      redirect(data.url);\n    }\n\n    redirect(\"/auth/auth-code-error?error=no_redirect_url\");\n  } catch (error) {\n    console.error(\"OAuth action error:\", error);\n    redirect(\"/auth/auth-code-error?error=unexpected\");\n  }\n}\n\n/**\n * Dev authentication for testing (development only)\n */\nexport async function devSignIn(\n  email: string,\n  _userData?: { name?: string; role?: string },\n): Promise<ActionResult<{ message: string }>> {\n  if (process.env.NODE_ENV !== \"development\") {\n    return actionError(\"Dev authentication only available in development\");\n  }\n\n  try {\n    const supabase = await createClient();\n\n    // Use Supabase's development-friendly authentication\n    // This would typically integrate with your existing dev auth system\n    const { error } = await supabase.auth.signInWithOtp({\n      email,\n      options: {\n        shouldCreateUser: true,\n      },\n    });\n\n    if (error) {\n      return actionError(\"Dev authentication failed\");\n    }\n\n    revalidatePath(\"/\", \"layout\");\n\n    return {\n      success: true,\n      data: {\n        message: `Development authentication successful for ${email}`,\n      },\n    };\n  } catch (error) {\n    console.error(\"Dev auth error:\", error);\n    return actionError(\"Development authentication failed\");\n  }\n}\n\n/**\n * Sign out action\n */\nexport async function signOut(): Promise<void> {\n  try {\n    const supabase = await createClient();\n    await supabase.auth.signOut();\n    revalidatePath(\"/\", \"layout\");\n  } catch (error) {\n    console.error(\"Sign out error:\", error);\n  }\n  redirect(\"/auth/sign-in\");\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/actions/comment-actions.server.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/actions/comment-actions.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":118,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":118,"endColumn":62},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":118,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":118,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3769,3771],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Comment Server Actions (2025 Performance Patterns)\n * Form handling and mutations for comment management with React 19 cache API\n */\n\n\"use server\";\n\nimport { revalidatePath, revalidateTag } from \"next/cache\";\nimport { cache } from \"react\"; // React 19 cache API\nimport { z } from \"zod\";\nimport { commentContentSchema } from \"~/lib/validation/schemas\";\nimport { and, eq, isNull } from \"drizzle-orm\";\nimport { comments, issues } from \"~/server/db/schema\";\nimport { db } from \"~/lib/dal/shared\";\nimport { generatePrefixedId } from \"~/lib/utils/id-generation\";\nimport {\n  requireAuthContextWithRole,\n  validateFormData,\n  actionSuccess,\n  actionError,\n  runAfterResponse,\n  type ActionResult,\n} from \"./shared\";\nimport { requirePermission } from \"./shared\";\nimport { PERMISSIONS } from \"~/server/auth/permissions.constants\";\nimport { generateCommentNotifications } from \"~/lib/services/notification-generator\";\n\n// Validation using centralized schemas\nconst addCommentSchema = z.object({\n  content: commentContentSchema,\n});\n\nconst editCommentSchema = z.object({\n  content: commentContentSchema,\n});\n\n// Performance: Cached database queries for verification\nconst getCommentWithAccess = cache(\n  async (commentId: string, organizationId: string, userId: string) => {\n    return await db.query.comments.findFirst({\n      where: and(\n        eq(comments.id, commentId),\n        eq(comments.organization_id, organizationId),\n        eq(comments.author_id, userId), // User must be author to edit/delete\n        isNull(comments.deleted_at), // Not soft-deleted\n      ),\n    });\n  },\n);\n\nconst getIssueWithAccess = cache(\n  async (issueId: string, organizationId: string) => {\n    return await db.query.issues.findFirst({\n      where: and(\n        eq(issues.id, issueId),\n        eq(issues.organization_id, organizationId),\n      ),\n      columns: { id: true },\n    });\n  },\n);\n\n/**\n * Add comment to issue via Server Action (React 19 useActionState compatible)\n * Enhanced with organization scoping and background processing\n */\nexport async function addCommentAction(\n  issueId: string,\n  _prevState: ActionResult<{ commentId: string }> | null,\n  formData: FormData,\n): Promise<ActionResult<{ commentId: string }>> {\n  try {\n    const { user, organizationId } = await requireAuthContextWithRole();\n\n    // Enhanced validation\n    const validation = validateFormData(formData, addCommentSchema);\n    if (!validation.success) {\n      return validation;\n    }\n\n    // Note: Commenting is allowed for any authenticated member who can view the issue.\n    // Do NOT require ISSUE_CREATE here; visibility of the issue implies comment permission.\n\n    // Verify issue exists and user has access\n    const issue = await getIssueWithAccess(issueId, organizationId);\n    if (!issue) {\n      return actionError(\"Issue not found or access denied\");\n    }\n\n    // Create comment\n    const commentData = {\n      id: generatePrefixedId(\"comment\"),\n      content: validation.data.content,\n      issue_id: issueId,\n      author_id: user.id,\n      organization_id: organizationId,\n    };\n\n    await db.insert(comments).values(commentData);\n\n    // Granular cache invalidation\n    revalidatePath(`/issues/${issueId}`);\n    revalidateTag(\"issues\");\n    revalidateTag(`comments-${issueId}`);\n    revalidateTag(`recent-comments-${organizationId}`);\n\n    // Background processing (runs after response sent to user)\n    runAfterResponse(async () => {\n      console.log(\n        `Comment added to issue ${issueId} by ${user.email ?? \"unknown\"}`,\n      );\n\n      // Generate notifications for issue stakeholders\n      try {\n        await generateCommentNotifications(issueId, commentData.id, {\n          organizationId,\n          actorId: user.id,\n          actorName: user.user_metadata[\"name\"] || user.email,\n        });\n      } catch (error) {\n        console.error(\"Failed to generate comment notifications:\", error);\n      }\n    });\n\n    return actionSuccess(\n      { commentId: commentData.id },\n      \"Comment added successfully\",\n    );\n  } catch (error) {\n    console.error(\"Add comment error:\", error);\n    return actionError(\n      error instanceof Error ? error.message : \"Failed to add comment\",\n    );\n  }\n}\n\n/**\n * Edit comment via Server Action (React 19 useActionState compatible)\n * Enhanced with permission checks and audit trail\n */\nexport async function editCommentAction(\n  commentId: string,\n  _prevState: ActionResult<{ success: boolean }> | null,\n  formData: FormData,\n): Promise<ActionResult<{ success: boolean }>> {\n  try {\n    const { user, organizationId, membership } =\n      await requireAuthContextWithRole();\n    await requirePermission(membership, PERMISSIONS.ISSUE_CREATE, db);\n\n    // Enhanced validation\n    const validation = validateFormData(formData, editCommentSchema);\n    if (!validation.success) {\n      return validation;\n    }\n\n    // Verify comment exists and user has permission to edit\n    const comment = await getCommentWithAccess(\n      commentId,\n      organizationId,\n      user.id,\n    );\n    if (!comment) {\n      return actionError(\n        \"Comment not found or you don't have permission to edit it\",\n      );\n    }\n\n    // Update comment\n    await db\n      .update(comments)\n      .set({\n        content: validation.data.content,\n        updated_at: new Date(),\n      })\n      .where(eq(comments.id, commentId));\n\n    // Granular cache invalidation\n    revalidatePath(`/issues/${comment.issue_id}`);\n    revalidateTag(\"issues\");\n    revalidateTag(`comments-${comment.issue_id}`);\n    revalidateTag(`recent-comments-${organizationId}`);\n\n    // Background processing\n    runAfterResponse(() => {\n      console.log(`Comment ${commentId} edited by ${user.email ?? \"unknown\"}`);\n      return Promise.resolve();\n    });\n\n    return actionSuccess({ success: true }, \"Comment updated successfully\");\n  } catch (error) {\n    console.error(\"Edit comment error:\", error);\n    return actionError(\n      error instanceof Error ? error.message : \"Failed to update comment\",\n    );\n  }\n}\n\n/**\n * Delete comment via Server Action (React 19 useActionState compatible)\n * Uses soft delete for audit trail and potential recovery\n */\nexport async function deleteCommentAction(\n  commentId: string,\n  _prevState: ActionResult<{ success: boolean }> | null,\n  _formData: FormData,\n): Promise<ActionResult<{ success: boolean }>> {\n  try {\n    const { user, organizationId, membership } =\n      await requireAuthContextWithRole();\n    await requirePermission(membership, PERMISSIONS.ISSUE_CREATE, db);\n\n    // Verify comment exists and user has permission to delete\n    const comment = await getCommentWithAccess(\n      commentId,\n      organizationId,\n      user.id,\n    );\n    if (!comment) {\n      return actionError(\n        \"Comment not found or you don't have permission to delete it\",\n      );\n    }\n\n    // Soft delete comment (preserve for audit trail)\n    await db\n      .update(comments)\n      .set({\n        deleted_at: new Date(),\n        deleted_by: user.id,\n      })\n      .where(eq(comments.id, commentId));\n\n    // Granular cache invalidation\n    revalidatePath(`/issues/${comment.issue_id}`);\n    revalidateTag(\"issues\");\n    revalidateTag(`comments-${comment.issue_id}`);\n    revalidateTag(`recent-comments-${organizationId}`);\n\n    // Background processing\n    runAfterResponse(() => {\n      console.log(`Comment ${commentId} deleted by ${user.email ?? \"unknown\"}`);\n      return Promise.resolve();\n    });\n\n    return actionSuccess({ success: true }, \"Comment deleted successfully\");\n  } catch (error) {\n    console.error(\"Delete comment error:\", error);\n    return actionError(\n      error instanceof Error ? error.message : \"Failed to delete comment\",\n    );\n  }\n}\n\n/**\n * Restore soft-deleted comment via Server Action (for admin recovery)\n */\nexport async function restoreCommentAction(\n  commentId: string,\n  _prevState: ActionResult<{ success: boolean }> | null,\n  _formData: FormData,\n): Promise<ActionResult<{ success: boolean }>> {\n  try {\n    const { user, organizationId, membership } =\n      await requireAuthContextWithRole();\n    await requirePermission(membership, PERMISSIONS.ISSUE_CREATE, db);\n\n    // Find soft-deleted comment that user authored\n    const comment = await db.query.comments.findFirst({\n      where: and(\n        eq(comments.id, commentId),\n        eq(comments.organization_id, organizationId),\n        eq(comments.author_id, user.id), // User must be author\n      ),\n    });\n\n    if (!comment?.deleted_at) {\n      return actionError(\"Comment not found or not deleted\");\n    }\n\n    // Restore comment\n    await db\n      .update(comments)\n      .set({\n        deleted_at: null,\n        deleted_by: null,\n      })\n      .where(eq(comments.id, commentId));\n\n    // Cache invalidation\n    revalidatePath(`/issues/${comment.issue_id}`);\n    revalidateTag(\"issues\");\n    revalidateTag(`comments-${comment.issue_id}`);\n    revalidateTag(`recent-comments-${organizationId}`);\n\n    // Background processing\n    runAfterResponse(() => {\n      console.log(\n        `Comment ${commentId} restored by ${user.email ?? \"unknown\"}`,\n      );\n      return Promise.resolve();\n    });\n\n    return actionSuccess({ success: true }, \"Comment restored successfully\");\n  } catch (error) {\n    console.error(\"Restore comment error:\", error);\n    return actionError(\n      error instanceof Error ? error.message : \"Failed to restore comment\",\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/actions/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/actions/issue-actions.server.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/actions/issue-actions.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":120,"column":23,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":120,"endColumn":75,"fix":{"range":[3874,3911],"text":""}},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":196,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":196,"endColumn":62},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":196,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":196,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6337,6339],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":277,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":277,"endColumn":64},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":277,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":277,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8946,8948],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":437,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":437,"endColumn":64},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":437,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":437,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13573,13575],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":477,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":477,"endColumn":38}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"/**\n * Issue Server Actions (2025 Performance Patterns)\n * Form handling and mutations for RSC architecture with React 19 cache API\n */\n\n\"use server\";\n\nimport { revalidatePath, revalidateTag } from \"next/cache\";\nimport { cache } from \"react\"; // React 19 cache API\nimport { z } from \"zod\";\nimport {\n  titleSchema,\n  commentContentSchema,\n  uuidSchema,\n} from \"~/lib/validation/schemas\";\nimport { and, eq, inArray } from \"drizzle-orm\";\nimport {\n  issues,\n  issueStatuses,\n  priorities,\n  comments,\n} from \"~/server/db/schema\";\nimport { db } from \"~/lib/dal/shared\";\nimport { generatePrefixedId } from \"~/lib/utils/id-generation\";\nimport { transformKeysToSnakeCase } from \"~/lib/utils/case-transformers\";\nimport {\n  requireAuthContextWithRole,\n  validateFormData,\n  actionSuccess,\n  actionError,\n  runAfterResponse,\n  type ActionResult,\n} from \"./shared\";\nimport { requirePermission } from \"./shared\";\nimport { PERMISSIONS } from \"~/server/auth/permissions.constants\";\nimport {\n  generateIssueCreationNotifications,\n  generateStatusChangeNotifications,\n  generateAssignmentNotifications,\n} from \"~/lib/services/notification-generator\";\n\n// Enhanced validation schemas with better error messages\n// Accept either a UUID or a deterministic seeded machine id (e.g. \"machine-mm-001\")\nconst machineIdentifierSchema = z\n  .string()\n  .min(1, { message: \"Please select a machine\" })\n  .refine(\n    (v) =>\n      /^machine-[a-z0-9_-]+$/i.test(v) ||\n      /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(v),\n    { message: \"Invalid machine selection\" },\n  );\n\nconst createIssueSchema = z.object({\n  title: titleSchema,\n  description: z.string().optional(),\n  machineId: machineIdentifierSchema,\n  priority: z.enum([\"low\", \"medium\", \"high\"]).optional().default(\"medium\"),\n  assigneeId: z.union([uuidSchema, z.literal(\"unassigned\")]).optional(),\n});\n\nconst updateIssueStatusSchema = z.object({\n  statusId: uuidSchema, // uses centralized uuid validator (provides proper message)\n});\n\nconst addCommentSchema = z.object({ content: commentContentSchema });\n\nconst updateIssueAssignmentSchema = z.object({\n  assigneeId: z.union([uuidSchema, z.literal(\"unassigned\")]).optional(),\n});\n\nconst bulkUpdateIssuesSchema = z.object({\n  issueIds: z\n    .array(uuidSchema)\n    .min(1, \"No issues selected\")\n    .max(50, \"Cannot update more than 50 issues at once\"),\n  statusId: uuidSchema.optional(),\n  assigneeId: uuidSchema.optional(),\n});\n\n// Performance: Cached database queries for default values\nconst getDefaultStatus = cache(async (organizationId: string) => {\n  return await db.query.issueStatuses.findFirst({\n    where: and(\n      eq(issueStatuses.is_default, true),\n      eq(issueStatuses.organization_id, organizationId),\n    ),\n  });\n});\n\nconst getDefaultPriority = cache(async (organizationId: string) => {\n  return await db.query.priorities.findFirst({\n    where: and(\n      eq(priorities.is_default, true),\n      eq(priorities.organization_id, organizationId),\n    ),\n  });\n});\n\n/**\n * Create new issue via Server Action (React 19 useActionState compatible)\n * Enhanced with performance optimizations and background processing\n */\nexport async function createIssueAction(\n  _prevState: ActionResult<{ id: string }> | null,\n  formData: FormData,\n): Promise<ActionResult<{ id: string }>> {\n  try {\n    const { user, organizationId, membership } =\n      await requireAuthContextWithRole();\n\n    // Enhanced validation with Zod\n    // Perform validation but adapt success shape to our expected return type later\n    const validation = validateFormData(formData, createIssueSchema);\n    if (!validation.success) {\n      // Pass through error/fieldErrors (already correct shape)\n      return validation as ActionResult<{ id: string }>;\n    }\n    // Extract validated fields (do not return validation directly since type expects id)\n    const validated = validation.data as z.infer<typeof createIssueSchema>;\n\n    await requirePermission(membership, PERMISSIONS.ISSUE_CREATE, db);\n\n    // Parallel queries for better performance\n    const [defaultStatus, defaultPriority] = await Promise.all([\n      getDefaultStatus(organizationId),\n      getDefaultPriority(organizationId),\n    ]);\n    let resolvedStatus = defaultStatus;\n    let resolvedPriority = defaultPriority;\n    // Fallback: pick first available status/priority to avoid hard failure in mis-seeded envs\n    if (!resolvedStatus) {\n      resolvedStatus = await db.query.issueStatuses.findFirst({\n        where: eq(issueStatuses.organization_id, organizationId),\n      });\n      if (!resolvedStatus) {\n        return actionError(\n          \"No issue statuses configured for organization. Please contact support.\",\n        );\n      }\n    }\n    if (!resolvedPriority) {\n      resolvedPriority = await db.query.priorities.findFirst({\n        where: eq(priorities.organization_id, organizationId),\n      });\n      if (!resolvedPriority) {\n        return actionError(\n          \"No priorities configured for organization. Please contact support.\",\n        );\n      }\n    }\n\n    // Handle special \"unassigned\" case\n    const assigneeId =\n      validated.assigneeId === \"unassigned\"\n        ? null\n        : (validated.assigneeId ?? null);\n\n    // Create issue with validated data\n    const issueData = {\n      id: generatePrefixedId(\"issue\"),\n      title: validated.title,\n      description: validated.description ?? \"\",\n      machineId: validated.machineId,\n      organizationId,\n      statusId: resolvedStatus.id,\n      priorityId: resolvedPriority.id,\n      assigneeId,\n      createdById: user.id,\n    };\n\n    // Create issue in database\n    await db\n      .insert(issues)\n      .values(\n        transformKeysToSnakeCase(issueData) as typeof issues.$inferInsert,\n      );\n\n    // Granular cache invalidation\n    revalidatePath(\"/issues\");\n    revalidatePath(`/issues/${issueData.id}`);\n    revalidatePath(\"/dashboard\");\n    revalidateTag(\"issues\");\n\n    // Background processing (runs after response sent to user)\n    runAfterResponse(async () => {\n      console.log(\n        `Issue ${issueData.id} created by ${user.email ?? \"unknown\"}`,\n      );\n\n      // Generate notifications for issue creation\n      try {\n        await generateIssueCreationNotifications(issueData.id, {\n          organizationId,\n          actorId: user.id,\n          actorName: user.user_metadata[\"name\"] || user.email,\n        });\n      } catch (error) {\n        console.error(\n          \"Failed to generate issue creation notifications:\",\n          error,\n        );\n      }\n    });\n\n    // Return success (client enhancement layer will handle navigation)\n    return actionSuccess({ id: issueData.id }, \"Issue created successfully\");\n  } catch (error) {\n    // (Legacy redirect handling removed – action now returns success and client redirects)\n    console.error(\"Create issue error:\", error);\n    return actionError(\n      error instanceof Error\n        ? error.message\n        : \"Failed to create issue. Please try again.\",\n    );\n  }\n}\n\n/**\n * Update issue status via Server Action (React 19 useActionState compatible)\n * Enhanced with validation and background processing\n */\nexport async function updateIssueStatusAction(\n  issueId: string,\n  _prevState: ActionResult<{ statusId: string }> | null,\n  formData: FormData,\n): Promise<ActionResult<{ statusId: string }>> {\n  try {\n    const { user, organizationId, membership } =\n      await requireAuthContextWithRole();\n\n    // Enhanced validation\n    const validation = validateFormData(formData, updateIssueStatusSchema);\n    if (!validation.success) {\n      return validation as ActionResult<{ statusId: string }>;\n    }\n\n    await requirePermission(membership, PERMISSIONS.ISSUE_EDIT, db);\n\n    // Update with organization scoping for security\n    const [updatedIssue] = await db\n      .update(issues)\n      .set({ status_id: validation.data.statusId })\n      .where(\n        and(eq(issues.id, issueId), eq(issues.organization_id, organizationId)),\n      )\n      .returning({ status_id: issues.status_id });\n\n    if (!updatedIssue) {\n      return actionError(\"Issue not found or access denied\");\n    }\n\n    // Granular cache invalidation\n    revalidatePath(`/issues/${issueId}`);\n    revalidatePath(\"/issues\");\n    revalidatePath(\"/dashboard\");\n    revalidateTag(\"issues\");\n\n    // Background processing\n    runAfterResponse(async () => {\n      console.log(\n        `Issue ${issueId} status updated by ${user.email ?? \"unknown\"}`,\n      );\n\n      // Generate notifications for status change\n      try {\n        // Get status name for notification message\n        const statusResult = await db.query.issueStatuses.findFirst({\n          where: eq(issueStatuses.id, validation.data.statusId),\n          columns: { name: true },\n        });\n\n        if (statusResult) {\n          await generateStatusChangeNotifications(issueId, statusResult.name, {\n            organizationId,\n            actorId: user.id,\n            actorName: user.user_metadata[\"name\"] || user.email,\n          });\n        }\n      } catch (error) {\n        console.error(\"Failed to generate status change notifications:\", error);\n      }\n    });\n\n    return actionSuccess(\n      { statusId: updatedIssue.status_id },\n      \"Issue status updated successfully\",\n    );\n  } catch (error) {\n    console.error(\"Update issue status error:\", error);\n    return actionError(\n      error instanceof Error ? error.message : \"Failed to update issue status\",\n    );\n  }\n}\n\n/**\n * Add comment to issue via Server Action (React 19 useActionState compatible)\n */\nexport async function addCommentAction(\n  issueId: string,\n  _prevState: ActionResult<{ commentId: string }> | null,\n  formData: FormData,\n): Promise<ActionResult<{ commentId: string }>> {\n  try {\n    const { user, organizationId, membership } =\n      await requireAuthContextWithRole();\n\n    // Enhanced validation\n    const validation = validateFormData(formData, addCommentSchema);\n    if (!validation.success) {\n      return validation as ActionResult<{ commentId: string }>;\n    }\n\n    await requirePermission(membership, PERMISSIONS.ISSUE_CREATE, db);\n\n    // Verify issue exists and user has access\n    const issue = await db.query.issues.findFirst({\n      where: and(\n        eq(issues.id, issueId),\n        eq(issues.organization_id, organizationId),\n      ),\n      columns: { id: true },\n    });\n\n    if (!issue) {\n      return actionError(\"Issue not found or access denied\");\n    }\n\n    // Create comment\n    const commentData = {\n      id: generatePrefixedId(\"comment\"),\n      content: validation.data.content,\n      issue_id: issueId,\n      author_id: user.id,\n      organization_id: organizationId,\n    };\n\n    await db.insert(comments).values(commentData);\n\n    // Cache invalidation\n    revalidatePath(`/issues/${issueId}`);\n    revalidateTag(\"issues\");\n    revalidateTag(`comments-${issueId}`);\n\n    // Background processing\n    runAfterResponse(() => {\n      console.log(\n        `Comment added to issue ${issueId} by ${user.email ?? \"unknown\"}`,\n      );\n      return Promise.resolve();\n    });\n\n    return actionSuccess(\n      { commentId: commentData.id },\n      \"Comment added successfully\",\n    );\n  } catch (error) {\n    console.error(\"Add comment error:\", error);\n    return actionError(\n      error instanceof Error ? error.message : \"Failed to add comment\",\n    );\n  }\n}\n\n/**\n * Update issue assignment via Server Action (React 19 useActionState compatible)\n */\nexport async function updateIssueAssignmentAction(\n  issueId: string,\n  _prevState: ActionResult<{ assigneeId: string | null }> | null,\n  formData: FormData,\n): Promise<ActionResult<{ assigneeId: string | null }>> {\n  try {\n    const { user, organizationId, membership } =\n      await requireAuthContextWithRole();\n\n    // Enhanced validation\n    const validation = validateFormData(formData, updateIssueAssignmentSchema);\n    if (!validation.success) {\n      return validation as ActionResult<{ assigneeId: string | null }>;\n    }\n\n    await requirePermission(membership, PERMISSIONS.ISSUE_ASSIGN, db);\n\n    // Get current assignee for notification comparison\n    const currentIssue = await db.query.issues.findFirst({\n      where: and(\n        eq(issues.id, issueId),\n        eq(issues.organization_id, organizationId),\n      ),\n      columns: { assigned_to_id: true },\n    });\n\n    const previousAssigneeId = currentIssue?.assigned_to_id ?? null;\n\n    // Handle special \"unassigned\" case\n    const assigneeId =\n      validation.data.assigneeId === \"unassigned\"\n        ? null\n        : (validation.data.assigneeId ?? null);\n\n    // Update assignment with organization scoping\n    const [updatedIssue] = await db\n      .update(issues)\n      .set({ assigned_to_id: assigneeId })\n      .where(\n        and(eq(issues.id, issueId), eq(issues.organization_id, organizationId)),\n      )\n      .returning({ assigned_to_id: issues.assigned_to_id });\n\n    if (!updatedIssue) {\n      return actionError(\"Issue not found or access denied\");\n    }\n\n    // Cache invalidation\n    revalidatePath(`/issues/${issueId}`);\n    revalidatePath(\"/issues\");\n    revalidatePath(\"/dashboard\");\n    revalidateTag(\"issues\");\n\n    // Background processing\n    runAfterResponse(async () => {\n      console.log(\n        `Issue ${issueId} assignment updated by ${user.email ?? \"unknown\"}`,\n      );\n\n      // Generate notifications for assignment change\n      try {\n        await generateAssignmentNotifications(\n          issueId,\n          assigneeId,\n          previousAssigneeId,\n          {\n            organizationId,\n            actorId: user.id,\n            actorName: user.user_metadata[\"name\"] || user.email,\n          },\n        );\n      } catch (error) {\n        console.error(\n          \"Failed to generate assignment change notifications:\",\n          error,\n        );\n      }\n    });\n\n    return actionSuccess(\n      { assigneeId: updatedIssue.assigned_to_id },\n      \"Issue assignment updated successfully\",\n    );\n  } catch (error) {\n    console.error(\"Update issue assignment error:\", error);\n    return actionError(\n      error instanceof Error ? error.message : \"Failed to update assignment\",\n    );\n  }\n}\n\n/**\n * Bulk update issues via Server Action (React 19 useActionState compatible)\n */\nexport async function bulkUpdateIssuesAction(\n  _prevState: ActionResult<{ updatedCount: number }> | null,\n  formData: FormData,\n): Promise<ActionResult<{ updatedCount: number }>> {\n  try {\n    const { user, organizationId, membership } =\n      await requireAuthContextWithRole();\n\n    // Parse JSON data from form\n    const jsonData = formData.get(\"data\") as string;\n    if (!jsonData) {\n      return actionError(\"No data provided for bulk update\");\n    }\n\n    const data = JSON.parse(jsonData);\n    const validation = bulkUpdateIssuesSchema.safeParse(data);\n    if (!validation.success) {\n      return actionError(\"Invalid bulk update data\");\n    }\n\n    await requirePermission(membership, PERMISSIONS.ISSUE_BULK_MANAGE, db);\n    const { issueIds, statusId, assigneeId } = validation.data;\n\n    // Build update object\n    const updateData: Partial<typeof issues.$inferInsert> = {};\n    if (statusId) updateData.status_id = statusId;\n    if (assigneeId !== undefined) updateData.assigned_to_id = assigneeId;\n\n    if (Object.keys(updateData).length === 0) {\n      return actionError(\"No updates specified\");\n    }\n\n    // Bulk update with organization scoping\n    const updatedIssues = await db\n      .update(issues)\n      .set(updateData)\n      .where(\n        and(\n          eq(issues.organization_id, organizationId),\n          inArray(issues.id, issueIds),\n        ),\n      )\n      .returning({ id: issues.id });\n\n    // Cache invalidation\n    revalidatePath(\"/issues\");\n    revalidatePath(\"/dashboard\");\n    revalidateTag(\"issues\");\n\n    // Background processing\n    runAfterResponse(() => {\n      console.log(\n        `Bulk updated ${String(updatedIssues.length)} issues by ${user.email ?? \"unknown\"}`,\n      );\n      return Promise.resolve();\n    });\n\n    return actionSuccess(\n      { updatedCount: updatedIssues.length },\n      `Successfully updated ${String(updatedIssues.length)} issue${updatedIssues.length !== 1 ? \"s\" : \"\"}`,\n    );\n  } catch (error) {\n    console.error(\"Bulk update issues error:\", error);\n    return actionError(\n      error instanceof Error ? error.message : \"Failed to bulk update issues\",\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/actions/machine-actions.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-type-conversion","severity":2,"message":"Passing a string to String() does not change the type or value of the string.","line":453,"column":57,"nodeType":"Identifier","messageId":"unnecessaryTypeConversion","endLine":453,"endColumn":63,"suggestions":[{"messageId":"suggestRemove","fix":{"range":[12977,12994],"text":"machineId"},"desc":"Remove the type conversion."},{"messageId":"suggestSatisfies","data":{"type":"string"},"fix":{"range":[12977,12994],"text":"machineId satisfies string"},"desc":"Instead, assert that the value satisfies the string type."}]},{"ruleId":"@typescript-eslint/no-unnecessary-type-conversion","severity":2,"message":"Passing a string to String() does not change the type or value of the string.","line":481,"column":50,"nodeType":"Identifier","messageId":"unnecessaryTypeConversion","endLine":481,"endColumn":56,"suggestions":[{"messageId":"suggestRemove","fix":{"range":[13836,13853],"text":"machineId"},"desc":"Remove the type conversion."},{"messageId":"suggestSatisfies","data":{"type":"string"},"fix":{"range":[13836,13853],"text":"machineId satisfies string"},"desc":"Instead, assert that the value satisfies the string type."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Machine Server Actions\n * Phase 3B: CRUD operations with QR code management and validation\n * Following established patterns from issue-actions.ts\n */\n\n\"use server\";\n\nimport { revalidateTag, revalidatePath } from \"next/cache\";\nimport { z } from \"zod\";\nimport { nameSchema, idSchema } from \"~/lib/validation/schemas\";\nimport { eq, and, inArray } from \"drizzle-orm\";\nimport { requireMemberAccess } from \"~/lib/organization-context\";\nimport { db } from \"~/lib/dal/shared\";\nimport { machines } from \"~/server/db/schema\";\nimport {\n  generateMachineQRCode,\n  validateQRCodeParams,\n} from \"~/lib/services/qr-code-service\";\nimport type { ActionResult } from \"~/lib/actions/shared\";\nimport { validateFormData } from \"~/lib/actions/shared\";\n\n// ================================\n// VALIDATION SCHEMAS\n// ================================\n\nconst CreateMachineSchema = z.object({\n  name: nameSchema,\n  locationId: idSchema,\n  modelId: idSchema,\n  ownerId: idSchema.optional(),\n});\n\n// Explicit type for better TypeScript inference\ntype CreateMachineData = z.infer<typeof CreateMachineSchema>;\n\nconst UpdateMachineSchema = CreateMachineSchema.partial().extend({\n  id: idSchema,\n});\n\n// Explicit type for better TypeScript inference\ntype UpdateMachineData = z.infer<typeof UpdateMachineSchema>;\n\nconst BulkUpdateMachineSchema = z.object({\n  machineIds: z\n    .array(idSchema)\n    .min(1, \"At least one machine must be selected\")\n    .max(50, \"Cannot process more than 50 machines at once\"),\n  locationId: idSchema.optional(),\n  ownerId: idSchema.optional(),\n});\n\nconst GenerateQRCodeSchema = z.object({\n  machineId: idSchema,\n});\n\nconst BulkQRGenerateSchema = z.object({\n  machineIds: z\n    .array(idSchema)\n    .min(1, \"At least one machine must be selected\")\n    .max(50, \"Cannot process more than 50 machines at once\"),\n});\n\n// ================================\n// MACHINE CRUD OPERATIONS\n// ================================\n\nexport async function createMachineAction(\n  formData: FormData,\n): Promise<ActionResult<{ machineId: string }>> {\n  const { organization } = await requireMemberAccess();\n  const organizationId = organization.id;\n\n  // Enhanced validation with validateFormData\n  const validation: ActionResult<CreateMachineData> = validateFormData(formData, CreateMachineSchema);\n  if (!validation.success) {\n    return validation;\n  }\n\n  try {\n    // Create machine with organization scoping\n    const [machine] = await db\n      .insert(machines)\n      .values({\n        id: crypto.randomUUID(),\n        name: validation.data.name,\n        organization_id: organizationId,\n        location_id: validation.data.locationId,\n        model_id: validation.data.modelId,\n        owner_id: validation.data.ownerId ?? null,\n        created_at: new Date(),\n        updated_at: new Date(),\n      })\n      .returning({ id: machines.id });\n\n    // Cache invalidation\n    revalidateTag(`machines-${organizationId}`);\n    revalidateTag(`dashboard-${organizationId}`);\n    revalidatePath(\"/machines\");\n\n    if (!machine) {\n      return {\n        success: false,\n        error: \"Failed to create machine. No data returned.\",\n      };\n    }\n\n    return { success: true, data: { machineId: machine.id } };\n  } catch (error) {\n    console.error(\"Create machine error:\", error);\n    return {\n      success: false,\n      error: \"Failed to create machine. Please try again.\",\n    };\n  }\n}\n\nexport async function updateMachineAction(\n  formData: FormData,\n): Promise<ActionResult<{ machineId: string }>> {\n  const { organization } = await requireMemberAccess();\n  const organizationId = organization.id;\n\n  // Enhanced validation with validateFormData\n  const validation: ActionResult<UpdateMachineData> = validateFormData(formData, UpdateMachineSchema);\n  if (!validation.success) {\n    return validation;\n  }\n\n  try {\n    // Build update object (only include defined values)\n    const updateData: Partial<typeof machines.$inferInsert> = {\n      updated_at: new Date(),\n    };\n\n    if (validation.data.name) updateData.name = validation.data.name;\n    if (validation.data.locationId) updateData.location_id = validation.data.locationId;\n    if (validation.data.modelId) updateData.model_id = validation.data.modelId;\n    if (validation.data.ownerId !== undefined)\n      updateData.owner_id = validation.data.ownerId ?? null;\n\n    // Update with organization scoping\n    const [updatedMachine] = await db\n      .update(machines)\n      .set(updateData)\n      .where(\n        and(\n          eq(machines.id, validation.data.id),\n          eq(machines.organization_id, organizationId),\n        ),\n      )\n      .returning({ id: machines.id });\n\n    if (!updatedMachine) {\n      return {\n        success: false,\n        error: \"Resource not found or access denied\",\n      };\n    }\n\n    // Cache invalidation\n    revalidateTag(`machine-${updatedMachine.id}`);\n    revalidateTag(`machines-${organizationId}`);\n    revalidatePath(`/machines/${updatedMachine.id}`);\n    revalidatePath(\"/machines\");\n\n    return { success: true, data: { machineId: updatedMachine.id } };\n  } catch (error) {\n    console.error(\"Update machine error:\", error);\n    return {\n      success: false,\n      error: \"Failed to update machine. Please try again.\",\n    };\n  }\n}\n\nexport async function deleteMachineAction(\n  machineId: string,\n): Promise<ActionResult<{ deleted: boolean }>> {\n  const { organization } = await requireMemberAccess();\n  const organizationId = organization.id;\n\n  if (!machineId) {\n    return {\n      success: false,\n      error: \"Machine ID is required\",\n    };\n  }\n\n  try {\n    // Delete with organization scoping\n    const [deletedMachine] = await db\n      .delete(machines)\n      .where(\n        and(\n          eq(machines.id, machineId),\n          eq(machines.organization_id, organizationId),\n        ),\n      )\n      .returning({ id: machines.id });\n\n    if (!deletedMachine) {\n      return {\n        success: false,\n        error: \"Resource not found or access denied\",\n      };\n    }\n\n    // Cache invalidation\n    revalidateTag(`machines-${organizationId}`);\n    revalidateTag(`dashboard-${organizationId}`);\n    revalidatePath(\"/machines\");\n\n    return { success: true, data: { deleted: true } };\n  } catch (error) {\n    console.error(\"Delete machine error:\", error);\n    return {\n      success: false,\n      error: \"Failed to delete machine. Please try again.\",\n    };\n  }\n}\n\n// ================================\n// BULK OPERATIONS\n// ================================\n\nexport async function bulkUpdateMachinesAction(\n  formData: FormData,\n): Promise<ActionResult<{ updatedCount: number }>> {\n  const { organization } = await requireMemberAccess();\n  const organizationId = organization.id;\n\n  const machineIdsString = formData.get(\"machineIds\") as string;\n  const machineIds = machineIdsString ? machineIdsString.split(\",\") : [];\n\n  // Enhanced validation with validateFormData (using parsed machineIds)\n  const bulkData = { machineIds, locationId: formData.get(\"locationId\") ?? undefined, ownerId: formData.get(\"ownerId\") ?? undefined };\n  const validation = BulkUpdateMachineSchema.safeParse(bulkData);\n  if (!validation.success) {\n    return {\n      success: false,\n      error: \"Validation failed\",\n    };\n  }\n\n  try {\n    // Build update object\n    const updateData: Partial<typeof machines.$inferInsert> = {\n      updated_at: new Date(),\n    };\n\n    if (validation.data.locationId) updateData.location_id = validation.data.locationId;\n    if (validation.data.ownerId !== undefined)\n      updateData.owner_id = validation.data.ownerId ?? null;\n\n    // Update machines with organization scoping using inArray for multiple IDs\n    const updatedMachines = await db\n      .update(machines)\n      .set(updateData)\n      .where(\n        and(\n          eq(machines.organization_id, organizationId),\n          // Use inArray for proper multiple ID handling\n          inArray(machines.id, validation.data.machineIds),\n        ),\n      )\n      .returning({ id: machines.id });\n\n    // Cache invalidation\n    revalidateTag(`machines-${organizationId}`);\n    revalidatePath(\"/machines\");\n\n    return { success: true, data: { updatedCount: updatedMachines.length } };\n  } catch (error) {\n    console.error(\"Bulk update machines error:\", error);\n    return {\n      success: false,\n      error: \"Failed to update machines. Please try again.\",\n    };\n  }\n}\n\n// ================================\n// QR CODE OPERATIONS\n// ================================\n\nexport async function generateQRCodeAction(\n  formData: FormData,\n): Promise<ActionResult<{ qrCodeUrl: string }>> {\n  const { organization } = await requireMemberAccess();\n  const organizationId = organization.id;\n\n  const result = GenerateQRCodeSchema.safeParse({\n    machineId: formData.get(\"machineId\"),\n  });\n\n  if (!result.success) {\n    return {\n      success: false,\n      error: \"Validation failed\",\n    };\n  }\n\n  // Validate machine ID format\n  if (!validateQRCodeParams(result.data.machineId)) {\n    return {\n      success: false,\n      error: \"Invalid machine ID format\",\n    };\n  }\n\n  try {\n    // Generate actual QR code using the service\n    const qrCode = await generateMachineQRCode(result.data.machineId);\n\n    // Update machine with QR code information\n    const [updatedMachine] = await db\n      .update(machines)\n      .set({\n        qr_code_id: qrCode.id,\n        qr_code_url: qrCode.dataUrl, // Store the base64 data URL\n        qr_code_generated_at: new Date(),\n        updated_at: new Date(),\n      })\n      .where(\n        and(\n          eq(machines.id, result.data.machineId),\n          eq(machines.organization_id, organizationId),\n        ),\n      )\n      .returning({ id: machines.id });\n\n    if (!updatedMachine) {\n      return {\n        success: false,\n        error: \"Resource not found or access denied\",\n      };\n    }\n\n    // Cache invalidation\n    revalidateTag(`machine-${result.data.machineId}`);\n    revalidateTag(`machines-${organizationId}`);\n    revalidatePath(`/machines/${result.data.machineId}`);\n    revalidatePath(\"/machines\");\n\n    return { success: true, data: { qrCodeUrl: qrCode.dataUrl } };\n  } catch (error) {\n    console.error(\"Generate QR code error:\", error);\n    return {\n      success: false,\n      error: \"Failed to generate QR code. Please try again.\",\n    };\n  }\n}\n\nexport async function regenerateQRCodeAction(\n  machineId: string,\n): Promise<ActionResult<{ qrCodeUrl: string }>> {\n  const { organization } = await requireMemberAccess();\n  const organizationId = organization.id;\n\n  if (!machineId) {\n    return {\n      success: false,\n      error: \"Machine ID is required\",\n    };\n  }\n\n  // Validate machine ID format\n  if (!validateQRCodeParams(machineId)) {\n    return {\n      success: false,\n      error: \"Invalid machine ID format\",\n    };\n  }\n\n  try {\n    // Generate new QR code using the service\n    const qrCode = await generateMachineQRCode(machineId);\n\n    // Update machine with new QR code\n    const [updatedMachine] = await db\n      .update(machines)\n      .set({\n        qr_code_id: qrCode.id,\n        qr_code_url: qrCode.dataUrl, // Store the base64 data URL\n        qr_code_generated_at: new Date(),\n        updated_at: new Date(),\n      })\n      .where(\n        and(\n          eq(machines.id, machineId),\n          eq(machines.organization_id, organizationId),\n        ),\n      )\n      .returning({ id: machines.id });\n\n    if (!updatedMachine) {\n      return {\n        success: false,\n        error: \"Resource not found or access denied\",\n      };\n    }\n\n    // Cache invalidation\n    revalidateTag(`machine-${machineId}`);\n    revalidateTag(`machines-${organizationId}`);\n    revalidatePath(`/machines/${machineId}`);\n    revalidatePath(\"/machines\");\n\n    return { success: true, data: { qrCodeUrl: qrCode.dataUrl } };\n  } catch (error) {\n    console.error(\"Regenerate QR code error:\", error);\n    return {\n      success: false,\n      error: \"Failed to regenerate QR code. Please try again.\",\n    };\n  }\n}\n\nexport async function bulkGenerateQRCodesAction(\n  formData: FormData,\n): Promise<ActionResult<{ processedCount: number }>> {\n  const { organization } = await requireMemberAccess();\n  const organizationId = organization.id;\n\n  const machineIdsString = formData.get(\"machineIds\") as string;\n  const machineIds = machineIdsString ? machineIdsString.split(\",\") : [];\n\n  const result = BulkQRGenerateSchema.safeParse({ machineIds });\n\n  if (!result.success) {\n    return {\n      success: false,\n      error: \"Validation failed\",\n    };\n  }\n\n  try {\n    let processedCount = 0;\n\n    // Process machines in batches to avoid overwhelming the system\n    const batchSize = 10;\n    for (let i = 0; i < result.data.machineIds.length; i += batchSize) {\n      const batch = result.data.machineIds.slice(i, i + batchSize);\n\n      // Process each machine in the batch\n      for (const machineId of batch) {\n        try {\n          // Validate machine ID before processing\n          if (!validateQRCodeParams(machineId)) {\n            console.error(`Invalid machine ID format: ${String(machineId)}`);\n            continue;\n          }\n\n          // Generate actual QR code\n          const qrCode = await generateMachineQRCode(machineId);\n\n          const [updatedMachine] = await db\n            .update(machines)\n            .set({\n              qr_code_id: qrCode.id,\n              qr_code_url: qrCode.dataUrl, // Store the base64 data URL\n              qr_code_generated_at: new Date(),\n              updated_at: new Date(),\n            })\n            .where(\n              and(\n                eq(machines.id, machineId),\n                eq(machines.organization_id, organizationId),\n              ),\n            )\n            .returning({ id: machines.id });\n\n          if (updatedMachine) {\n            processedCount++;\n          }\n        } catch (error) {\n          console.error(\n            `Failed to generate QR for machine ${String(machineId)}:`,\n            error,\n          );\n        }\n      }\n    }\n\n    // Cache invalidation\n    revalidateTag(`machines-${organizationId}`);\n    revalidatePath(\"/machines\");\n\n    return { success: true, data: { processedCount } };\n  } catch (error) {\n    console.error(\"Bulk QR generation error:\", error);\n    return {\n      success: false,\n      error: \"Failed to generate QR codes. Please try again.\",\n    };\n  }\n}\n\n// ================================\n// HELPER FUNCTIONS\n// ================================\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/actions/notification-actions.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":129,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":129,"endColumn":38}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Notification Server Actions (2025 Performance Patterns)\n * Form handling and mutations for notification management with React 19 cache API\n */\n\n\"use server\";\n\nimport { revalidatePath, revalidateTag } from \"next/cache\";\nimport { z } from \"zod\";\nimport { and, eq, inArray } from \"drizzle-orm\";\nimport { notifications } from \"~/server/db/schema\";\nimport { db } from \"~/lib/dal/shared\";\nimport {\n  requireAuthContextWithRole,\n  validateFormData,\n  actionSuccess,\n  actionError,\n  runAfterResponse,\n  type ActionResult,\n} from \"./shared\";\n\n// Validation schemas\nconst markAsReadSchema = z.object({\n  notificationId: z\n    .string()\n    .refine(\n      (val) =>\n        /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(\n          val,\n        ),\n      { message: \"Invalid notification ID\" },\n    ),\n});\n\nconst bulkMarkAsReadSchema = z.object({\n  notificationIds: z\n    .array(\n      z\n        .string()\n        .refine(\n          (val) =>\n            /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(\n              val,\n            ),\n          { message: \"Invalid notification ID\" },\n        ),\n    )\n    .min(1, \"No notifications selected\")\n    .max(50, \"Cannot update more than 50 notifications at once\"),\n});\n\nconst markAllAsReadSchema = z.object({\n  confirm: z.literal(\"true\", { message: \"Confirmation required\" }),\n});\n\n/**\n * Mark single notification as read via Server Action (React 19 useActionState compatible)\n */\nexport async function markNotificationAsReadAction(\n  _prevState: ActionResult<{ success: boolean }> | null,\n  formData: FormData,\n): Promise<ActionResult<{ success: boolean }>> {\n  try {\n    const { user, organizationId } = await requireAuthContextWithRole();\n\n    // Enhanced validation\n    const validation = validateFormData(formData, markAsReadSchema);\n    if (!validation.success) {\n      return validation;\n    }\n\n    // Update notification with proper access control\n    const [updatedNotification] = await db\n      .update(notifications)\n      .set({ read: true })\n      .where(\n        and(\n          eq(notifications.id, validation.data.notificationId),\n          eq(notifications.user_id, user.id),\n          eq(notifications.organization_id, organizationId),\n        ),\n      )\n      .returning({ id: notifications.id });\n\n    if (!updatedNotification) {\n      return actionError(\"Notification not found or access denied\");\n    }\n\n    // Granular cache invalidation\n    revalidatePath(\"/notifications\");\n    revalidateTag(`notifications-${user.id}`);\n    revalidateTag(`notification-count-${user.id}`);\n\n    // Background processing\n    runAfterResponse(() => {\n      console.log(\n        `Notification ${validation.data.notificationId} marked as read by ${user.email ?? \"unknown\"}`,\n      );\n      return Promise.resolve();\n    });\n\n    return actionSuccess({ success: true }, \"Notification marked as read\");\n  } catch (error) {\n    console.error(\"Mark notification as read error:\", error);\n    return actionError(\n      error instanceof Error\n        ? error.message\n        : \"Failed to mark notification as read\",\n    );\n  }\n}\n\n/**\n * Mark multiple notifications as read via Server Action (React 19 useActionState compatible)\n */\nexport async function bulkMarkNotificationsAsReadAction(\n  _prevState: ActionResult<{ updatedCount: number }> | null,\n  formData: FormData,\n): Promise<ActionResult<{ updatedCount: number }>> {\n  try {\n    const { user, organizationId } = await requireAuthContextWithRole();\n\n    // Parse JSON data from form\n    const jsonData = formData.get(\"data\") as string;\n    if (!jsonData) {\n      return actionError(\"No data provided for bulk update\");\n    }\n\n    const data = JSON.parse(jsonData);\n    const validation = bulkMarkAsReadSchema.safeParse(data);\n    if (!validation.success) {\n      return actionError(\"Invalid bulk update data\");\n    }\n\n    const { notificationIds } = validation.data;\n\n    // Bulk update with proper access control\n    const updatedNotifications = await db\n      .update(notifications)\n      .set({ read: true })\n      .where(\n        and(\n          eq(notifications.user_id, user.id),\n          eq(notifications.organization_id, organizationId),\n          inArray(notifications.id, notificationIds),\n          eq(notifications.read, false), // Only update unread notifications\n        ),\n      )\n      .returning({ id: notifications.id });\n\n    // Cache invalidation\n    revalidatePath(\"/notifications\");\n    revalidateTag(`notifications-${user.id}`);\n    revalidateTag(`notification-count-${user.id}`);\n\n    // Background processing\n    runAfterResponse(() => {\n      console.log(\n        `Bulk marked ${String(updatedNotifications.length)} notifications as read by ${user.email ?? \"unknown\"}`,\n      );\n      return Promise.resolve();\n    });\n\n    return actionSuccess(\n      { updatedCount: updatedNotifications.length },\n      `Successfully marked ${String(updatedNotifications.length)} notification${updatedNotifications.length !== 1 ? \"s\" : \"\"} as read`,\n    );\n  } catch (error) {\n    console.error(\"Bulk mark notifications as read error:\", error);\n    return actionError(\n      error instanceof Error\n        ? error.message\n        : \"Failed to bulk mark notifications as read\",\n    );\n  }\n}\n\n/**\n * Mark all notifications as read via Server Action (React 19 useActionState compatible)\n */\nexport async function markAllNotificationsAsReadAction(\n  _prevState: ActionResult<{ updatedCount: number }> | null,\n  formData: FormData,\n): Promise<ActionResult<{ updatedCount: number }>> {\n  try {\n    const { user, organizationId } = await requireAuthContextWithRole();\n\n    // Enhanced validation\n    const validation = validateFormData(formData, markAllAsReadSchema);\n    if (!validation.success) {\n      return validation;\n    }\n\n    // Mark all unread notifications as read\n    const updatedNotifications = await db\n      .update(notifications)\n      .set({ read: true })\n      .where(\n        and(\n          eq(notifications.user_id, user.id),\n          eq(notifications.organization_id, organizationId),\n          eq(notifications.read, false),\n        ),\n      )\n      .returning({ id: notifications.id });\n\n    // Cache invalidation\n    revalidatePath(\"/notifications\");\n    revalidateTag(`notifications-${user.id}`);\n    revalidateTag(`notification-count-${user.id}`);\n\n    // Background processing\n    runAfterResponse(() => {\n      console.log(\n        `All notifications marked as read by ${user.email ?? \"unknown\"} (${String(updatedNotifications.length)} notifications)`,\n      );\n      return Promise.resolve();\n    });\n\n    return actionSuccess(\n      { updatedCount: updatedNotifications.length },\n      `Successfully marked all ${String(updatedNotifications.length)} notification${updatedNotifications.length !== 1 ? \"s\" : \"\"} as read`,\n    );\n  } catch (error) {\n    console.error(\"Mark all notifications as read error:\", error);\n    return actionError(\n      error instanceof Error\n        ? error.message\n        : \"Failed to mark all notifications as read\",\n    );\n  }\n}\n\n/**\n * Mark notification as unread (for testing or undo functionality)\n */\nexport async function markNotificationAsUnreadAction(\n  _prevState: ActionResult<{ success: boolean }> | null,\n  formData: FormData,\n): Promise<ActionResult<{ success: boolean }>> {\n  try {\n    const { user, organizationId } = await requireAuthContextWithRole();\n\n    const validation = validateFormData(formData, markAsReadSchema);\n    if (!validation.success) {\n      return validation;\n    }\n\n    // Update notification with proper access control\n    const [updatedNotification] = await db\n      .update(notifications)\n      .set({ read: false })\n      .where(\n        and(\n          eq(notifications.id, validation.data.notificationId),\n          eq(notifications.user_id, user.id),\n          eq(notifications.organization_id, organizationId),\n        ),\n      )\n      .returning({ id: notifications.id });\n\n    if (!updatedNotification) {\n      return actionError(\"Notification not found or access denied\");\n    }\n\n    // Cache invalidation\n    revalidatePath(\"/notifications\");\n    revalidateTag(`notifications-${user.id}`);\n    revalidateTag(`notification-count-${user.id}`);\n\n    // Background processing\n    runAfterResponse(() => {\n      console.log(\n        `Notification ${validation.data.notificationId} marked as unread by ${user.email ?? \"unknown\"}`,\n      );\n      return Promise.resolve();\n    });\n\n    return actionSuccess({ success: true }, \"Notification marked as unread\");\n  } catch (error) {\n    console.error(\"Mark notification as unread error:\", error);\n    return actionError(\n      error instanceof Error\n        ? error.message\n        : \"Failed to mark notification as unread\",\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/actions/organization-actions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/actions/shared.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[887,890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[887,890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":105,"column":7,"nodeType":"MemberExpression","endLine":105,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":144,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4109,4112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4109,4112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":146,"column":7,"nodeType":"MemberExpression","endLine":146,"endColumn":15},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":162,"column":7,"nodeType":"MemberExpression","endLine":162,"endColumn":16},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":163,"column":7,"nodeType":"MemberExpression","endLine":163,"endColumn":16},{"ruleId":"@typescript-eslint/use-unknown-in-catch-callback-variable","severity":2,"message":"Prefer the safe `: unknown` for a `catch` callback variable.","line":178,"column":17,"nodeType":"Identifier","messageId":"useUnknown","endLine":178,"endColumn":22,"suggestions":[{"messageId":"addUnknownTypeAnnotationSuggestion","fix":{"range":[5001,5001],"text":": unknown"},"desc":"Add an explicit `: unknown` type annotation to the rejection callback variable."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Shared utilities for Server Actions (2025 Patterns)\n * Form handling and mutations for RSC architecture with React 19 cache API\n */\n\nimport { redirect } from \"next/navigation\";\nimport { revalidatePath, revalidateTag } from \"next/cache\";\nimport { cache } from \"react\"; // React 19 cache API\n// TODO: Enable when Next.js supports unstable_after in current version\n// import { unstable_after } from \"next/server\"; // Background tasks\nimport type { z } from \"zod\";\nimport { createClient } from \"~/lib/supabase/server\";\nimport { requireMemberAccess } from \"~/lib/organization-context\";\nimport { requirePermission as baseRequirePermission } from \"~/server/auth/permissions\";\nimport { requireAuthContextWithRole, db } from \"~/lib/dal/shared\";\nexport { requireAuthContextWithRole };\n\n/**\n * Server Action result types (React 19 useActionState compatible)\n */\nexport type ActionResult<T = any> =\n  | { success: true; data: T; message?: string }\n  | { success: false; error: string; fieldErrors?: Record<string, string[]> };\n\n/**\n * Get authenticated user for Server Actions (React 19 cached)\n * Uses cache() to prevent duplicate auth checks within same request\n */\nexport const getActionAuthContext = cache(async () => {\n  // Fetch full AuthUser first to preserve redirect behavior for unauthenticated users\n  const supabase = await createClient();\n  const {\n    data: { user },\n    error,\n  } = await supabase.auth.getUser();\n\n  if (error || !user) {\n    redirect(\"/sign-in\");\n  }\n\n  // Validate org access using secure subdomain + membership check\n  const { organization } = await requireMemberAccess();\n\n  return { user, organizationId: organization.id };\n});\n\n/**\n * Alias for DAL compatibility (same as getServerAuthContext)\n */\nexport const getServerAuthContext = getActionAuthContext;\n\n/**\n * Combined auth + permission helper for Server Actions.\n * Ensures user is authenticated, has org context and required permission.\n */\nexport async function requireActionAuthContextWithPermission(\n  permission: string,\n): Promise<{\n  user: { id: string };\n  organizationId: string;\n  membership: { role_id?: string | null };\n}> {\n  const { user, organizationId, membership } =\n    await requireAuthContextWithRole();\n  await baseRequirePermission({ roleId: membership.role_id }, permission, db);\n  return { user, organizationId, membership };\n}\n\nexport type ActionAuthContextWithRole = Awaited<\n  ReturnType<typeof requireAuthContextWithRole>\n>;\n\n/**\n * Safe FormData extraction with validation\n */\nexport function getFormField(\n  formData: FormData,\n  field: string,\n  required = false,\n): string | null {\n  const value = formData.get(field);\n\n  if (\n    required &&\n    (!value || typeof value !== \"string\" || value.trim() === \"\")\n  ) {\n    throw new Error(`${field} is required`);\n  }\n\n  return typeof value === \"string\" ? value.trim() : null;\n}\n\n/**\n * Validate required fields from FormData\n */\nexport function validateRequiredFields(\n  formData: FormData,\n  requiredFields: string[],\n): Record<string, string> {\n  const result: Record<string, string> = {};\n\n  for (const field of requiredFields) {\n    const value = getFormField(formData, field, true);\n    if (value) {\n      result[field] = value;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Enhanced result helpers for React 19 patterns\n */\nexport function actionSuccess<T>(data: T, message?: string): ActionResult<T> {\n  const result: ActionResult<T> = { success: true, data };\n  if (message) {\n    result.message = message;\n  }\n  return result;\n}\n\nexport function actionError(\n  error: string,\n  fieldErrors?: Record<string, string[]>,\n): ActionResult<never> {\n  const result: ActionResult<never> = { success: false, error };\n  if (fieldErrors) {\n    result.fieldErrors = fieldErrors;\n  }\n  return result;\n}\n\n/**\n * Enhanced form validation with Zod integration\n */\nexport function validateFormData<T>(\n  formData: FormData,\n  schema: z.ZodType<T>,\n): ActionResult<T> {\n  const rawData = Object.fromEntries(formData.entries());\n\n  // Convert empty strings to undefined for optional fields\n  const processedData = Object.entries(rawData).reduce<Record<string, any>>(\n    (acc, [key, value]) => {\n      acc[key] = value === \"\" ? undefined : value;\n      return acc;\n    },\n    {},\n  );\n\n  const result = schema.safeParse(processedData);\n\n  if (result.success) {\n    return actionSuccess(result.data);\n  }\n\n  // Format Zod errors for form display\n  const fieldErrors = result.error.issues.reduce<Record<string, string[]>>(\n    (acc: Record<string, string[]>, issue) => {\n      const path = issue.path.join(\".\");\n      acc[path] ??= [];\n      acc[path].push(issue.message);\n      return acc;\n    },\n    {},\n  );\n\n  return actionError(\"Validation failed\", fieldErrors);\n}\n\n/**\n * Background task runner (runs after response sent to user)\n * TODO: Enable when Next.js supports unstable_after\n */\nexport function runAfterResponse(task: () => Promise<void>): void {\n  // For now, run immediately (in production, would use unstable_after)\n  task().catch((error) => {\n    console.error(\"Background task failed:\", error);\n  });\n}\n\n/**\n * Cache revalidation helpers\n */\nexport function revalidateIssues(): void {\n  revalidatePath(\"/issues\");\n  revalidateTag(\"issues\");\n}\n\nexport function revalidateMachines(): void {\n  revalidatePath(\"/machines\");\n  revalidateTag(\"machines\");\n}\n\nexport function revalidateDashboard(): void {\n  revalidatePath(\"/dashboard\");\n  revalidateTag(\"dashboard\");\n}\n\n/**\n * Wrapper exporting a membership-aware permission check for Actions code.\n * Accepts DAL membership (snake_case), adapts to permissions API shape.\n */\nexport async function requirePermission(\n  membership: { role_id?: string | null } | null,\n  permission: string,\n  db: Parameters<typeof baseRequirePermission>[2],\n): Promise<void> {\n  await baseRequirePermission(\n    { roleId: membership?.role_id ?? null },\n    permission,\n    db,\n  );\n}\n\n/**\n * Wrapper for Server Actions with comprehensive error handling\n */\nexport async function withActionErrorHandling<T>(\n  action: () => Promise<T>,\n): Promise<ActionResult<T>> {\n  try {\n    const data = await action();\n    return actionSuccess(data);\n  } catch (error) {\n    console.error(\"Server Action error:\", error);\n    return actionError(\n      error instanceof Error ? error.message : \"An error occurred\",\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/actions/shared.unit.test.ts","messages":[{"ruleId":"@typescript-eslint/only-throw-error","severity":2,"message":"Expected an error object to be thrown.","line":239,"column":15,"nodeType":"Literal","messageId":"object","endLine":239,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Server Action Utilities Unit Tests - Archetype 1\n * Pure function testing with no external dependencies\n */\n\nimport { describe, expect, it } from \"vitest\";\nimport { z } from \"zod\";\nimport {\n  actionSuccess,\n  actionError,\n  validateFormData,\n  getFormField,\n  validateRequiredFields,\n  withActionErrorHandling,\n} from \"./shared\";\n\ndescribe(\"Server Action Utilities (Unit Tests - Archetype 1)\", () => {\n  describe(\"actionSuccess\", () => {\n    it(\"creates successful result with data\", () => {\n      const data = { id: \"123\", name: \"Test\" };\n      const result = actionSuccess(data);\n\n      expect(result).toEqual({\n        success: true,\n        data: { id: \"123\", name: \"Test\" },\n      });\n    });\n\n    it(\"creates successful result with data and message\", () => {\n      const data = { id: \"123\" };\n      const message = \"Operation completed successfully\";\n      const result = actionSuccess(data, message);\n\n      expect(result).toEqual({\n        success: true,\n        data: { id: \"123\" },\n        message: \"Operation completed successfully\",\n      });\n    });\n  });\n\n  describe(\"actionError\", () => {\n    it(\"creates error result with message\", () => {\n      const result = actionError(\"Something went wrong\");\n\n      expect(result).toEqual({\n        success: false,\n        error: \"Something went wrong\",\n      });\n    });\n\n    it(\"creates error result with field errors\", () => {\n      const fieldErrors = {\n        title: [\"Title is required\"],\n        email: [\"Invalid email format\"],\n      };\n      const result = actionError(\"Validation failed\", fieldErrors);\n\n      expect(result).toEqual({\n        success: false,\n        error: \"Validation failed\",\n        fieldErrors: {\n          title: [\"Title is required\"],\n          email: [\"Invalid email format\"],\n        },\n      });\n    });\n  });\n\n  describe(\"validateFormData\", () => {\n    const testSchema = z.object({\n      title: z.string().min(1, \"Title is required\"),\n      description: z.string().optional(),\n      priority: z.enum([\"low\", \"medium\", \"high\"]).default(\"medium\"),\n    });\n\n    it(\"validates valid form data successfully\", () => {\n      const formData = new FormData();\n      formData.append(\"title\", \"Test Issue\");\n      formData.append(\"description\", \"Test description\");\n      formData.append(\"priority\", \"high\");\n\n      const result = validateFormData(formData, testSchema);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data).toEqual({\n          title: \"Test Issue\",\n          description: \"Test description\",\n          priority: \"high\",\n        });\n      }\n    });\n\n    it(\"handles optional fields correctly\", () => {\n      const formData = new FormData();\n      formData.append(\"title\", \"Test Issue\");\n      // description omitted\n\n      const result = validateFormData(formData, testSchema);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data).toEqual({\n          title: \"Test Issue\",\n          priority: \"medium\", // default value\n        });\n      }\n    });\n\n    it(\"converts empty strings to undefined for optional fields\", () => {\n      const formData = new FormData();\n      formData.append(\"title\", \"Test Issue\");\n      formData.append(\"description\", \"\"); // empty string\n\n      const result = validateFormData(formData, testSchema);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.description).toBeUndefined();\n      }\n    });\n\n    it(\"returns validation errors for invalid data\", () => {\n      const formData = new FormData();\n      // title missing (required field)\n      formData.append(\"priority\", \"invalid\"); // invalid enum value\n\n      const result = validateFormData(formData, testSchema);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        expect(result.error).toBe(\"Validation failed\");\n        expect(result.fieldErrors).toBeDefined();\n        expect(result.fieldErrors?.title).toContain(\n          \"Invalid input: expected string, received undefined\",\n        );\n        expect(result.fieldErrors?.priority).toBeDefined();\n      }\n    });\n  });\n\n  describe(\"getFormField\", () => {\n    it(\"extracts string field from FormData\", () => {\n      const formData = new FormData();\n      formData.append(\"title\", \"Test Title\");\n\n      const result = getFormField(formData, \"title\");\n      expect(result).toBe(\"Test Title\");\n    });\n\n    it(\"returns null for missing optional field\", () => {\n      const formData = new FormData();\n\n      const result = getFormField(formData, \"missing\");\n      expect(result).toBeNull();\n    });\n\n    it(\"throws error for missing required field\", () => {\n      const formData = new FormData();\n\n      expect(() => {\n        getFormField(formData, \"required\", true);\n      }).toThrow(\"required is required\");\n    });\n\n    it(\"trims whitespace from field values\", () => {\n      const formData = new FormData();\n      formData.append(\"title\", \"  Test Title  \");\n\n      const result = getFormField(formData, \"title\");\n      expect(result).toBe(\"Test Title\");\n    });\n\n    it(\"treats empty string as missing for required fields\", () => {\n      const formData = new FormData();\n      formData.append(\"title\", \"   \"); // only whitespace\n\n      expect(() => {\n        getFormField(formData, \"title\", true);\n      }).toThrow(\"title is required\");\n    });\n  });\n\n  describe(\"validateRequiredFields\", () => {\n    it(\"extracts all required fields successfully\", () => {\n      const formData = new FormData();\n      formData.append(\"title\", \"Test Title\");\n      formData.append(\"machineId\", \"machine-123\");\n\n      const result = validateRequiredFields(formData, [\"title\", \"machineId\"]);\n\n      expect(result).toEqual({\n        title: \"Test Title\",\n        machineId: \"machine-123\",\n      });\n    });\n\n    it(\"throws error for missing required field\", () => {\n      const formData = new FormData();\n      formData.append(\"title\", \"Test Title\");\n      // machineId missing\n\n      expect(() => {\n        validateRequiredFields(formData, [\"title\", \"machineId\"]);\n      }).toThrow(\"machineId is required\");\n    });\n  });\n\n  describe(\"withActionErrorHandling\", () => {\n    it(\"wraps successful action result\", async () => {\n      const successAction = async () => {\n        return { id: \"123\", name: \"Test\" };\n      };\n\n      const result = await withActionErrorHandling(successAction);\n\n      expect(result).toEqual({\n        success: true,\n        data: { id: \"123\", name: \"Test\" },\n      });\n    });\n\n    it(\"catches and wraps action errors\", async () => {\n      const failingAction = async () => {\n        throw new Error(\"Something went wrong\");\n      };\n\n      const result = await withActionErrorHandling(failingAction);\n\n      expect(result).toEqual({\n        success: false,\n        error: \"Something went wrong\",\n      });\n    });\n\n    it(\"handles non-Error exceptions\", async () => {\n      const failingAction = async () => {\n        throw \"String error\";\n      };\n\n      const result = await withActionErrorHandling(failingAction);\n\n      expect(result).toEqual({\n        success: false,\n        error: \"An error occurred\",\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/auth/dev-auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/colors/material-theme-generator.ts","messages":[{"ruleId":"no-restricted-properties","severity":2,"message":"'process.env' is restricted from being used. Use the 'env' object from '~/env.js' instead of 'process.env'. It is validated and type-safe. See src/env.js for available variables and T3 Env documentation: https://env.t3.gg/docs/introduction","line":255,"column":38,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":255,"endColumn":49}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Material Design 3 Color Theme Generator\n *\n * Generates a complete Material Design 3 color palette from a purple source color\n * using Google's official Material Color Utilities with the 2025 specification.\n */\n\nimport type { Scheme } from \"@material/material-color-utilities\";\nimport {\n  argbFromHex,\n  themeFromSourceColor,\n  hexFromArgb,\n} from \"@material/material-color-utilities\";\n\n// Extended Scheme interface for additional surface container properties\n// that may be available in newer versions of Material Color Utilities\ninterface ExtendedScheme extends Scheme {\n  surfaceContainer?: number;\n  surfaceContainerHigh?: number;\n  surfaceContainerHighest?: number;\n  surfaceContainerLow?: number;\n  surfaceContainerLowest?: number;\n}\n\nexport interface MaterialColors {\n  // Primary color family\n  primary: string;\n  onPrimary: string;\n  primaryContainer: string;\n  onPrimaryContainer: string;\n\n  // Secondary color family\n  secondary: string;\n  onSecondary: string;\n  secondaryContainer: string;\n  onSecondaryContainer: string;\n\n  // Tertiary color family\n  tertiary: string;\n  onTertiary: string;\n  tertiaryContainer: string;\n  onTertiaryContainer: string;\n\n  // Error color family\n  error: string;\n  onError: string;\n  errorContainer: string;\n  onErrorContainer: string;\n\n  // Surface color family (key for navigation backgrounds)\n  surface: string;\n  onSurface: string;\n  surfaceVariant: string;\n  onSurfaceVariant: string;\n  surfaceContainer: string;\n  surfaceContainerHigh: string;\n  surfaceContainerHighest: string;\n  surfaceContainerLow: string;\n  surfaceContainerLowest: string;\n\n  // Additional colors\n  outline: string;\n  outlineVariant: string;\n  shadow: string;\n  scrim: string;\n  inverseSurface: string;\n  inverseOnSurface: string;\n  inversePrimary: string;\n  background: string;\n  onBackground: string;\n}\n\nexport interface MaterialTheme {\n  light: MaterialColors;\n  dark: MaterialColors;\n}\n\n/**\n * Convert Material Design 3 Scheme to our MaterialColors interface\n * Handles potential undefined properties gracefully\n */\nfunction schemeToColors(scheme: Scheme): MaterialColors {\n  // Type guard to check if scheme has extended surface container properties\n  const extendedScheme = scheme as ExtendedScheme;\n\n  return {\n    primary: hexFromArgb(scheme.primary),\n    onPrimary: hexFromArgb(scheme.onPrimary),\n    primaryContainer: hexFromArgb(scheme.primaryContainer),\n    onPrimaryContainer: hexFromArgb(scheme.onPrimaryContainer),\n\n    secondary: hexFromArgb(scheme.secondary),\n    onSecondary: hexFromArgb(scheme.onSecondary),\n    secondaryContainer: hexFromArgb(scheme.secondaryContainer),\n    onSecondaryContainer: hexFromArgb(scheme.onSecondaryContainer),\n\n    tertiary: hexFromArgb(scheme.tertiary),\n    onTertiary: hexFromArgb(scheme.onTertiary),\n    tertiaryContainer: hexFromArgb(scheme.tertiaryContainer),\n    onTertiaryContainer: hexFromArgb(scheme.onTertiaryContainer),\n\n    error: hexFromArgb(scheme.error),\n    onError: hexFromArgb(scheme.onError),\n    errorContainer: hexFromArgb(scheme.errorContainer),\n    onErrorContainer: hexFromArgb(scheme.onErrorContainer),\n\n    surface: hexFromArgb(scheme.surface),\n    onSurface: hexFromArgb(scheme.onSurface),\n    surfaceVariant: hexFromArgb(scheme.surfaceVariant),\n    onSurfaceVariant: hexFromArgb(scheme.onSurfaceVariant),\n\n    // Handle potentially undefined surface container properties\n    // Fall back to computed alternatives if not available\n    surfaceContainer: extendedScheme.surfaceContainer\n      ? hexFromArgb(extendedScheme.surfaceContainer)\n      : hexFromArgb(scheme.surface), // fallback\n    surfaceContainerHigh: extendedScheme.surfaceContainerHigh\n      ? hexFromArgb(extendedScheme.surfaceContainerHigh)\n      : hexFromArgb(scheme.surfaceVariant), // fallback\n    surfaceContainerHighest: extendedScheme.surfaceContainerHighest\n      ? hexFromArgb(extendedScheme.surfaceContainerHighest)\n      : hexFromArgb(scheme.surfaceVariant), // fallback\n    surfaceContainerLow: extendedScheme.surfaceContainerLow\n      ? hexFromArgb(extendedScheme.surfaceContainerLow)\n      : hexFromArgb(scheme.surface), // fallback\n    surfaceContainerLowest: extendedScheme.surfaceContainerLowest\n      ? hexFromArgb(extendedScheme.surfaceContainerLowest)\n      : hexFromArgb(scheme.surface), // fallback\n\n    outline: hexFromArgb(scheme.outline),\n    outlineVariant: hexFromArgb(scheme.outlineVariant),\n    shadow: hexFromArgb(scheme.shadow),\n    scrim: hexFromArgb(scheme.scrim),\n    inverseSurface: hexFromArgb(scheme.inverseSurface),\n    inverseOnSurface: hexFromArgb(scheme.inverseOnSurface),\n    inversePrimary: hexFromArgb(scheme.inversePrimary),\n    background: hexFromArgb(scheme.background),\n    onBackground: hexFromArgb(scheme.onBackground),\n  };\n}\n\n/**\n * Generate Material Design 3 theme from a source color\n *\n * @param sourceColorHex - Source color in hex format (e.g., '#6750A4')\n * @returns Complete Material Design 3 theme with light and dark variants\n */\nexport function generateMaterialTheme(sourceColorHex: string): MaterialTheme {\n  // Convert hex to ARGB format required by Material Color Utilities\n  const sourceColorArgb = argbFromHex(sourceColorHex);\n\n  // Generate theme using Material Design 3 algorithms\n  const theme = themeFromSourceColor(sourceColorArgb);\n\n  return {\n    light: schemeToColors(theme.schemes.light),\n    dark: schemeToColors(theme.schemes.dark),\n  };\n}\n\n/**\n * Convert hex color to HSL format for CSS variables\n *\n * @param hex - Hex color (e.g., '#6750A4')\n * @returns HSL string without hsl() wrapper (e.g., '247 53% 70%')\n */\nexport function hexToHslString(hex: string): string {\n  // Remove # if present\n  hex = hex.replace(\"#\", \"\");\n\n  // Convert to RGB\n  const r = parseInt(hex.substring(0, 2), 16) / 255;\n  const g = parseInt(hex.substring(2, 4), 16) / 255;\n  const b = parseInt(hex.substring(4, 6), 16) / 255;\n\n  // Find min, max, and delta\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const delta = max - min;\n\n  // Calculate lightness\n  const l = (max + min) / 2;\n\n  // Calculate saturation\n  let s = 0;\n  if (delta !== 0) {\n    s = l > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n  }\n\n  // Calculate hue\n  let h = 0;\n  if (delta !== 0) {\n    switch (max) {\n      case r:\n        h = ((g - b) / delta) % 6;\n        break;\n      case g:\n        h = (b - r) / delta + 2;\n        break;\n      case b:\n        h = (r - g) / delta + 4;\n        break;\n    }\n  }\n  h = Math.round(h * 60);\n  if (h < 0) h += 360;\n\n  // Convert to percentages and round\n  const hslH = Math.round(h);\n  const hslS = Math.round(s * 100);\n  const hslL = Math.round(l * 100);\n\n  return `${String(hslH)} ${String(hslS)}% ${String(hslL)}%`;\n}\n\n/**\n * Generate CSS custom properties for the Material theme\n *\n * @param theme - Material theme generated from generateMaterialTheme\n * @returns CSS custom properties as strings\n */\nexport function generateCssCustomProperties(theme: MaterialTheme): {\n  light: string;\n  dark: string;\n} {\n  const lightTheme = Object.entries(theme.light)\n    .map(\n      ([key, value]) =>\n        `  --${key.replace(/([A-Z])/g, \"-$1\").toLowerCase()}: ${hexToHslString(value as string)};`,\n    )\n    .join(\"\\n\");\n\n  const darkTheme = Object.entries(theme.dark)\n    .map(\n      ([key, value]) =>\n        `  --${key.replace(/([A-Z])/g, \"-$1\").toLowerCase()}: ${hexToHslString(value as string)};`,\n    )\n    .join(\"\\n\");\n\n  return {\n    light: lightTheme,\n    dark: darkTheme,\n  };\n}\n\n// PinPoint-specific purple source color (similar to current primary but optimized for Material 3)\nexport const PINPOINT_PURPLE_SOURCE = \"#6750A4\"; // Material Design signature purple\n\n// Generate the PinPoint Material theme\nexport const pinpointMaterialTheme = generateMaterialTheme(\n  PINPOINT_PURPLE_SOURCE,\n);\n\n// Log the generated theme for development purposes\nif (typeof window === \"undefined\" && process.env.NODE_ENV === \"development\") {\n  console.log(\"🎨 Generated PinPoint Material Design 3 Theme:\", {\n    source: PINPOINT_PURPLE_SOURCE,\n    lightSurface: pinpointMaterialTheme.light.surface,\n    lightOnSurface: pinpointMaterialTheme.light.onSurface,\n    lightSurfaceContainer: pinpointMaterialTheme.light.surfaceContainer,\n    lightPrimary: pinpointMaterialTheme.light.primary,\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/comments/accessValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/common/__tests__/inputValidation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/common/inputValidation.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":405,"column":26,"nodeType":"MemberExpression","endLine":405,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Reusable Input Validation Schemas\n *\n * Common Zod validation patterns extracted from tRPC router procedures.\n * Provides consistent, testable, and reusable input validation across the application.\n *\n * Extracted from patterns in:\n * - location.ts: entity CRUD patterns\n * - machine.core.ts: complex filtering and updates\n * - issue.core.ts: multi-field validation and search\n * - admin.ts, role.ts: user management patterns\n * - And 20+ other routers with consistent validation needs\n */\n\nimport { z } from \"zod\";\nimport {\n  idSchema,\n  nameSchema,\n  optionalNameSchema,\n  descriptionSchema,\n  searchQuerySchema,\n  titleSchema as issueTitleSchema,\n  optionalTitleSchema as optionalIssueTitleSchema,\n  nameSchema as submitterNameSchema,\n} from \"~/lib/validation/schemas\";\n\n// ============================================================================\n// BASIC ID VALIDATION SCHEMAS\n// ============================================================================\n\n/**\n * Standard entity ID validation\n * Pattern: Used in 50+ procedures across all routers\n * Examples: getById, update, delete operations\n */\nexport const entityIdSchema = z.object({\n  id: idSchema,\n});\n\n/**\n * Machine-specific ID validation\n * Pattern: Used in machine.core.ts, machine.owner.ts, machine.location.ts, qrCode.ts\n */\nexport const machineIdSchema = z.object({\n  machineId: idSchema,\n});\n\n/**\n * Location-specific ID validation\n * Pattern: Used in location.ts, machine.core.ts, pinballMap.ts\n */\nexport const locationIdSchema = z.object({\n  locationId: idSchema,\n});\n\n/**\n * User-specific ID validation\n * Pattern: Used in admin.ts, role.ts, user.ts, issue assignment\n */\nexport const userIdSchema = z.object({\n  userId: idSchema,\n});\n\n/**\n * Issue-specific ID validation\n * Pattern: Used in issue.core.ts, issue.comment.ts, issue.attachment.ts\n */\nexport const issueIdSchema = z.object({\n  issueId: idSchema,\n});\n\n// ============================================================================\n// TEXT VALIDATION SCHEMAS\n// ============================================================================\n\n/**\n * Standard name validation for entities\n * Pattern: Used in location.ts, machine.core.ts, role creation\n */\n// nameSchema re-exported from centralized validation\n\n/**\n * Issue title validation\n * Pattern: Specific to issue.core.ts create/update operations\n */\n// issueTitleSchema re-exported from centralized validation\n\n/**\n * Description validation (longer text fields)\n * Pattern: Used in issue.core.ts, comment creation\n */\n// descriptionSchema re-exported from centralized validation\n\n/**\n * Search query validation\n * Pattern: Used in filtering operations across multiple routers\n */\n// searchQuerySchema re-exported from centralized validation\n\n/**\n * Submitter name validation for anonymous issue reporting\n * Pattern: Used in public issue creation endpoints\n */\n// submitterNameSchema re-exported from centralized validation\n\n// ============================================================================\n// NUMERIC VALIDATION SCHEMAS\n// ============================================================================\n\n/**\n * Positive integer validation\n * Pattern: Used for PinballMap IDs, pagination limits\n */\nexport const positiveIntegerSchema = z\n  .number()\n  .int()\n  .positive(\"Must be a positive integer\");\n\n/**\n * Optional positive integer\n */\nexport const optionalPositiveIntegerSchema = positiveIntegerSchema.optional();\n\n/**\n * PinballMap ID validation\n * Pattern: Used in location.ts for PinballMap integration\n */\nexport const pinballMapIdSchema = z.object({\n  pinballMapId: positiveIntegerSchema,\n});\n\n// ============================================================================\n// ARRAY VALIDATION SCHEMAS\n// ============================================================================\n\n/**\n * Array of string IDs validation\n * Pattern: Used in filtering operations (status IDs, role IDs, etc.)\n */\nexport const stringIdArraySchema = z.array(idSchema).optional();\n\n/**\n * Status IDs filter validation\n * Pattern: Used in issue.core.ts filtering\n */\nexport const statusIdsFilterSchema = z.object({\n  statusIds: stringIdArraySchema,\n});\n\n// ============================================================================\n// COMPOSITE VALIDATION SCHEMAS\n// ============================================================================\n\n/**\n * Entity creation with name\n * Pattern: Used in location.ts, role creation, basic entity creation\n */\nexport const createEntityWithNameSchema = z.object({\n  name: nameSchema,\n});\n\n/**\n * Entity update with optional name\n * Pattern: Used in location.ts, machine.core.ts updates\n */\nexport const updateEntityWithNameSchema = z.object({\n  id: idSchema,\n  name: optionalNameSchema,\n});\n\n/**\n * Issue creation schema (core fields)\n * Pattern: Used in issue.core.ts create operations\n */\nexport const issueCreationCoreSchema = z.object({\n  title: issueTitleSchema,\n  description: descriptionSchema,\n  machineId: idSchema,\n  submitterName: submitterNameSchema,\n});\n\n/**\n * Issue update schema (core fields)\n * Pattern: Used in issue.core.ts update operations\n */\nexport const issueUpdateCoreSchema = z.object({\n  id: idSchema,\n  title: optionalIssueTitleSchema,\n  description: descriptionSchema,\n  statusId: z.string().optional(),\n  assignedToId: z.string().optional(),\n});\n\n/**\n * Machine creation schema\n * Pattern: Used in machine.core.ts create operations\n */\nexport const machineCreationSchema = z.object({\n  name: z.string().optional(),\n  modelId: idSchema,\n  locationId: idSchema,\n});\n\n/**\n * Machine update schema\n * Pattern: Used in machine.core.ts update operations\n */\nexport const machineUpdateSchema = z.object({\n  id: idSchema,\n  name: z.string().optional(),\n  modelId: idSchema.optional(),\n  locationId: idSchema.optional(),\n});\n\n// ============================================================================\n// FILTERING AND SEARCH SCHEMAS\n// ============================================================================\n\n/**\n * Issue filtering schema\n * Pattern: Used in issue.core.ts getAll with complex filtering\n */\nexport const issueFilteringSchema = z.object({\n  locationId: idSchema.optional(),\n  machineId: idSchema.optional(),\n  statusIds: stringIdArraySchema,\n  search: searchQuerySchema,\n  assigneeId: idSchema.optional(),\n  reporterId: idSchema.optional(),\n  ownerId: idSchema.optional(),\n  modelId: idSchema.optional(),\n  // Additional filter for single status\n  statusId: idSchema.optional(),\n});\n\n/**\n * Commercial game search schema\n * Pattern: Used in model router for game search\n */\nexport const opdbSearchSchema = z.object({\n  query: searchQuerySchema,\n});\n\n/**\n * Commercial model lookup schema\n * Pattern: Used in model router for specific model lookup\n */\nexport const opdbModelSchema = z.object({\n  opdbId: idSchema,\n});\n\n// ============================================================================\n// ASSIGNMENT AND OWNERSHIP SCHEMAS\n// ============================================================================\n\n/**\n * User assignment schema\n * Pattern: Used in issue assignment, role assignment operations\n */\nexport const userAssignmentSchema = z.object({\n  userId: idSchema,\n});\n\n/**\n * Optional user assignment (for removal)\n * Pattern: Used when assignments can be removed by setting to null/undefined\n */\nexport const optionalUserAssignmentSchema = z.object({\n  userId: z.string().optional(), // undefined/null removes assignment\n});\n\n/**\n * Machine owner assignment schema\n * Pattern: Used in machine.owner.ts for owner assignment/removal\n */\nexport const machineOwnerAssignmentSchema = z.object({\n  machineId: idSchema,\n  ownerId: idSchema.optional(), // undefined/null removes owner\n});\n\n/**\n * Issue assignment schema\n * Pattern: Used in issue.core.ts for assigning users to issues\n */\nexport const issueAssignmentSchema = z.object({\n  issueId: idSchema,\n  userId: idSchema,\n});\n\n// ============================================================================\n// NOTIFICATION SCHEMAS\n// ============================================================================\n\n/**\n * Notification ID schema\n * Pattern: Used in notification.ts operations\n */\nexport const notificationIdSchema = z.object({\n  notificationId: idSchema,\n});\n\n// ============================================================================\n// COMMENT SCHEMAS\n// ============================================================================\n\n/**\n * Comment ID schema\n * Pattern: Used in comment.ts operations\n */\nexport const commentIdSchema = z.object({\n  commentId: idSchema,\n});\n\n/**\n * Comment creation schema\n * Pattern: Used in comment.ts create operations\n */\n// commentCreationSchema re-exported from centralized validation\n\n// ============================================================================\n// VALIDATION HELPERS\n// ============================================================================\n\n/**\n * Email validation schema\n * Pattern: Used in user management operations\n */\n// emailSchema and optionalEmailSchema re-exported from centralized validation\n\n/**\n * Boolean flag validation\n * Pattern: Used for feature flags, toggles, etc.\n */\nexport const booleanFlagSchema = z.boolean();\n\n/**\n * Optional boolean flag\n */\nexport const optionalBooleanFlagSchema = booleanFlagSchema.optional();\n\n// ============================================================================\n// UTILITY FUNCTIONS\n// ============================================================================\n\n/**\n * Creates a simple ID-based schema for any entity type\n * Utility for generating consistent ID validation schemas\n */\nexport function createEntityIdSchema(\n  entityName: string,\n): z.ZodObject<Record<string, z.ZodString>> {\n  const fieldName = `${entityName}Id`;\n  return z.object({\n    [fieldName]: z.string().min(1, \"ID is required\"),\n  });\n}\n\n/**\n * Creates a name-based creation schema for any entity type\n * Utility for generating consistent creation schemas\n */\nexport function createNamedEntityCreationSchema(\n  requireName = true,\n): z.ZodObject<{\n  name: z.ZodOptional<z.ZodString> | z.ZodString;\n}> {\n  const baseNameSchema = z.string().min(1, \"Name is required\");\n  return z.object({\n    name: requireName ? baseNameSchema : baseNameSchema.optional(),\n  });\n}\n\n/**\n * Creates an update schema with ID and optional name\n * Utility for generating consistent update schemas\n */\nexport function createNamedEntityUpdateSchema(): z.ZodObject<{\n  id: z.ZodString;\n  name: z.ZodOptional<z.ZodString>;\n}> {\n  return z.object({\n    id: z.string().min(1, \"ID is required\"),\n    name: z.string().min(1, \"Name is required\").optional(),\n  });\n}\n\n/**\n * Validates that a string array contains only non-empty strings\n * Utility for validating ID arrays with better error messages\n */\nexport function validateNonEmptyStringArray(\n  array: unknown,\n  fieldName: string,\n): string[] {\n  if (!Array.isArray(array)) {\n    throw new Error(`${fieldName} must be an array`);\n  }\n  if (array.length === 0) {\n    throw new Error(`${fieldName} cannot be empty`);\n  }\n  // Narrow the type iteratively to avoid any usage\n  const arr: unknown[] = array as unknown[];\n  const result: string[] = [];\n  for (let index = 0; index < arr.length; index++) {\n    const raw: unknown = arr[index];\n    if (typeof raw !== \"string\") {\n      throw new Error(`${fieldName}[${String(index)}] must be a string`);\n    }\n    const trimmed = raw.trim();\n    if (trimmed.length === 0) {\n      throw new Error(\n        `${fieldName}[${String(index)}] must be a non-empty string`,\n      );\n    }\n    result.push(trimmed);\n  }\n  return result;\n}\n\n/**\n * Validates and normalizes search query input\n * Utility for consistent search query processing\n */\nexport function validateAndNormalizeSearchQuery(\n  query: unknown,\n): string | undefined {\n  // Use || to check for falsy values (null, undefined, empty string)\n  if (!query || query === \"\") {\n    return undefined;\n  }\n\n  if (typeof query !== \"string\") {\n    throw new Error(\"Search query must be a string\");\n  }\n\n  const normalized = query.trim();\n  if (normalized.length === 0) {\n    return undefined;\n  }\n\n  if (normalized.length > 1000) {\n    throw new Error(\"Search query must be 1000 characters or less\");\n  }\n\n  return normalized;\n}\n\n/**\n * Validates optional string field with length constraints\n * Utility for consistent optional string validation\n */\nexport function validateOptionalString(\n  value: unknown,\n  fieldName: string,\n  maxLength = 255,\n): string | undefined {\n  // Use || to check for falsy values (null, undefined, empty string)\n  if (!value || value === \"\") {\n    return undefined;\n  }\n\n  if (typeof value !== \"string\") {\n    throw new Error(`${fieldName} must be a string`);\n  }\n\n  const trimmed = value.trim();\n  if (trimmed.length === 0) {\n    return undefined;\n  }\n\n  if (trimmed.length > maxLength) {\n    throw new Error(\n      `${fieldName} must be ${String(maxLength)} characters or less`,\n    );\n  }\n\n  return trimmed;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/common/organizationValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/constants/entity-ui.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":72,"column":11,"nodeType":"MemberExpression","endLine":72,"endColumn":35},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":73,"column":13,"nodeType":"MemberExpression","endLine":73,"endColumn":38},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":74,"column":11,"nodeType":"MemberExpression","endLine":74,"endColumn":35},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":75,"column":15,"nodeType":"MemberExpression","endLine":75,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Entity UI Constants\n * Centralized icons, colors, and display information for different entity types\n */\n\nimport {\n  FileTextIcon,\n  SettingsIcon,\n  UsersIcon,\n  MapPinIcon,\n} from \"lucide-react\";\n\n/**\n * Icons for different entity types\n * Used in search results, navigation, and other entity displays\n */\nexport const ENTITY_ICONS = {\n  issues: FileTextIcon,\n  machines: SettingsIcon,\n  users: UsersIcon,\n  locations: MapPinIcon,\n} as const;\n\n/**\n * Material Design 3 color classes for different entity types\n * Consistent with the project's color system from globals.css\n */\nexport const ENTITY_COLORS = {\n  issues: \"bg-primary-container text-on-primary-container\",\n  machines: \"bg-tertiary-container text-on-tertiary-container\",\n  users: \"bg-primary-container text-on-primary-container\",\n  locations: \"bg-secondary-container text-on-secondary-container\",\n} as const;\n\n/**\n * Display names for entity types\n * Used for pluralization and user-facing labels\n */\nexport const ENTITY_NAMES = {\n  issues: \"Issues\",\n  machines: \"Machines\",\n  users: \"Users\",\n  locations: \"Locations\",\n} as const;\n\n/**\n * Singular forms for entity types\n * Used in creation dialogs and singular references\n */\nexport const ENTITY_SINGULAR = {\n  issues: \"Issue\",\n  machines: \"Machine\",\n  users: \"User\",\n  locations: \"Location\",\n} as const;\n\n/**\n * Type definitions for entity types\n */\nexport type EntityType = keyof typeof ENTITY_ICONS;\n\n/**\n * Utility function to get entity display information\n */\nexport function getEntityInfo(entityType: EntityType): {\n  icon: (typeof ENTITY_ICONS)[EntityType];\n  colors: string;\n  name: string;\n  singular: string;\n} {\n  return {\n    icon: ENTITY_ICONS[entityType],\n    colors: ENTITY_COLORS[entityType],\n    name: ENTITY_NAMES[entityType],\n    singular: ENTITY_SINGULAR[entityType],\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/dal/activity-log.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/dal/comments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/dal/dev-users.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":85,"column":20,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":85,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Development Users Data Access Layer\n * Dev-only queries for test user management\n * Only available when dev features are enabled\n */\n\nimport \"server-only\";\n\nimport { cache } from \"react\";\nimport { eq, like } from \"drizzle-orm\";\nimport { getGlobalDatabaseProvider } from \"~/server/db/provider\";\nimport { users, memberships, roles, organizations } from \"~/server/db/schema\";\nimport { transformKeysToCamelCase } from \"~/lib/utils/case-transformers\";\nimport type { DevUserResponse } from \"~/lib/types\";\n\n// Internal type for query result transformation\ninterface DevUserRaw {\n  id: string;\n  name: string | null;\n  email: string | null; // email can be null in database\n  email_verified: Date | null; // Fixed: email_verified is timestamp in database\n  image: string | null;\n  bio: string | null;\n  notification_frequency: \"IMMEDIATE\" | \"DAILY\" | \"WEEKLY\" | \"NEVER\";\n  email_notifications_enabled: boolean;\n  push_notifications_enabled: boolean;\n  created_at: Date;\n  updated_at: Date;\n  roles: string[];\n}\n\n/**\n * Get development users for testing login\n * Only returns users with @example.com emails\n * Transforms to camelCase for API consumption\n */\nexport const getDevUsers = cache(async (): Promise<DevUserResponse[]> => {\n  const db = getGlobalDatabaseProvider().getClient();\n\n  // Query dev users using Drizzle with snake_case field access\n  const devUsersRaw = await db\n    .select({\n      id: users.id,\n      name: users.name,\n      email: users.email,\n      email_verified: users.email_verified,\n      image: users.image,\n      bio: users.bio,\n      notification_frequency: users.notification_frequency,\n      email_notifications_enabled: users.email_notifications_enabled,\n      push_notifications_enabled: users.push_notifications_enabled,\n      created_at: users.created_at,\n      updated_at: users.updated_at,\n      // Join role data\n      role_name: roles.name,\n    })\n    .from(users)\n    .leftJoin(memberships, eq(memberships.user_id, users.id))\n    .leftJoin(roles, eq(roles.id, memberships.role_id))\n    .where(like(users.email, \"%@example.com\"));\n\n  // Transform results to group by user and include role information\n  const userMap = new Map<string, DevUserRaw>();\n  for (const row of devUsersRaw) {\n    const userId = row.id;\n    if (!userMap.has(userId)) {\n      userMap.set(userId, {\n        id: row.id,\n        name: row.name,\n        email: row.email,\n        email_verified: row.email_verified,\n        image: row.image,\n        bio: row.bio,\n        notification_frequency: row.notification_frequency,\n        email_notifications_enabled: row.email_notifications_enabled,\n        push_notifications_enabled: row.push_notifications_enabled,\n        created_at: row.created_at,\n        updated_at: row.updated_at,\n        roles: [],\n      });\n    }\n\n    // Add role if it exists\n    if (row.role_name) {\n      const user = userMap.get(userId)!;\n      user.roles.push(row.role_name);\n    }\n  }\n\n  // Transform to camelCase for API response\n  const devUsers = Array.from(userMap.values());\n  return transformKeysToCamelCase(devUsers) as DevUserResponse[];\n});\n\n/**\n * Get organization for dev context\n * Returns first available organization for dev operations\n */\nexport const getDevOrganization = cache(async () => {\n  const db = getGlobalDatabaseProvider().getClient();\n\n  const organizationResults = await db\n    .select({\n      id: organizations.id,\n      name: organizations.name,\n      subdomain: organizations.subdomain,\n    })\n    .from(organizations)\n    .limit(1);\n\n  return organizationResults[0] ?? null;\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/dal/index.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"`import()` type annotations are forbidden.","line":24,"column":54,"nodeType":"TSImportType","messageId":"noImportTypeAnnotations","endLine":24,"endColumn":101}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Data Access Layer (DAL) - Central exports\n * Direct database queries for Server Components\n * All functions use React 19 cache() for request-level memoization\n */\n\n// Static type imports for function signatures\nimport type {\n  OrganizationResponse,\n  UserProfileResponse,\n  IssueWithRelationsResponse,\n} from \"~/lib/types\";\nimport { transformKeysToCamelCase } from \"~/lib/utils/case-transformers\";\n\n// Issue stats and dashboard types\ninterface IssueStats {\n  totalCount: number;\n  openCount: number;\n  closedCount: number;\n  urgentCount: number;\n}\n\n// AuthContextWithRole should match the actual return type of getServerAuthContextWithRole\ntype AuthContextWithRole = Awaited<ReturnType<typeof import(\"./shared\").getServerAuthContextWithRole>>;\n\n// =================================\n// SHARED UTILITIES AND AUTH CONTEXT\n// =================================\nexport {\n  getServerAuthContext,\n  requireAuthContext,\n  getServerAuthContextWithRole,\n  requireAuthContextWithRole,\n  getPaginationParams,\n  db,\n  type PaginationOptions,\n} from \"./shared\";\n\n// =================================\n// ORGANIZATIONS - Stats & Management\n// =================================\nexport {\n  getOrganizationById,\n  getCurrentOrganization,\n  getOrganizationStats,\n  getOrganizationMembers,\n  getOrganizationMemberCount,\n  getOrganizationRoles,\n  validateUserMembership,\n  getOrganizationDashboardData,\n} from \"./organizations\";\n\n// =================================\n// USERS - Profiles & Membership\n// =================================\nexport {\n  getCurrentUserProfile,\n  getUserById,\n  getCurrentUserMembership,\n  getCurrentUserPermissions,\n  getUserActivityStats,\n  getAssignableUsers,\n  getUserRecentActivity,\n  userHasPermission,\n  getUserPublicProfile,\n} from \"./users\";\n\n// =================================\n// ISSUES - Core Business Logic\n// =================================\nexport {\n  getIssuesForOrg,\n  getIssueById,\n  getIssueStatusCounts,\n  getRecentIssues,\n  getIssueDashboardStats,\n  getCurrentUserAssignedIssues,\n  getCurrentUserCreatedIssues,\n  getHighPriorityUnassignedIssues,\n  getIssueTrendData,\n} from \"./issues\";\n\n// =================================\n// MACHINES - Equipment Management\n// =================================\nexport {\n  getMachinesForOrg,\n  getMachineById,\n  getMachinesWithIssueCounts,\n} from \"./machines\";\n\n// =================================\n// COMMON PATTERNS FOR SERVER COMPONENTS\n// =================================\n\n/**\n * Common dashboard data aggregation\n * Combines organization, user, and issue data for dashboard pages\n * Uses parallel queries for optimal performance\n */\nexport async function getDashboardData(): Promise<{\n  organization: OrganizationResponse;\n  user: UserProfileResponse;\n  issueStats: IssueStats;\n  recentIssues: IssueWithRelationsResponse[];\n}> {\n  const { getCurrentOrganization } = await import(\"./organizations\");\n  const { getCurrentUserProfile } = await import(\"./users\");\n  const { getIssueDashboardStats, getRecentIssues } = await import(\"./issues\");\n\n  const [orgData, userProfile, issueStats, recentIssues] = await Promise.all([\n    getCurrentOrganization(),\n    getCurrentUserProfile(),\n    getIssueDashboardStats(),\n    getRecentIssues(5),\n  ]);\n\n  return {\n    organization: transformKeysToCamelCase(orgData) as OrganizationResponse,\n    user: transformKeysToCamelCase(userProfile) as UserProfileResponse,\n    issueStats: transformKeysToCamelCase(issueStats) as IssueStats,\n    recentIssues: transformKeysToCamelCase(\n      recentIssues,\n    ) as IssueWithRelationsResponse[],\n  };\n}\n\n/**\n * Common user context data for layouts\n * Gets authentication context with role and organization info\n * Optimized for layout components needing user state\n */\nexport async function getUserContextData(): Promise<\n  AuthContextWithRole & {\n    profile: UserProfileResponse | null;\n  }\n> {\n  const { getServerAuthContextWithRole } = await import(\"./shared\");\n  const { getCurrentUserProfile } = await import(\"./users\");\n\n  const [authContext, userProfile] = await Promise.all([\n    getServerAuthContextWithRole(),\n    getCurrentUserProfile().catch(() => null), // Handle unauthenticated case\n  ]);\n\n  return {\n    ...authContext,\n    profile: userProfile\n      ? (transformKeysToCamelCase(userProfile) as UserProfileResponse)\n      : null,\n  };\n}\n\n/**\n * Common organization overview data\n * Combines organization info with key statistics\n * Useful for admin pages and organization management\n */\nexport async function getOrganizationOverviewData(): Promise<{\n  organization: OrganizationResponse;\n  stats: IssueStats;\n  memberCount: number;\n  recentIssues: IssueWithRelationsResponse[];\n}> {\n  const {\n    getCurrentOrganization,\n    getOrganizationStats,\n    getOrganizationMemberCount,\n  } = await import(\"./organizations\");\n  const { getRecentIssues } = await import(\"./issues\");\n\n  const [organization, stats, memberCount, recentIssues] = await Promise.all([\n    getCurrentOrganization(),\n    getOrganizationStats(),\n    getOrganizationMemberCount(),\n    getRecentIssues(10),\n  ]);\n\n  return {\n    organization: transformKeysToCamelCase(\n      organization,\n    ) as OrganizationResponse,\n    stats: transformKeysToCamelCase(stats) as IssueStats,\n    memberCount,\n    recentIssues: transformKeysToCamelCase(\n      recentIssues,\n    ) as IssueWithRelationsResponse[],\n  };\n}\n\n// Utility type for DAL function return types\nexport type DALFunction<T extends (...args: unknown[]) => unknown> = T extends (\n  ...args: unknown[]\n) => Promise<infer R>\n  ? R\n  : never;\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/dal/issues.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":277,"column":9,"nodeType":"MemberExpression","endLine":277,"endColumn":22},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":350,"column":9,"nodeType":"MemberExpression","endLine":350,"endColumn":24},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":350,"column":28,"nodeType":"MemberExpression","endLine":350,"endColumn":43},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":360,"column":9,"nodeType":"MemberExpression","endLine":360,"endColumn":26},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":360,"column":30,"nodeType":"MemberExpression","endLine":360,"endColumn":47},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":510,"column":9,"nodeType":"MemberExpression","endLine":510,"endColumn":21},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":511,"column":9,"nodeType":"MemberExpression","endLine":511,"endColumn":21},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":519,"column":9,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":519,"endColumn":22,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[15412,15413],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":519,"column":9,"nodeType":"MemberExpression","endLine":519,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Issues Data Access Layer\n * Direct database queries for Server Components\n */\n\nimport { cache } from \"react\";\nimport { and, desc, eq, sql, isNull, inArray, type SQL } from \"drizzle-orm\";\nimport { issues, issueStatuses, priorities } from \"~/server/db/schema\";\nimport { ensureOrgContextAndBindRLS } from \"~/lib/organization-context\";\nimport type { IssueFilters } from \"~/lib/types\";\n\n/**\n * Get issues for the current organization with machine and assignee details\n * Designed for Server Components - includes proper org scoping and joins\n * Uses React 19 cache() for request-level memoization\n */\nexport const getIssuesForOrg = cache(async () => {\n  return ensureOrgContextAndBindRLS(async (tx, context) => {\n    const organizationId = context.organization.id;\n    return await tx.query.issues.findMany({\n      where: eq(issues.organization_id, organizationId),\n      with: {\n        machine: {\n          columns: { id: true, name: true, model_id: true, location_id: true },\n          with: {\n            model: {\n              columns: { id: true, name: true },\n            },\n          },\n        },\n        assignedTo: {\n          columns: { id: true, name: true, email: true },\n        },\n        status: {\n          columns: { id: true, name: true, category: true },\n        },\n        priority: {\n          columns: { id: true, name: true, order: true },\n        },\n      },\n      orderBy: [desc(issues.created_at)],\n    });\n  });\n});\n\nexport interface IssuePagination {\n  page: number;\n  limit: number;\n}\n\nexport interface IssueSorting {\n  field: string;\n  order: \"asc\" | \"desc\";\n}\n\n/**\n * Get issues with advanced filtering, sorting, and pagination\n * Designed for Phase 3A server-first architecture with URL state management\n * Uses React 19 cache() for request-level memoization\n */\nexport const getIssuesWithFilters = cache(\n  async (\n    filters: IssueFilters = {},\n    pagination: IssuePagination = { page: 1, limit: 20 },\n    sorting: IssueSorting = { field: \"created_at\", order: \"desc\" },\n  ) => {\n    return ensureOrgContextAndBindRLS(async (tx, context) => {\n      const organizationId = context.organization.id;\n\n      // Build where conditions\n      const whereConditions: SQL[] = [\n        eq(issues.organization_id, organizationId),\n      ];\n\n      // Status filtering by status names\n      if (filters.status?.length) {\n        const statusIds = await tx\n          .select({ id: issueStatuses.id })\n          .from(issueStatuses)\n          .where(\n            and(\n              eq(issueStatuses.organization_id, organizationId),\n              inArray(issueStatuses.name, filters.status),\n            ),\n          );\n\n        if (statusIds.length > 0) {\n          whereConditions.push(\n            inArray(\n              issues.status_id,\n              statusIds.map((s) => s.id),\n            ),\n          );\n        }\n      }\n\n      // Priority filtering by priority names\n      if (filters.priority?.length) {\n        const priorityIds = await tx\n          .select({ id: priorities.id })\n          .from(priorities)\n          .where(\n            and(\n              eq(priorities.organization_id, organizationId),\n              inArray(priorities.name, filters.priority),\n            ),\n          );\n\n        if (priorityIds.length > 0) {\n          whereConditions.push(\n            inArray(\n              issues.priority_id,\n              priorityIds.map((p) => p.id),\n            ),\n          );\n        }\n      }\n\n      // Assignee filtering\n      if (filters.assigneeId) {\n        whereConditions.push(eq(issues.assigned_to_id, filters.assigneeId));\n      }\n\n      // Search filtering (title and description)\n      if (filters.search) {\n        whereConditions.push(\n          sql`(${issues.title} ILIKE ${\"%\" + filters.search + \"%\"} OR ${issues.description} ILIKE ${\"%\" + filters.search + \"%\"})`,\n        );\n      }\n\n      // Calculate offset for pagination\n      const offset = (pagination.page - 1) * pagination.limit;\n\n      // Build order by clause - handle different field types\n      let orderBy;\n      if (sorting.field === \"created_at\") {\n        orderBy =\n          sorting.order === \"desc\"\n            ? desc(issues.created_at)\n            : issues.created_at;\n      } else if (sorting.field === \"title\") {\n        orderBy = sorting.order === \"desc\" ? desc(issues.title) : issues.title;\n      } else if (sorting.field === \"updated_at\") {\n        orderBy =\n          sorting.order === \"desc\"\n            ? desc(issues.updated_at)\n            : issues.updated_at;\n      } else {\n        // Default to created_at\n        orderBy =\n          sorting.order === \"desc\"\n            ? desc(issues.created_at)\n            : issues.created_at;\n      }\n\n      // Get total count for pagination info\n      const totalCount = await tx\n        .select({ count: sql<number>`count(*)::int` })\n        .from(issues)\n        .where(and(...whereConditions))\n        .then((result) => result[0]?.count ?? 0);\n\n      // Get paginated results\n      const issuesResult = await tx.query.issues.findMany({\n        where: and(...whereConditions),\n        with: {\n          machine: {\n            columns: {\n              id: true,\n              name: true,\n              model_id: true,\n              location_id: true,\n            },\n            with: {\n              model: {\n                columns: { id: true, name: true },\n              },\n            },\n          },\n          assignedTo: {\n            columns: { id: true, name: true, email: true },\n          },\n          status: {\n            columns: { id: true, name: true, category: true },\n          },\n          priority: {\n            columns: { id: true, name: true, order: true },\n          },\n        },\n        orderBy: [orderBy],\n        limit: pagination.limit + 1, // +1 to check if there's a next page\n        offset,\n      });\n\n      // Check if there's a next page\n      const hasNextPage: boolean = issuesResult.length > pagination.limit;\n      const issuesData = hasNextPage ? issuesResult.slice(0, -1) : issuesResult;\n\n      return {\n        issues: issuesData,\n        totalCount,\n        hasNextPage,\n        hasPreviousPage: pagination.page > 1,\n        totalPages: Math.ceil(totalCount / pagination.limit),\n        currentPage: pagination.page,\n      };\n    });\n  },\n);\n\n/**\n * Get single issue by ID with full details\n * Enforces organization scoping for security\n * Uses React 19 cache() for request-level memoization per issueId\n */\nexport const getIssueById = cache(async (issueId: string) => {\n  return ensureOrgContextAndBindRLS(async (tx, context) => {\n    const organizationId = context.organization.id;\n    const issue = await tx.query.issues.findFirst({\n      where: and(\n        eq(issues.id, issueId),\n        eq(issues.organization_id, organizationId),\n      ),\n      with: {\n        machine: {\n          with: {\n            model: {\n              columns: { id: true, name: true },\n            },\n            location: {\n              columns: { id: true, name: true },\n            },\n          },\n        },\n        status: {\n          columns: { id: true, name: true, category: true },\n        },\n        assignedTo: {\n          columns: { id: true, name: true, email: true },\n        },\n        createdBy: {\n          columns: { id: true, name: true, email: true },\n        },\n      },\n    });\n\n    if (!issue) {\n      throw new Error(\"Issue not found or access denied\");\n    }\n\n    return issue;\n  });\n});\n\n/**\n * Get issue counts by status for dashboard\n * Optimized query for Server Component stats\n * Uses React 19 cache() for request-level memoization\n */\nexport const getIssueStatusCounts = cache(async () => {\n  return ensureOrgContextAndBindRLS(async (tx, context) => {\n    const organizationId = context.organization.id;\n    const statusCounts = await tx\n      .select({\n        statusId: issues.status_id,\n        count: sql<number>`count(*)::int`,\n      })\n      .from(issues)\n      .where(eq(issues.organization_id, organizationId))\n      .groupBy(issues.status_id);\n\n    return statusCounts.reduce<Record<string, number>>(\n      (\n        acc: Record<string, number>,\n        { statusId, count }: { statusId: string; count: number },\n      ) => {\n        acc[statusId] = count;\n        return acc;\n      },\n      {},\n    );\n  });\n});\n\n/**\n * Get recent issues for sidebar/widgets\n * Limited result set for performance\n * Uses React 19 cache() for request-level memoization per limit value\n */\nexport const getRecentIssues = cache(async (limit = 5) => {\n  return ensureOrgContextAndBindRLS(async (tx, context) => {\n    const organizationId = context.organization.id;\n    return await tx.query.issues.findMany({\n      where: eq(issues.organization_id, organizationId),\n      with: {\n        machine: {\n          columns: { id: true, name: true, model_id: true },\n          with: {\n            model: {\n              columns: { id: true, name: true },\n            },\n          },\n        },\n      },\n      orderBy: [desc(issues.created_at)],\n      limit,\n    });\n  });\n});\n\n/**\n * Get comprehensive issue statistics for dashboard\n * Includes status breakdown, priority distribution, and assignment stats\n * Uses React 19 cache() for request-level memoization\n */\nexport const getIssueDashboardStats = cache(async () => {\n  return ensureOrgContextAndBindRLS(async (tx, context) => {\n    const organizationId = context.organization.id;\n\n    const [statusBreakdown, priorityBreakdown, assignmentStats] =\n      await Promise.all([\n        tx.query.issues.findMany({\n          where: eq(issues.organization_id, organizationId),\n          with: {\n            status: {\n              columns: { id: true, name: true },\n            },\n          },\n          columns: { id: true, status_id: true },\n        }),\n        tx.query.issues.findMany({\n          where: eq(issues.organization_id, organizationId),\n          with: {\n            priority: {\n              columns: { id: true, name: true },\n            },\n          },\n          columns: { id: true, priority_id: true },\n        }),\n        tx.query.issues.findMany({\n          where: eq(issues.organization_id, organizationId),\n          columns: { id: true, assigned_to_id: true, created_by_id: true },\n        }),\n      ]);\n\n    // Process status breakdown\n    const statusCounts = statusBreakdown.reduce<Record<string, number>>(\n      (acc, issue) => {\n        const statusName = issue.status.name;\n        acc[statusName] = (acc[statusName] ?? 0) + 1;\n        return acc;\n      },\n      {},\n    );\n\n    // Process priority breakdown\n    const priorityCounts = priorityBreakdown.reduce<Record<string, number>>(\n      (acc, issue) => {\n        const priorityName = issue.priority.name;\n        acc[priorityName] = (acc[priorityName] ?? 0) + 1;\n        return acc;\n      },\n      {},\n    );\n\n    // Process assignment statistics\n    const totalIssues = assignmentStats.length;\n    const assignedIssues = assignmentStats.filter(\n      (issue) => issue.assigned_to_id,\n    ).length;\n    const unassignedIssues = totalIssues - assignedIssues;\n\n    return {\n      total: totalIssues,\n      statusBreakdown: statusCounts,\n      priorityBreakdown: priorityCounts,\n      assignmentStats: {\n        assigned: assignedIssues,\n        unassigned: unassignedIssues,\n        assignmentRate:\n          totalIssues > 0 ? (assignedIssues / totalIssues) * 100 : 0,\n      },\n    };\n  });\n});\n\n/**\n * Get issues assigned to current user for dashboard\n * Shows user's personal issue workload\n * Uses React 19 cache() for request-level memoization per limit\n */\nexport const getCurrentUserAssignedIssues = cache(async (limit = 10) => {\n  return ensureOrgContextAndBindRLS(async (tx, context) => {\n    if (!context.user) {\n      throw new Error(\"Authentication required\");\n    }\n    const organizationId = context.organization.id;\n    return await tx.query.issues.findMany({\n      where: and(\n        eq(issues.organization_id, organizationId),\n        eq(issues.assigned_to_id, context.user.id),\n      ),\n      with: {\n        machine: {\n          columns: { id: true, name: true },\n          with: {\n            model: { columns: { name: true } },\n          },\n        },\n        status: { columns: { name: true } },\n        priority: { columns: { name: true } },\n      },\n      orderBy: [desc(issues.updated_at)],\n      limit,\n    });\n  });\n});\n\n/**\n * Get issues created by current user for dashboard\n * Shows user's issue creation history\n * Uses React 19 cache() for request-level memoization per limit\n */\nexport const getCurrentUserCreatedIssues = cache(async (limit = 10) => {\n  return ensureOrgContextAndBindRLS(async (tx, context) => {\n    if (!context.user) {\n      throw new Error(\"Authentication required\");\n    }\n    const organizationId = context.organization.id;\n    return await tx.query.issues.findMany({\n      where: and(\n        eq(issues.organization_id, organizationId),\n        eq(issues.created_by_id, context.user.id),\n      ),\n      with: {\n        machine: {\n          columns: { id: true, name: true },\n          with: {\n            model: { columns: { name: true } },\n          },\n        },\n        status: { columns: { name: true } },\n        priority: { columns: { name: true } },\n      },\n      orderBy: [desc(issues.created_at)],\n      limit,\n    });\n  });\n});\n\n/**\n * Get high priority unassigned issues for dashboard alerts\n * Identifies critical issues needing attention\n * Uses React 19 cache() for request-level memoization\n */\nexport const getHighPriorityUnassignedIssues = cache(async () => {\n  return ensureOrgContextAndBindRLS(async (tx, context) => {\n    const organizationId = context.organization.id;\n    return await tx.query.issues.findMany({\n      where: and(\n        eq(issues.organization_id, organizationId),\n        isNull(issues.assigned_to_id), // Unassigned\n      ),\n      with: {\n        machine: {\n          columns: { id: true, name: true },\n          with: {\n            model: { columns: { name: true } },\n          },\n        },\n        status: { columns: { name: true } },\n        priority: { columns: { name: true } },\n      },\n      orderBy: [desc(issues.created_at)],\n    });\n  });\n});\n\n/**\n * Get issue trend data for dashboard charts\n * Shows issue creation/resolution trends over time\n * Uses React 19 cache() for request-level memoization per days\n */\nexport const getIssueTrendData = cache(async (days = 30) => {\n  return ensureOrgContextAndBindRLS(async (tx, context) => {\n    const organizationId = context.organization.id;\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - days);\n\n    const recentIssues = await tx.query.issues.findMany({\n      where: and(\n        eq(issues.organization_id, organizationId),\n        sql`${issues.created_at} >= ${cutoffDate}`,\n      ),\n      columns: {\n        id: true,\n        created_at: true,\n        status_id: true,\n      },\n      with: {\n        status: { columns: { name: true } },\n      },\n    });\n\n    const trendData = recentIssues.reduce<\n      Record<string, { created: number; resolved: number }>\n    >((acc, issue) => {\n      const dateKey = issue.created_at.toISOString().split(\"T\")[0];\n      if (dateKey) {\n        acc[dateKey] ??= { created: 0, resolved: 0 };\n        acc[dateKey].created += 1;\n      }\n\n      const statusName = issue.status.name.toLowerCase();\n      if (\n        dateKey &&\n        (statusName.includes(\"resolved\") || statusName.includes(\"closed\"))\n      ) {\n        acc[dateKey]!.resolved += 1;\n      }\n\n      return acc;\n    }, {});\n\n    return trendData;\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/dal/machines.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/dal/notifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/dal/organizations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/dal/public-organizations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/dal/qr-codes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/dal/shared.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/dal/system-health.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/dal/system-settings.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":111,"column":13,"nodeType":"MemberExpression","endLine":111,"endColumn":36},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":117,"column":13,"nodeType":"MemberExpression","endLine":117,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3292,3295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3292,3295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [k] on an `any` value.","line":117,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":117,"endColumn":39},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":122,"column":13,"nodeType":"MemberExpression","endLine":122,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3477,3480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3477,3480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [k] on an `any` value.","line":122,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":122,"endColumn":42},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":127,"column":13,"nodeType":"MemberExpression","endLine":127,"endColumn":31},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'unknown' overrides all other types in this union type.","line":223,"column":14,"nodeType":"TSUnknownKeyword","messageId":"overrides","endLine":223,"endColumn":21}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * System Settings Data Access Layer\n * Phase 4B.3: System settings persistence and retrieval\n */\n\nimport { cache } from \"react\";\nimport { eq, and } from \"drizzle-orm\";\nimport { db } from \"./shared\";\nimport { withOrgRLS } from \"~/server/db/utils/rls\";\nimport { systemSettings } from \"~/server/db/schema\";\nimport { generatePrefixedId } from \"~/lib/utils/id-generation\";\n\n// Type definitions for system settings\nexport interface SystemSettingsData {\n  notifications: {\n    emailNotifications: boolean;\n    pushNotifications: boolean;\n    issueUpdates: boolean;\n    weeklyDigest: boolean;\n    maintenanceAlerts: boolean;\n  };\n  security: {\n    twoFactorRequired: boolean;\n    sessionTimeout: number;\n    passwordMinLength: number;\n    loginAttempts: number;\n  };\n  preferences: {\n    timezone: string;\n    dateFormat: string;\n    theme: \"light\" | \"dark\" | \"system\";\n    language: string;\n    itemsPerPage: number;\n  };\n  features: {\n    realTimeUpdates: boolean;\n    analyticsTracking: boolean;\n    betaFeatures: boolean;\n    maintenanceMode: boolean;\n  };\n}\n\n// Default system settings\nconst DEFAULT_SYSTEM_SETTINGS: SystemSettingsData = {\n  notifications: {\n    emailNotifications: true,\n    pushNotifications: false,\n    issueUpdates: true,\n    weeklyDigest: true,\n    maintenanceAlerts: true,\n  },\n  security: {\n    twoFactorRequired: false,\n    sessionTimeout: 30,\n    passwordMinLength: 8,\n    loginAttempts: 5,\n  },\n  preferences: {\n    timezone: \"UTC\",\n    dateFormat: \"MM/DD/YYYY\",\n    theme: \"system\",\n    language: \"en\",\n    itemsPerPage: 25,\n  },\n  features: {\n    realTimeUpdates: true,\n    analyticsTracking: false,\n    betaFeatures: false,\n    maintenanceMode: false,\n  },\n};\n\n/**\n * Get system settings for organization with caching\n * Returns default settings if none exist\n */\nexport const getSystemSettings = cache(\n  async (organizationId: string): Promise<SystemSettingsData> => {\n    try {\n      if (!organizationId) {\n        throw new Error(\"Organization ID is required\");\n      }\n\n      const settings = await withOrgRLS(db, organizationId, async (tx) =>\n        tx.query.systemSettings.findMany({\n          where: eq(systemSettings.organization_id, organizationId),\n        }),\n      );\n\n      if (settings.length === 0) {\n        return DEFAULT_SYSTEM_SETTINGS;\n      }\n\n      // Convert settings array to structured object using typed partials\n      const notificationsPartial: Partial<SystemSettingsData[\"notifications\"]> =\n        {};\n      const securityPartial: Partial<SystemSettingsData[\"security\"]> = {};\n      const preferencesPartial: Partial<SystemSettingsData[\"preferences\"]> = {};\n      const featuresPartial: Partial<SystemSettingsData[\"features\"]> = {};\n\n      for (const setting of settings) {\n        const [category, key] = setting.setting_key.split(\".\");\n\n        if (!category || !key) continue;\n\n        const value = setting.setting_value;\n\n        switch (category) {\n          case \"notifications\": {\n            const k = key as keyof SystemSettingsData[\"notifications\"];\n            notificationsPartial[k] =\n              value as SystemSettingsData[\"notifications\"][typeof k];\n            break;\n          }\n          case \"security\": {\n            const k = key as keyof SystemSettingsData[\"security\"];\n            (securityPartial as any)[k] = value;\n            break;\n          }\n          case \"preferences\": {\n            const k = key as keyof SystemSettingsData[\"preferences\"];\n            (preferencesPartial as any)[k] = value;\n            break;\n          }\n          case \"features\": {\n            const k = key as keyof SystemSettingsData[\"features\"];\n            featuresPartial[k] =\n              value as SystemSettingsData[\"features\"][typeof k];\n            break;\n          }\n          default:\n            // Ignore unknown categories\n            break;\n        }\n      }\n\n      // Merge with defaults to ensure all keys exist\n      return {\n        notifications: {\n          ...DEFAULT_SYSTEM_SETTINGS.notifications,\n          ...notificationsPartial,\n        },\n        security: { ...DEFAULT_SYSTEM_SETTINGS.security, ...securityPartial },\n        preferences: {\n          ...DEFAULT_SYSTEM_SETTINGS.preferences,\n          ...preferencesPartial,\n        },\n        features: { ...DEFAULT_SYSTEM_SETTINGS.features, ...featuresPartial },\n      };\n    } catch (error) {\n      console.error(\"Error fetching system settings:\", error);\n      return DEFAULT_SYSTEM_SETTINGS;\n    }\n  },\n);\n\n/**\n * Update system settings for organization\n * Creates or updates settings as needed\n */\nexport async function updateSystemSettings(\n  organizationId: string,\n  settings: Partial<SystemSettingsData>,\n): Promise<void> {\n  if (!organizationId) {\n    throw new Error(\"Organization ID is required\");\n  }\n\n  // Flatten the settings object into key-value pairs\n  const settingsToUpsert: {\n    key: string;\n    value: unknown;\n  }[] = [];\n\n  for (const [category, categorySettings] of Object.entries(settings)) {\n    if (typeof categorySettings === \"object\") {\n      for (const [key, value] of Object.entries(categorySettings)) {\n        settingsToUpsert.push({\n          key: `${category}.${key}`,\n          value,\n        });\n      }\n    }\n  }\n\n  // Update or insert each setting\n  await withOrgRLS(db, organizationId, async (tx) => {\n    for (const { key, value } of settingsToUpsert) {\n      const existingSetting = await tx.query.systemSettings.findFirst({\n        where: and(\n          eq(systemSettings.organization_id, organizationId),\n          eq(systemSettings.setting_key, key),\n        ),\n      });\n\n      if (existingSetting) {\n        await tx\n          .update(systemSettings)\n          .set({\n            setting_value: value,\n            updated_at: new Date(),\n          })\n          .where(eq(systemSettings.id, existingSetting.id));\n      } else {\n        await tx.insert(systemSettings).values({\n          id: generatePrefixedId(\"setting\"),\n          organization_id: organizationId,\n          setting_key: key,\n          setting_value: value,\n        });\n      }\n    }\n  });\n}\n\n/**\n * Get a specific system setting value\n */\nexport const getSystemSetting = cache(\n  async (\n    organizationId: string,\n    settingKey: string,\n  ): Promise<unknown | null> => {\n    try {\n      if (!organizationId || !settingKey) {\n        return null;\n      }\n\n      const setting = await withOrgRLS(db, organizationId, async (tx) =>\n        tx.query.systemSettings.findFirst({\n          where: and(\n            eq(systemSettings.organization_id, organizationId),\n            eq(systemSettings.setting_key, settingKey),\n          ),\n        }),\n      );\n\n      return setting?.setting_value ?? null;\n    } catch (error) {\n      console.error(\"Error fetching system setting:\", error);\n      return null;\n    }\n  },\n);\n\n/**\n * Reset system settings to defaults for organization\n */\nexport async function resetSystemSettings(\n  organizationId: string,\n): Promise<void> {\n  if (!organizationId) {\n    throw new Error(\"Organization ID is required\");\n  }\n  await withOrgRLS(db, organizationId, async (tx) => {\n    await tx\n      .delete(systemSettings)\n      .where(eq(systemSettings.organization_id, organizationId));\n  });\n  await updateSystemSettings(organizationId, DEFAULT_SYSTEM_SETTINGS);\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/dal/users.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/env-loaders/development.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary conditional, value is always falsy.","line":35,"column":7,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":35,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-restricted-properties","severity":2,"message":"'process.env' is restricted from being used. Use the 'env' object from '~/env.js' instead of 'process.env'. It is validated and type-safe. See src/env.js for available variables and T3 Env documentation: https://env.t3.gg/docs/introduction","line":35,"column":8,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":35,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-restricted-properties","severity":2,"message":"'process.env' is restricted from being used. Use the 'env' object from '~/env.js' instead of 'process.env'. It is validated and type-safe. See src/env.js for available variables and T3 Env documentation: https://env.t3.gg/docs/introduction","line":36,"column":6,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":36,"endColumn":17,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/env-loaders/production.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary conditional, value is always falsy.","line":35,"column":7,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":35,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-restricted-properties","severity":2,"message":"'process.env' is restricted from being used. Use the 'env' object from '~/env.js' instead of 'process.env'. It is validated and type-safe. See src/env.js for available variables and T3 Env documentation: https://env.t3.gg/docs/introduction","line":35,"column":8,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":35,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-restricted-properties","severity":2,"message":"'process.env' is restricted from being used. Use the 'env' object from '~/env.js' instead of 'process.env'. It is validated and type-safe. See src/env.js for available variables and T3 Env documentation: https://env.t3.gg/docs/introduction","line":37,"column":6,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":37,"endColumn":17,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/environment-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/environment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/errors/error-configs.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":216,"column":25,"nodeType":"MemberExpression","endLine":216,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Centralized Error Configuration System\n * DRY approach for consistent error handling across PinPoint\n * Phase 4C: Comprehensive Error Handling\n */\n\nimport {\n  createCommonActions,\n  type ErrorBoundaryConfig,\n  type ErrorAction,\n} from \"~/components/ui/error-boundary-card\";\nimport {\n  AlertTriangle,\n  Database,\n  Shield,\n  Wifi,\n  Settings,\n  FileText,\n  LayoutDashboard,\n  Wrench,\n} from \"lucide-react\";\n\n/**\n * Factory function to create error configurations with consistent patterns\n */\nfunction createErrorConfig(\n  title: string,\n  description: string,\n  actions: ((reset: () => void) => ErrorAction)[],\n  options?: {\n    icon?: React.ComponentType<{ className?: string }>;\n    severity?: \"error\" | \"warning\" | \"info\";\n    showErrorDetails?: boolean;\n  },\n): (reset: () => void) => ErrorBoundaryConfig {\n  return (reset: () => void) => ({\n    title,\n    description,\n    actions: actions.map((actionFactory) => actionFactory(reset)),\n    icon: options?.icon ?? AlertTriangle,\n    severity: options?.severity ?? \"error\",\n    showErrorDetails: options?.showErrorDetails ?? false,\n  });\n}\n\n/**\n * Pre-defined error configurations for different app contexts\n * Each function returns a configuration when passed the reset function\n */\nexport const errorConfigs = {\n  /**\n   * Global application errors\n   */\n  global: createErrorConfig(\n    \"Application Error\",\n    \"Something went wrong with the application. This could be a temporary issue.\",\n    [\n      createCommonActions.retry,\n      createCommonActions.refresh,\n      createCommonActions.support,\n    ],\n    { severity: \"error\" },\n  ),\n\n  /**\n   * Issues page errors - core functionality\n   */\n  issues: createErrorConfig(\n    \"Issues Unavailable\",\n    \"We encountered an error while loading your issue tracking system. This could be due to a database connection issue or a temporary server problem.\",\n    [\n      createCommonActions.retry,\n      createCommonActions.dashboard,\n      createCommonActions.support,\n    ],\n    {\n      icon: FileText,\n      severity: \"error\",\n    },\n  ),\n\n  /**\n   * Individual issue page errors\n   */\n  issueDetail: createErrorConfig(\n    \"Issue Details Error\",\n    \"Unable to load this specific issue. It may have been deleted or you may not have permission to view it.\",\n    [\n      createCommonActions.retry,\n      (_reset) => ({\n        label: \"Back to Issues\",\n        action: () => (window.location.href = \"/issues\"),\n        variant: \"outline\" as const,\n        icon: FileText,\n      }),\n      createCommonActions.dashboard,\n    ],\n    {\n      icon: FileText,\n      severity: \"warning\",\n    },\n  ),\n\n  /**\n   * Settings page errors - administrative functionality\n   */\n  settings: createErrorConfig(\n    \"Settings Unavailable\",\n    \"Unable to load organization settings. This could be due to permission issues or a temporary server problem.\",\n    [createCommonActions.retry, createCommonActions.dashboard],\n    {\n      icon: Settings,\n      severity: \"warning\",\n    },\n  ),\n\n  /**\n   * Dashboard errors - main entry point\n   */\n  dashboard: createErrorConfig(\n    \"Dashboard Error\",\n    \"We're having trouble loading your dashboard. This could be a temporary server issue or a data loading problem.\",\n    [\n      createCommonActions.retry,\n      createCommonActions.refresh,\n      createCommonActions.support,\n    ],\n    {\n      icon: LayoutDashboard,\n      severity: \"error\",\n    },\n  ),\n\n  /**\n   * Machine management errors\n   */\n  machines: createErrorConfig(\n    \"Machine Management Error\",\n    \"Unable to load machine information. This could be due to a database issue or permission problem.\",\n    [\n      createCommonActions.retry,\n      createCommonActions.dashboard,\n      createCommonActions.support,\n    ],\n    {\n      icon: Wrench,\n      severity: \"warning\",\n    },\n  ),\n\n  /**\n   * Authentication-related errors\n   */\n  auth: createErrorConfig(\n    \"Authentication Error\",\n    \"There was a problem with your authentication. Please sign in again to continue.\",\n    [createCommonActions.signIn, createCommonActions.dashboard],\n    {\n      icon: Shield,\n      severity: \"warning\",\n    },\n  ),\n\n  /**\n   * Database connection errors\n   */\n  database: createErrorConfig(\n    \"Database Connection Error\",\n    \"We're unable to connect to our database. This is likely a temporary issue. Please try again in a few moments.\",\n    [\n      createCommonActions.retry,\n      createCommonActions.refresh,\n      createCommonActions.support,\n    ],\n    {\n      icon: Database,\n      severity: \"error\",\n    },\n  ),\n\n  /**\n   * Network/connectivity errors\n   */\n  network: createErrorConfig(\n    \"Connection Problem\",\n    \"We're having trouble connecting to our servers. Please check your internet connection and try again.\",\n    [createCommonActions.retry, createCommonActions.refresh],\n    {\n      icon: Wifi,\n      severity: \"warning\",\n    },\n  ),\n\n  /**\n   * Permission/authorization errors\n   */\n  permission: createErrorConfig(\n    \"Access Denied\",\n    \"You don't have permission to access this resource. Contact your administrator if you believe this is an error.\",\n    [createCommonActions.dashboard, createCommonActions.support],\n    {\n      icon: Shield,\n      severity: \"warning\",\n    },\n  ),\n};\n\n/**\n * Helper function to get error config by type\n * Provides type safety and fallback to global config\n */\nexport function getErrorConfig(\n  type: keyof typeof errorConfigs,\n  reset: () => void,\n): ErrorBoundaryConfig {\n  const configFactory = errorConfigs[type];\n  return configFactory(reset);\n}\n\n/**\n * Error type detection based on error message patterns\n * Helps automatically determine appropriate error configuration\n */\nexport function detectErrorType(error: Error): keyof typeof errorConfigs {\n  const message = error.message.toLowerCase();\n\n  // Authentication errors\n  if (\n    message.includes(\"unauthorized\") ||\n    message.includes(\"auth\") ||\n    message.includes(\"token\")\n  ) {\n    return \"auth\";\n  }\n\n  // Database errors\n  if (\n    message.includes(\"database\") ||\n    message.includes(\"connection\") ||\n    message.includes(\"query\")\n  ) {\n    return \"database\";\n  }\n\n  // Network errors\n  if (\n    message.includes(\"network\") ||\n    message.includes(\"fetch\") ||\n    message.includes(\"timeout\")\n  ) {\n    return \"network\";\n  }\n\n  // Permission errors\n  if (\n    message.includes(\"permission\") ||\n    message.includes(\"forbidden\") ||\n    message.includes(\"access denied\")\n  ) {\n    return \"permission\";\n  }\n\n  // Default to global\n  return \"global\";\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/external/pinballmapTransformer.ts","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":154,"column":19,"nodeType":"MemberExpression","endLine":154,"endColumn":33,"suppressions":[{"kind":"directive","justification":"field is from const array of known property names"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/hooks/use-current-user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/hooks/use-debounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/image-storage/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/image-storage/local-storage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/issues/assignmentValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/issues/creationValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/issues/filterUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/issues/selectionUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/issues/statusValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/issues/urlUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/logger-constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/opdb/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/opdb/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/opdb/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/opdb/utils.ts","messages":[],"suppressedMessages":[{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":17,"column":17,"nodeType":"Literal","endLine":17,"endColumn":78,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":158,"column":36,"nodeType":"MemberExpression","endLine":158,"endColumn":47,"suppressions":[{"kind":"directive","justification":"key is from Object.keys() iteration of known params object"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/organization-context.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/permissions/descriptions.ts","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":47,"column":23,"nodeType":"MemberExpression","endLine":47,"endColumn":58,"suppressions":[{"kind":"directive","justification":"permission string is validated by type system and used for predefined lookup"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/pinballmap/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/pinballmap/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/search-params/issue-search-params.ts","messages":[{"ruleId":"@typescript-eslint/no-deprecated","severity":2,"message":"`datetime` is deprecated. Use `z.iso.datetime()` instead.","line":44,"column":29,"nodeType":"Identifier","messageId":"deprecatedWithReason","endLine":44,"endColumn":37},{"ruleId":"@typescript-eslint/no-deprecated","severity":2,"message":"`datetime` is deprecated. Use `z.iso.datetime()` instead.","line":45,"column":30,"nodeType":"Identifier","messageId":"deprecatedWithReason","endLine":45,"endColumn":38},{"ruleId":"@typescript-eslint/no-deprecated","severity":2,"message":"`datetime` is deprecated. Use `z.iso.datetime()` instead.","line":46,"column":29,"nodeType":"Identifier","messageId":"deprecatedWithReason","endLine":46,"endColumn":37},{"ruleId":"@typescript-eslint/no-deprecated","severity":2,"message":"`datetime` is deprecated. Use `z.iso.datetime()` instead.","line":47,"column":30,"nodeType":"Identifier","messageId":"deprecatedWithReason","endLine":47,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":136,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":136,"endColumn":50},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":136,"column":28,"nodeType":"MemberExpression","endLine":136,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3853,3856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3853,3856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":136,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":136,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":206,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5507,5510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5507,5510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .page on an `any` value.","line":206,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":206,"endColumn":37}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Issue Search Parameters\n * Phase 3B: Centralized URL state management for issue filtering\n *\n * Provides type-safe parsing and URL building for issue-related search parameters\n * Based on Phase 3B URL State Management specification\n */\n\nimport { z } from \"zod\";\nimport { uuidSchema } from \"~/lib/validation/schemas\";\n\n// Comprehensive schema for issue filtering\nconst IssueSearchParamsSchema = z.object({\n  // Text search\n  search: z.string().max(100).optional(),\n\n  // Status filtering - supports multiple values\n  status: z\n    .union([z.string(), z.array(z.string())])\n    .optional()\n    .transform((val) => {\n      if (!val) return undefined;\n      return Array.isArray(val) ? val : val.split(\",\").filter(Boolean);\n    }),\n\n  // Priority filtering - supports multiple values\n  priority: z\n    .union([z.string(), z.array(z.string())])\n    .optional()\n    .transform((val) => {\n      if (!val) return undefined;\n      return Array.isArray(val) ? val : val.split(\",\").filter(Boolean);\n    }),\n\n  // User filtering\n  assignee: uuidSchema.optional(),\n  reporter: uuidSchema.optional(),\n\n  // Machine/location filtering\n  machine: uuidSchema.optional(),\n  location: uuidSchema.optional(),\n\n  // Date range filtering\n  created_after: z.string().datetime().optional(),\n  created_before: z.string().datetime().optional(),\n  updated_after: z.string().datetime().optional(),\n  updated_before: z.string().datetime().optional(),\n\n  // Sorting\n  sort: z\n    .enum([\n      \"created_at\",\n      \"updated_at\",\n      \"title\",\n      \"status\",\n      \"priority\",\n      \"machine\",\n    ])\n    .default(\"created_at\"),\n  order: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n\n  // Pagination\n  page: z.coerce.number().min(1).default(1),\n  limit: z.coerce.number().min(5).max(100).default(20),\n\n  // View mode\n  view: z.enum([\"list\", \"compact\", \"table\"]).default(\"list\"),\n});\n\nexport type IssueSearchParams = z.infer<typeof IssueSearchParamsSchema>;\n\n/**\n * Parse URL search parameters into a validated IssueSearchParams object\n * Returns default values if parsing fails\n */\nexport function parseIssueSearchParams(\n  searchParams: Record<string, string | string[] | undefined>,\n): IssueSearchParams {\n  const parsed = IssueSearchParamsSchema.safeParse(searchParams);\n\n  if (!parsed.success) {\n    console.warn(\n      \"Invalid issue search parameters:\",\n      z.treeifyError(parsed.error),\n    );\n    // Return default values on parsing error\n    return IssueSearchParamsSchema.parse({});\n  }\n\n  return parsed.data;\n}\n\n/**\n * Build issue URL with type-safe parameters\n * Merges with current searchParams to preserve unrelated parameters\n */\nexport function buildIssueUrl(\n  basePath: string,\n  params: Partial<IssueSearchParams>,\n  currentSearchParams?: Record<string, string | string[] | undefined>,\n): string {\n  const url = new URL(basePath, \"http://localhost\");\n\n  // Merge with current params to preserve unrelated parameters\n  if (currentSearchParams) {\n    Object.entries(currentSearchParams).forEach(([key, value]) => {\n      if (!(key in params) && value !== undefined) {\n        if (Array.isArray(value)) {\n          url.searchParams.set(key, value.join(\",\"));\n        } else {\n          url.searchParams.set(key, value);\n        }\n      }\n    });\n  }\n\n  // Add new parameters\n  Object.entries(params).forEach(([key, value]) => {\n    if (value === undefined) {\n      url.searchParams.delete(key);\n      return;\n    }\n\n    if (Array.isArray(value)) {\n      if (value.length > 0) {\n        url.searchParams.set(key, value.join(\",\"));\n      } else {\n        url.searchParams.delete(key);\n      }\n    } else {\n      // Convert to string and handle default values\n      const stringValue = value.toString();\n      const defaults = IssueSearchParamsSchema.parse({});\n\n      // Don't include default values in URL for cleaner URLs\n      const defaultValue = (defaults as any)[key];\n      if (defaultValue !== undefined && stringValue === String(defaultValue)) {\n        url.searchParams.delete(key);\n      } else {\n        url.searchParams.set(key, stringValue);\n      }\n    }\n  });\n\n  return url.pathname + url.search;\n}\n\n/**\n * Clean URL helper - removes empty/default parameters\n */\nexport function cleanIssueUrl(url: string): string {\n  const urlObj = new URL(url, \"http://localhost\");\n  const params = Object.fromEntries(urlObj.searchParams.entries());\n  const cleaned = parseIssueSearchParams(params);\n\n  return buildIssueUrl(urlObj.pathname, cleaned);\n}\n\n/**\n * Get filter description for metadata and UI display\n */\nexport function getIssueFilterDescription(\n  filters: IssueSearchParams,\n): string[] {\n  const descriptions: string[] = [];\n\n  if (filters.search) {\n    descriptions.push(`search: \"${filters.search}\"`);\n  }\n\n  if (filters.status?.length) {\n    descriptions.push(`status: ${filters.status.join(\", \")}`);\n  }\n\n  if (filters.priority?.length) {\n    descriptions.push(`priority: ${filters.priority.join(\", \")}`);\n  }\n\n  if (filters.assignee) {\n    descriptions.push(\"assigned filter\");\n  }\n\n  if (filters.machine) {\n    descriptions.push(\"machine filter\");\n  }\n\n  if (filters.location) {\n    descriptions.push(\"location filter\");\n  }\n\n  return descriptions;\n}\n\n/**\n * Generate canonical URL for SEO\n */\nexport function getIssueCanonicalUrl(\n  basePath: string,\n  params: IssueSearchParams,\n): string {\n  // Clean up parameters for canonical URL\n  const canonicalParams = { ...params };\n\n  // Remove pagination from canonical URLs\n  const cleanedParams = { ...canonicalParams };\n  delete (cleanedParams as any).page;\n\n  // Use cleaned URL for consistent canonical URLs\n  return cleanIssueUrl(buildIssueUrl(basePath, cleanedParams));\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/search-params/machine-search-params.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":155,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":155,"endColumn":50},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":155,"column":28,"nodeType":"MemberExpression","endLine":155,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4342,4345],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4342,4345],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":155,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":232,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6347,6350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6347,6350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .page on an `any` value.","line":232,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":232,"endColumn":37}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Machine Search Parameters\n * Phase 3B: Centralized URL state management for machine filtering\n *\n * Provides type-safe parsing and URL building for machine-related search parameters\n * Based on Phase 3B URL State Management specification\n */\n\nimport { z } from \"zod\";\n\n// Comprehensive schema for machine filtering\nconst MachineSearchParamsSchema = z.object({\n  // Text search\n  search: z.string().max(100).optional(),\n\n  // Location filtering - supports multiple values\n  location: z\n    .union([z.string(), z.array(z.string())])\n    .optional()\n    .transform((val) => {\n      if (!val) return undefined;\n      return Array.isArray(val) ? val : val.split(\",\").filter(Boolean);\n    }),\n\n  // Model filtering - supports multiple values\n  model: z\n    .union([z.string(), z.array(z.string())])\n    .optional()\n    .transform((val) => {\n      if (!val) return undefined;\n      return Array.isArray(val) ? val : val.split(\",\").filter(Boolean);\n    }),\n\n  // Owner filtering - supports multiple values\n  owner: z\n    .union([z.string(), z.array(z.string())])\n    .optional()\n    .transform((val) => {\n      if (!val) return undefined;\n      return Array.isArray(val) ? val : val.split(\",\").filter(Boolean);\n    }),\n\n  // Manufacturer filtering\n  manufacturer: z.string().optional(),\n\n  // Year range filtering\n  year_min: z.coerce\n    .number()\n    .min(1900)\n    .max(new Date().getFullYear() + 1)\n    .optional(),\n  year_max: z.coerce\n    .number()\n    .min(1900)\n    .max(new Date().getFullYear() + 1)\n    .optional(),\n\n  // QR Code filtering\n  hasQR: z\n    .union([\n      z.boolean(),\n      z.enum([\"true\", \"false\"]).transform((val) => val === \"true\"),\n    ])\n    .optional(),\n\n  // Status filtering (active, maintenance, retired)\n  status: z\n    .union([z.string(), z.array(z.string())])\n    .optional()\n    .transform((val) => {\n      if (!val) return undefined;\n      return Array.isArray(val) ? val : val.split(\",\").filter(Boolean);\n    }),\n\n  // Sorting\n  sort: z\n    .enum([\"created_at\", \"updated_at\", \"name\", \"model\", \"location\", \"year\"])\n    .default(\"created_at\"),\n  order: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n\n  // Pagination\n  page: z.coerce.number().min(1).default(1),\n  limit: z.coerce.number().min(5).max(100).default(20),\n\n  // View mode\n  view: z.enum([\"table\", \"grid\"]).default(\"table\"),\n});\n\nexport type MachineSearchParams = z.infer<typeof MachineSearchParamsSchema>;\n\n/**\n * Parse URL search parameters into a validated MachineSearchParams object\n * Returns default values if parsing fails\n */\nexport function parseMachineSearchParams(\n  searchParams: Record<string, string | string[] | undefined>,\n): MachineSearchParams {\n  const parsed = MachineSearchParamsSchema.safeParse(searchParams);\n\n  if (!parsed.success) {\n    console.warn(\n      \"Invalid machine search parameters:\",\n      z.treeifyError(parsed.error),\n    );\n    // Return default values on parsing error\n    return MachineSearchParamsSchema.parse({});\n  }\n\n  return parsed.data;\n}\n\n/**\n * Build machine URL with type-safe parameters\n * Merges with current searchParams to preserve unrelated parameters\n */\nexport function buildMachineUrl(\n  basePath: string,\n  params: Partial<MachineSearchParams>,\n  currentSearchParams?: Record<string, string | string[] | undefined>,\n): string {\n  const url = new URL(basePath, \"http://localhost\");\n\n  // Merge with current params to preserve unrelated parameters\n  if (currentSearchParams) {\n    Object.entries(currentSearchParams).forEach(([key, value]) => {\n      if (!(key in params) && value !== undefined) {\n        if (Array.isArray(value)) {\n          url.searchParams.set(key, value.join(\",\"));\n        } else {\n          url.searchParams.set(key, value);\n        }\n      }\n    });\n  }\n\n  // Add new parameters\n  Object.entries(params).forEach(([key, value]) => {\n    if (value === undefined) {\n      url.searchParams.delete(key);\n      return;\n    }\n\n    if (Array.isArray(value)) {\n      if (value.length > 0) {\n        url.searchParams.set(key, value.join(\",\"));\n      } else {\n        url.searchParams.delete(key);\n      }\n    } else {\n      // Convert to string and handle default values\n      const stringValue = value.toString();\n      const defaults = MachineSearchParamsSchema.parse({});\n\n      // Don't include default values in URL for cleaner URLs\n      const defaultValue = (defaults as any)[key];\n      if (defaultValue !== undefined && stringValue === String(defaultValue)) {\n        url.searchParams.delete(key);\n      } else {\n        url.searchParams.set(key, stringValue);\n      }\n    }\n  });\n\n  return url.pathname + url.search;\n}\n\n/**\n * Clean URL helper - removes empty/default parameters\n */\nexport function cleanMachineUrl(url: string): string {\n  const urlObj = new URL(url, \"http://localhost\");\n  const params = Object.fromEntries(urlObj.searchParams.entries());\n  const cleaned = parseMachineSearchParams(params);\n\n  return buildMachineUrl(urlObj.pathname, cleaned);\n}\n\n/**\n * Get filter description for metadata and UI display\n */\nexport function getMachineFilterDescription(\n  filters: MachineSearchParams,\n): string[] {\n  const descriptions: string[] = [];\n\n  if (filters.search) {\n    descriptions.push(`search: \"${filters.search}\"`);\n  }\n\n  if (filters.location?.length) {\n    descriptions.push(\"location filter\");\n  }\n\n  if (filters.model?.length) {\n    descriptions.push(\"model filter\");\n  }\n\n  if (filters.manufacturer) {\n    descriptions.push(`manufacturer: ${filters.manufacturer}`);\n  }\n\n  if (filters.year_min || filters.year_max) {\n    const yearRange = [];\n    if (filters.year_min) yearRange.push(`from ${String(filters.year_min)}`);\n    if (filters.year_max) yearRange.push(`to ${String(filters.year_max)}`);\n    descriptions.push(`year: ${yearRange.join(\" \")}`);\n  }\n\n  if (filters.hasQR !== undefined) {\n    descriptions.push(filters.hasQR ? \"with QR codes\" : \"without QR codes\");\n  }\n\n  if (filters.status?.length) {\n    descriptions.push(`status: ${filters.status.join(\", \")}`);\n  }\n\n  return descriptions;\n}\n\n/**\n * Generate canonical URL for SEO\n */\nexport function getMachineCanonicalUrl(\n  basePath: string,\n  params: MachineSearchParams,\n): string {\n  // Clean up parameters for canonical URL\n  const canonicalParams = { ...params };\n\n  // Remove pagination from canonical URLs\n  const cleanedParams = { ...canonicalParams };\n  delete (cleanedParams as any).page;\n\n  // Use cleaned URL for consistent canonical URLs\n  return cleanMachineUrl(buildMachineUrl(basePath, cleanedParams));\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/search-params/shared.ts","messages":[{"ruleId":"@typescript-eslint/no-deprecated","severity":2,"message":"`datetime` is deprecated. Use `z.iso.datetime()` instead.","line":59,"column":29,"nodeType":"Identifier","messageId":"deprecatedWithReason","endLine":59,"endColumn":37},{"ruleId":"@typescript-eslint/no-deprecated","severity":2,"message":"`datetime` is deprecated. Use `z.iso.datetime()` instead.","line":60,"column":30,"nodeType":"Identifier","messageId":"deprecatedWithReason","endLine":60,"endColumn":38},{"ruleId":"@typescript-eslint/no-deprecated","severity":2,"message":"`datetime` is deprecated. Use `z.iso.datetime()` instead.","line":61,"column":29,"nodeType":"Identifier","messageId":"deprecatedWithReason","endLine":61,"endColumn":37},{"ruleId":"@typescript-eslint/no-deprecated","severity":2,"message":"`datetime` is deprecated. Use `z.iso.datetime()` instead.","line":62,"column":30,"nodeType":"Identifier","messageId":"deprecatedWithReason","endLine":62,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1756,1759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1756,1759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2645,2648],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2645,2648],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2953,2956],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2953,2956],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .page on an `any` value.","line":108,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":108,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":172,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4307,4310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4307,4310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":178,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4474,4477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4474,4477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":215,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":215,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":215,"column":27,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":215,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toString on an `any` value.","line":215,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":215,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":219,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":219,"endColumn":52},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":219,"column":30,"nodeType":"MemberExpression","endLine":219,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":219,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5733,5736],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5733,5736],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":219,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":219,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":226,"column":37,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":226,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":229,"column":35,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":229,"endColumn":46}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Shared Search Parameter Utilities\n * Phase 3B: Common utilities for URL state management\n *\n * Provides shared types and utilities used across all search parameter implementations\n */\n\nimport { z } from \"zod\";\n\n/**\n * Common pagination schema used across all entities\n */\nexport const PaginationSchema = z.object({\n  page: z.coerce.number().min(1).default(1),\n  limit: z.coerce.number().min(5).max(100).default(20),\n});\n\n/**\n * Common sorting schema used across all entities\n */\nexport const SortingSchema = z.object({\n  order: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n});\n\n/**\n * Base search schema with common search functionality\n */\nexport const BaseSearchSchema = z.object({\n  search: z.string().max(100).optional(),\n});\n\n/**\n * Generic array parameter transformer\n * Handles both single strings and arrays, splitting on commas\n */\nexport const arrayParamTransformer = z\n  .union([z.string(), z.array(z.string())])\n  .optional()\n  .transform((val) => {\n    if (!val) return undefined;\n    return Array.isArray(val) ? val : val.split(\",\").filter(Boolean);\n  });\n\n/**\n * Generic boolean parameter transformer\n * Handles string boolean values from URL parameters\n */\nexport const booleanParamTransformer = z\n  .union([\n    z.boolean(),\n    z.enum([\"true\", \"false\"]).transform((val) => val === \"true\"),\n  ])\n  .optional();\n\n/**\n * Date range schema for filtering\n */\nexport const DateRangeSchema = z.object({\n  created_after: z.string().datetime().optional(),\n  created_before: z.string().datetime().optional(),\n  updated_after: z.string().datetime().optional(),\n  updated_before: z.string().datetime().optional(),\n});\n\n/**\n * Generate SEO-friendly URL by removing default parameters\n */\nexport function cleanUrlParameters<T extends Record<string, any>>(\n  url: string,\n  parser: (params: Record<string, string | string[] | undefined>) => T,\n  builder: (basePath: string, params: Partial<T>) => string,\n): string {\n  const urlObj = new URL(url, \"http://localhost\");\n  const params = Object.fromEntries(urlObj.searchParams.entries());\n  const cleaned = parser(params);\n\n  return builder(urlObj.pathname, cleaned);\n}\n\n/**\n * Build metadata description from filter descriptions\n */\nexport function buildMetadataDescription(\n  baseDescription: string,\n  filterDescriptions: string[],\n  totalCount: number,\n): string {\n  if (filterDescriptions.length === 0) {\n    return `${baseDescription} - ${String(totalCount)} total`;\n  }\n\n  return `${baseDescription} (${filterDescriptions.join(\", \")}) - ${String(totalCount)} found`;\n}\n\n/**\n * Generate canonical URL without pagination\n */\nexport function generateCanonicalUrl<T extends Record<string, any>>(\n  basePath: string,\n  params: T,\n  builder: (basePath: string, params: Partial<T>) => string,\n): string {\n  const canonicalParams = { ...params };\n\n  // Remove pagination from canonical URLs\n  const cleanedParams = { ...canonicalParams };\n  if (\"page\" in cleanedParams) {\n    delete (cleanedParams as any).page;\n  }\n\n  return builder(basePath, cleanedParams);\n}\n\n/**\n * Error handling for malformed search parameters\n */\nexport interface SearchParamError {\n  field: string;\n  message: string;\n  code: string;\n}\n\n/**\n * Extract validation errors from Zod parsing result\n */\nexport function extractSearchParamErrors(\n  error: z.ZodError,\n): SearchParamError[] {\n  return error.issues.map((err) => ({\n    field: err.path.join(\".\"),\n    message: err.message,\n    code: err.code,\n  }));\n}\n\n/**\n * Safe search parameter parser with error logging\n */\nexport function safeParseSearchParams<T>(\n  searchParams: Record<string, string | string[] | undefined>,\n  schema: z.ZodType<T>,\n  entityName: string,\n): T {\n  const parsed = schema.safeParse(searchParams);\n\n  if (!parsed.success) {\n    const errors = extractSearchParamErrors(parsed.error);\n    console.warn(`Invalid ${entityName} search parameters:`, {\n      errors,\n      receivedParams: searchParams,\n    });\n\n    // Return default values on parsing error\n    return schema.parse({});\n  }\n\n  return parsed.data;\n}\n\n/**\n * URL builder options for advanced URL construction\n */\nexport interface UrlBuilderOptions {\n  preserveUnrelated?: boolean;\n  includeDefaults?: boolean;\n  cleanOutput?: boolean;\n}\n\n/**\n * Advanced URL builder with options\n */\nexport function buildUrlWithOptions<T extends Record<string, any>>(\n  basePath: string,\n  params: Partial<T>,\n  currentSearchParams:\n    | Record<string, string | string[] | undefined>\n    | undefined,\n  defaultParser: (params: any) => T,\n  options: UrlBuilderOptions = {},\n): string {\n  const { preserveUnrelated = true, includeDefaults = false } = options;\n\n  const url = new URL(basePath, \"http://localhost\");\n\n  // Preserve unrelated parameters if requested\n  if (preserveUnrelated && currentSearchParams) {\n    Object.entries(currentSearchParams).forEach(([key, value]) => {\n      if (!(key in params) && value !== undefined) {\n        if (Array.isArray(value)) {\n          url.searchParams.set(key, value.join(\",\"));\n        } else {\n          url.searchParams.set(key, value);\n        }\n      }\n    });\n  }\n\n  // Get defaults for comparison\n  const defaults = includeDefaults ? {} : defaultParser({});\n\n  // Add new parameters\n  Object.entries(params).forEach(([key, value]) => {\n    if (value === undefined || value === null) {\n      url.searchParams.delete(key);\n      return;\n    }\n\n    if (Array.isArray(value)) {\n      if (value.length > 0) {\n        url.searchParams.set(key, value.join(\",\"));\n      } else {\n        url.searchParams.delete(key);\n      }\n    } else {\n      const stringValue = value.toString();\n\n      // Skip default values unless explicitly requested\n      if (!includeDefaults && typeof defaults === \"object\") {\n        const defaultValue = (defaults as any)[key];\n        if (\n          defaultValue !== undefined &&\n          stringValue === String(defaultValue)\n        ) {\n          url.searchParams.delete(key);\n        } else {\n          url.searchParams.set(key, stringValue);\n        }\n      } else {\n        url.searchParams.set(key, stringValue);\n      }\n    }\n  });\n\n  return url.pathname + url.search;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/services/notification-generator.ts","messages":[{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"number\" of template literal expression.","line":232,"column":20,"nodeType":"MemberExpression","messageId":"invalidType","endLine":232,"endColumn":42},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"number\" of template literal expression.","line":291,"column":20,"nodeType":"MemberExpression","messageId":"invalidType","endLine":291,"endColumn":42},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"number\" of template literal expression.","line":356,"column":20,"nodeType":"MemberExpression","messageId":"invalidType","endLine":356,"endColumn":42},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"number\" of template literal expression.","line":418,"column":20,"nodeType":"MemberExpression","messageId":"invalidType","endLine":418,"endColumn":42}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Notification Generation Service\n * Automatically creates notifications for issue events, comments, and assignments\n */\n\nimport { db } from \"~/lib/dal/shared\";\nimport { notifications, issues } from \"~/server/db/schema\";\nimport { generatePrefixedId } from \"~/lib/utils/id-generation\";\nimport { createNotificationActionUrl } from \"~/lib/dal/notifications\";\nimport { eq, and } from \"drizzle-orm\";\n\n/**\n * Notification types that can be generated\n */\nexport type NotificationType =\n  | \"ISSUE_CREATED\"\n  | \"ISSUE_UPDATED\"\n  | \"ISSUE_ASSIGNED\"\n  | \"ISSUE_COMMENTED\"\n  | \"MACHINE_ASSIGNED\"\n  | \"SYSTEM_ANNOUNCEMENT\";\n\n/**\n * Entity types for notifications\n */\nexport type NotificationEntityType =\n  | \"ISSUE\"\n  | \"MACHINE\"\n  | \"COMMENT\"\n  | \"ORGANIZATION\";\n\n/**\n * Notification generation context\n */\ninterface NotificationContext {\n  organizationId: string;\n  actorId: string; // Who triggered the notification\n  actorName: string;\n}\n\n/**\n * Base notification data\n */\ninterface BaseNotificationData {\n  type: NotificationType;\n  entityType: NotificationEntityType;\n  entityId: string;\n  message: string;\n  actionUrl?: string;\n}\n\n/**\n * Create a notification for a specific user\n */\nasync function createNotificationForUser(\n  userId: string,\n  notificationData: BaseNotificationData,\n  context: NotificationContext,\n): Promise<string | null> {\n  // Don't notify the actor of their own actions\n  if (userId === context.actorId) {\n    return null;\n  }\n\n  const notificationId = generatePrefixedId(\"notification\");\n\n  await db.insert(notifications).values({\n    id: notificationId,\n    user_id: userId,\n    organization_id: context.organizationId,\n    type: notificationData.type,\n    entity_type: notificationData.entityType,\n    entity_id: notificationData.entityId,\n    message: notificationData.message,\n    action_url:\n      notificationData.actionUrl ??\n      createNotificationActionUrl(\n        notificationData.entityType,\n        notificationData.entityId,\n      ),\n    read: false,\n  });\n\n  return notificationId;\n}\n\n/**\n * Get users who should be notified about an issue\n */\nasync function getIssueStakeholders(\n  issueId: string,\n  organizationId: string,\n): Promise<{\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n}[]> {\n  const issue = await db.query.issues.findFirst({\n    where: and(\n      eq(issues.id, issueId),\n      eq(issues.organization_id, organizationId),\n    ),\n    with: {\n      assignedTo: {\n        columns: { id: true, name: true, email: true },\n      },\n      createdBy: {\n        columns: { id: true, name: true, email: true },\n      },\n      machine: {\n        columns: { id: true, name: true },\n        with: {\n          owner: {\n            columns: { id: true, name: true, email: true },\n          },\n        },\n      },\n    },\n  });\n\n  if (!issue) return [];\n\n  const stakeholders: {\n    id: string;\n    name: string;\n    email: string;\n    role: string;\n  }[] = [];\n\n  // Add assignee\n  if (issue.assignedTo) {\n    stakeholders.push({\n      ...issue.assignedTo,\n      name: issue.assignedTo.name ?? issue.assignedTo.email ?? \"Unknown User\",\n      email: issue.assignedTo.email ?? \"\",\n      role: \"assignee\",\n    });\n  }\n\n  // Add issue creator\n  if (issue.createdBy) {\n    stakeholders.push({\n      ...issue.createdBy,\n      name: issue.createdBy.name ?? issue.createdBy.email ?? \"Unknown User\",\n      email: issue.createdBy.email ?? \"\",\n      role: \"creator\",\n    });\n  }\n\n  // Add machine owner\n  if (issue.machine.owner) {\n    stakeholders.push({\n      ...issue.machine.owner,\n      name:\n        issue.machine.owner.name ?? issue.machine.owner.email ?? \"Unknown User\",\n      email: issue.machine.owner.email ?? \"\",\n      role: \"machine_owner\",\n    });\n  }\n\n  // Remove duplicates by user ID\n  const uniqueStakeholders = stakeholders.reduce<typeof stakeholders>(\n    (acc, stakeholder) => {\n      if (!acc.find((s) => s.id === stakeholder.id)) {\n        acc.push(stakeholder);\n      }\n      return acc;\n    },\n    [],\n  );\n\n  return uniqueStakeholders;\n}\n\n/**\n * Generate notifications for new comment on issue\n */\nexport async function generateCommentNotifications(\n  issueId: string,\n  _commentId: string,\n  context: NotificationContext,\n): Promise<string[]> {\n  try {\n    // Get issue details and stakeholders\n    const issue = await db.query.issues.findFirst({\n      where: and(\n        eq(issues.id, issueId),\n        eq(issues.organization_id, context.organizationId),\n      ),\n      columns: { id: true, title: true },\n      with: {\n        machine: {\n          columns: { name: true },\n        },\n      },\n    });\n\n    if (!issue) {\n      console.error(`Issue ${issueId} not found for comment notification`);\n      return [];\n    }\n\n    const stakeholders = await getIssueStakeholders(\n      issueId,\n      context.organizationId,\n    );\n    const notificationIds: string[] = [];\n\n    const message = `${context.actorName} commented on issue \"${issue.title}\" (${issue.machine.name})`;\n\n    // Create notifications for all stakeholders\n    for (const stakeholder of stakeholders) {\n      const notificationId = await createNotificationForUser(\n        stakeholder.id,\n        {\n          type: \"ISSUE_COMMENTED\",\n          entityType: \"ISSUE\",\n          entityId: issueId,\n          message,\n          actionUrl: `/issues/${issueId}#comments`,\n        },\n        context,\n      );\n\n      if (notificationId) {\n        notificationIds.push(notificationId);\n      }\n    }\n\n    console.log(\n      `Generated ${notificationIds.length} comment notifications for issue ${issueId}`,\n    );\n    return notificationIds;\n  } catch (error) {\n    console.error(\"Failed to generate comment notifications:\", error);\n    return [];\n  }\n}\n\n/**\n * Generate notifications for issue assignment\n */\nexport async function generateAssignmentNotifications(\n  issueId: string,\n  newAssigneeId: string | null,\n  _previousAssigneeId: string | null,\n  context: NotificationContext,\n): Promise<string[]> {\n  try {\n    const issue = await db.query.issues.findFirst({\n      where: and(\n        eq(issues.id, issueId),\n        eq(issues.organization_id, context.organizationId),\n      ),\n      columns: { id: true, title: true },\n      with: {\n        machine: {\n          columns: { name: true },\n        },\n      },\n    });\n\n    if (!issue) {\n      console.error(`Issue ${issueId} not found for assignment notification`);\n      return [];\n    }\n\n    const notificationIds: string[] = [];\n    const message = `${context.actorName} assigned you to issue \"${issue.title}\" (${issue.machine.name})`;\n\n    // Notify new assignee (if different from actor)\n    if (newAssigneeId && newAssigneeId !== context.actorId) {\n      const notificationId = await createNotificationForUser(\n        newAssigneeId,\n        {\n          type: \"ISSUE_ASSIGNED\",\n          entityType: \"ISSUE\",\n          entityId: issueId,\n          message,\n        },\n        context,\n      );\n\n      if (notificationId) {\n        notificationIds.push(notificationId);\n      }\n    }\n\n    console.log(\n      `Generated ${notificationIds.length} assignment notifications for issue ${issueId}`,\n    );\n    return notificationIds;\n  } catch (error) {\n    console.error(\"Failed to generate assignment notifications:\", error);\n    return [];\n  }\n}\n\n/**\n * Generate notifications for issue status changes\n */\nexport async function generateStatusChangeNotifications(\n  issueId: string,\n  newStatusName: string,\n  context: NotificationContext,\n): Promise<string[]> {\n  try {\n    const issue = await db.query.issues.findFirst({\n      where: and(\n        eq(issues.id, issueId),\n        eq(issues.organization_id, context.organizationId),\n      ),\n      columns: { id: true, title: true },\n      with: {\n        machine: {\n          columns: { name: true },\n        },\n      },\n    });\n\n    if (!issue) {\n      console.error(\n        `Issue ${issueId} not found for status change notification`,\n      );\n      return [];\n    }\n\n    const stakeholders = await getIssueStakeholders(\n      issueId,\n      context.organizationId,\n    );\n    const notificationIds: string[] = [];\n\n    const message = `${context.actorName} updated the status of \"${issue.title}\" to ${newStatusName} (${issue.machine.name})`;\n\n    // Create notifications for all stakeholders\n    for (const stakeholder of stakeholders) {\n      const notificationId = await createNotificationForUser(\n        stakeholder.id,\n        {\n          type: \"ISSUE_UPDATED\",\n          entityType: \"ISSUE\",\n          entityId: issueId,\n          message,\n        },\n        context,\n      );\n\n      if (notificationId) {\n        notificationIds.push(notificationId);\n      }\n    }\n\n    console.log(\n      `Generated ${notificationIds.length} status change notifications for issue ${issueId}`,\n    );\n    return notificationIds;\n  } catch (error) {\n    console.error(\"Failed to generate status change notifications:\", error);\n    return [];\n  }\n}\n\n/**\n * Generate notifications for new issue creation\n */\nexport async function generateIssueCreationNotifications(\n  issueId: string,\n  context: NotificationContext,\n): Promise<string[]> {\n  try {\n    const issue = await db.query.issues.findFirst({\n      where: and(\n        eq(issues.id, issueId),\n        eq(issues.organization_id, context.organizationId),\n      ),\n      columns: { id: true, title: true },\n      with: {\n        machine: {\n          columns: { name: true },\n          with: {\n            owner: {\n              columns: { id: true, name: true, email: true },\n            },\n          },\n        },\n      },\n    });\n\n    if (!issue) {\n      console.error(`Issue ${issueId} not found for creation notification`);\n      return [];\n    }\n\n    const notificationIds: string[] = [];\n    const message = `New issue \"${issue.title}\" reported for ${issue.machine.name}`;\n\n    // Notify machine owner (if different from creator)\n    if (issue.machine.owner && issue.machine.owner.id !== context.actorId) {\n      const notificationId = await createNotificationForUser(\n        issue.machine.owner.id,\n        {\n          type: \"ISSUE_CREATED\",\n          entityType: \"ISSUE\",\n          entityId: issueId,\n          message,\n        },\n        context,\n      );\n\n      if (notificationId) {\n        notificationIds.push(notificationId);\n      }\n    }\n\n    console.log(\n      `Generated ${notificationIds.length} issue creation notifications for issue ${issueId}`,\n    );\n    return notificationIds;\n  } catch (error) {\n    console.error(\"Failed to generate issue creation notifications:\", error);\n    return [];\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/services/qr-code-service.ts","messages":[{"ruleId":"no-restricted-properties","severity":2,"message":"'process.env' is restricted from being used. Use the 'env' object from '~/env.js' instead of 'process.env'. It is validated and type-safe. See src/env.js for available variables and T3 Env documentation: https://env.t3.gg/docs/introduction","line":36,"column":7,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":36,"endColumn":18},{"ruleId":"no-restricted-properties","severity":2,"message":"'process.env' is restricted from being used. Use the 'env' object from '~/env.js' instead of 'process.env'. It is validated and type-safe. See src/env.js for available variables and T3 Env documentation: https://env.t3.gg/docs/introduction","line":82,"column":7,"nodeType":"MemberExpression","messageId":"restrictedObjectProperty","endLine":82,"endColumn":18}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * QR Code Generation Service\n * Phase 3B: Actual QR code generation for machine reporting\n */\n\nimport QRCode from \"qrcode\";\n\nexport interface QRCodeOptions {\n  size?: number;\n  margin?: number;\n  color?: {\n    dark: string;\n    light: string;\n  };\n}\n\nexport interface GeneratedQRCode {\n  id: string;\n  url: string;\n  dataUrl: string;\n  machineId: string;\n  generatedAt: Date;\n}\n\n/**\n * Generate QR code for machine reporting\n * Creates actual QR code image as base64 data URL\n */\nexport async function generateMachineQRCode(\n  machineId: string,\n  options: QRCodeOptions = {},\n): Promise<GeneratedQRCode> {\n  try {\n    // Build the reporting URL that the QR code will link to\n    const baseUrl =\n      process.env[\"NEXT_PUBLIC_APP_URL\"] ?? \"https://pinpoint.app\";\n    const reportingUrl = `${baseUrl}/report?machine=${machineId}`;\n\n    // QR code generation options\n    const qrOptions = {\n      width: options.size ?? 256,\n      margin: options.margin ?? 2,\n      color: {\n        dark: options.color?.dark ?? \"#000000\",\n        light: options.color?.light ?? \"#FFFFFF\",\n      },\n      errorCorrectionLevel: \"M\" as const,\n    };\n\n    // Generate QR code as base64 data URL\n    const dataUrl = await QRCode.toDataURL(reportingUrl, qrOptions);\n\n    // Generate unique ID for this QR code\n    const qrCodeId = crypto.randomUUID();\n\n    // For now, we'll use the data URL as both the URL and dataUrl\n    // In a production app, you might want to save the image to storage\n    // and return a URL to the stored image\n\n    return {\n      id: qrCodeId,\n      url: dataUrl, // In production, this might be a stored image URL\n      dataUrl,\n      machineId,\n      generatedAt: new Date(),\n    };\n  } catch (error) {\n    console.error(\"QR code generation error:\", error);\n    throw new Error(\"Failed to generate QR code\");\n  }\n}\n\n/**\n * Generate QR code as PNG buffer for downloads\n */\nexport async function generateMachineQRCodeBuffer(\n  machineId: string,\n  options: QRCodeOptions = {},\n): Promise<Buffer> {\n  try {\n    const baseUrl =\n      process.env[\"NEXT_PUBLIC_APP_URL\"] ?? \"https://pinpoint.app\";\n    const reportingUrl = `${baseUrl}/report?machine=${machineId}`;\n\n    const qrOptions = {\n      width: options.size ?? 256,\n      margin: options.margin ?? 2,\n      color: {\n        dark: options.color?.dark ?? \"#000000\",\n        light: options.color?.light ?? \"#FFFFFF\",\n      },\n      errorCorrectionLevel: \"M\" as const,\n    };\n\n    // Generate QR code as PNG buffer\n    const buffer = await QRCode.toBuffer(reportingUrl, qrOptions);\n    return buffer;\n  } catch (error) {\n    console.error(\"QR code buffer generation error:\", error);\n    throw new Error(\"Failed to generate QR code buffer\");\n  }\n}\n\n/**\n * Validate QR code generation parameters\n */\nexport function validateQRCodeParams(machineId: string): boolean {\n  if (!machineId || typeof machineId !== \"string\") {\n    return false;\n  }\n\n  if (machineId.length < 1 || machineId.length > 100) {\n    return false;\n  }\n\n  // Basic UUID format validation\n  const uuidRegex =\n    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  return uuidRegex.test(machineId);\n}\n\n/**\n * Get default QR code options\n */\nexport function getDefaultQROptions(): QRCodeOptions {\n  return {\n    size: 256,\n    margin: 2,\n    color: {\n      dark: \"#1f2937\", // Dark gray\n      light: \"#ffffff\", // White\n    },\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/services/search-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[633,636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[633,636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[940,943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[940,943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":179,"column":9,"nodeType":"MemberExpression","endLine":179,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Universal Search Service for Phase 3C\n * Server-side search logic with PostgreSQL full-text search and cross-entity capabilities\n */\n\nimport { cache } from \"react\";\nimport { and, eq, sql, desc, count } from \"drizzle-orm\";\nimport { db } from \"~/lib/dal/shared\";\nimport {\n  issues,\n  machines,\n  users,\n  locations,\n  models,\n  memberships,\n  priorities,\n  issueStatuses,\n} from \"~/server/db/schema\";\n\nexport type SearchEntity =\n  | \"issues\"\n  | \"machines\"\n  | \"users\"\n  | \"locations\"\n  | \"all\";\n\nexport interface SearchOptions {\n  query: string;\n  entities: SearchEntity[];\n  organizationId: string;\n  filters?: Record<string, any>;\n  pagination?: {\n    page: number;\n    limit: number;\n  };\n  sorting?: {\n    field: string;\n    order: \"asc\" | \"desc\";\n  };\n}\n\nexport interface SearchResult {\n  entity: SearchEntity;\n  id: string;\n  title: string;\n  subtitle?: string;\n  description?: string;\n  url: string;\n  metadata: Record<string, any>;\n  relevance: number;\n}\n\nexport interface SearchResponse {\n  results: SearchResult[];\n  totalCount: number;\n  entityCounts: Record<SearchEntity, number>;\n  hasMore: boolean;\n  page: number;\n  limit: number;\n}\n\n/**\n * Request-level cached universal search\n * Uses React 19 cache() for performance optimization\n */\nexport const performUniversalSearch = cache(\n  async (options: SearchOptions): Promise<SearchResponse> => {\n    const {\n      query,\n      entities,\n      organizationId,\n      pagination = { page: 1, limit: 20 },\n    } = options;\n    const offset = (pagination.page - 1) * pagination.limit;\n\n    if (!query.trim() || query.length < 2) {\n      return {\n        results: [],\n        totalCount: 0,\n        entityCounts: {} as Record<SearchEntity, number>,\n        hasMore: false,\n        page: pagination.page,\n        limit: pagination.limit,\n      };\n    }\n\n    // Execute searches and counts in parallel for performance\n    const searchPromises: Promise<SearchResult[]>[] = [];\n    const countPromises: Promise<{ entity: SearchEntity; count: number }>[] =\n      [];\n\n    // Determine which entities to search\n    const entitiesToSearch = entities.includes(\"all\")\n      ? ([\"issues\", \"machines\", \"users\", \"locations\"] as SearchEntity[])\n      : entities;\n\n    // Issue search\n    if (entitiesToSearch.includes(\"issues\")) {\n      searchPromises.push(\n        searchIssues(\n          query,\n          organizationId,\n          Math.ceil(pagination.limit / entitiesToSearch.length),\n        ),\n      );\n      countPromises.push(\n        countIssues(query, organizationId).then((count) => ({\n          entity: \"issues\" as const,\n          count,\n        })),\n      );\n    }\n\n    // Machine search\n    if (entitiesToSearch.includes(\"machines\")) {\n      searchPromises.push(\n        searchMachines(\n          query,\n          organizationId,\n          Math.ceil(pagination.limit / entitiesToSearch.length),\n        ),\n      );\n      countPromises.push(\n        countMachines(query, organizationId).then((count) => ({\n          entity: \"machines\" as const,\n          count,\n        })),\n      );\n    }\n\n    // User search\n    if (entitiesToSearch.includes(\"users\")) {\n      searchPromises.push(\n        searchUsers(\n          query,\n          organizationId,\n          Math.ceil(pagination.limit / entitiesToSearch.length),\n        ),\n      );\n      countPromises.push(\n        countUsers(query, organizationId).then((count) => ({\n          entity: \"users\" as const,\n          count,\n        })),\n      );\n    }\n\n    // Location search\n    if (entitiesToSearch.includes(\"locations\")) {\n      searchPromises.push(\n        searchLocations(\n          query,\n          organizationId,\n          Math.ceil(pagination.limit / entitiesToSearch.length),\n        ),\n      );\n      countPromises.push(\n        countLocations(query, organizationId).then((count) => ({\n          entity: \"locations\" as const,\n          count,\n        })),\n      );\n    }\n\n    // Execute all queries in parallel\n    const [searchResults, countResults] = await Promise.all([\n      Promise.all(searchPromises),\n      Promise.all(countPromises),\n    ]);\n\n    // Combine and sort results by relevance\n    const allResults = searchResults\n      .flat()\n      .sort((a, b) => b.relevance - a.relevance);\n\n    // Build entity count map\n    const entityCounts = countResults.reduce(\n      (acc, { entity, count }) => {\n        acc[entity] = count;\n        return acc;\n      },\n      {} as Record<SearchEntity, number>,\n    );\n\n    // Apply pagination to combined results\n    const totalCount = allResults.length;\n    const paginatedResults = allResults.slice(\n      offset,\n      offset + pagination.limit,\n    );\n    const hasMore = offset + pagination.limit < totalCount;\n\n    return {\n      results: paginatedResults,\n      totalCount,\n      entityCounts,\n      hasMore,\n      page: pagination.page,\n      limit: pagination.limit,\n    };\n  },\n);\n\n/**\n * Search issues using full-text search with organization scoping\n */\nasync function searchIssues(\n  query: string,\n  organizationId: string,\n  limit: number,\n): Promise<SearchResult[]> {\n  const searchVector = sql`to_tsvector('english', ${issues.title} || ' ' || coalesce(${issues.description}, '') || ' ' || coalesce(${issues.consistency}, ''))`;\n  const searchQuery = sql`to_tsquery('english', ${query\n    .split(\" \")\n    .map((term) => `${term}:*`)\n    .join(\" & \")})`;\n\n  const results = await db\n    .select({\n      id: issues.id,\n      title: issues.title,\n      description: issues.description,\n      consistency: issues.consistency,\n      createdAt: issues.created_at,\n      machineName: machines.name,\n      machineId: machines.id,\n      statusName: issueStatuses.name,\n      statusCategory: issueStatuses.category,\n      priorityName: priorities.name,\n      priorityOrder: priorities.order,\n      assigneeName: users.name,\n      assigneeId: users.id,\n      relevance: sql<number>`ts_rank(${searchVector}, ${searchQuery})`.as(\n        \"relevance\",\n      ),\n    })\n    .from(issues)\n    .leftJoin(machines, eq(issues.machine_id, machines.id))\n    .leftJoin(issueStatuses, eq(issues.status_id, issueStatuses.id))\n    .leftJoin(priorities, eq(issues.priority_id, priorities.id))\n    .leftJoin(users, eq(issues.assigned_to_id, users.id))\n    .where(\n      and(\n        eq(issues.organization_id, organizationId),\n        sql`${searchVector} @@ ${searchQuery}`,\n      ),\n    )\n    .orderBy(\n      sql`ts_rank(${searchVector}, ${searchQuery}) DESC`,\n      desc(issues.created_at),\n    )\n    .limit(limit);\n\n  return results.map((issue) => ({\n    entity: \"issues\" as const,\n    id: issue.id,\n    title: issue.title,\n    subtitle: issue.machineName\n      ? `${issue.machineName} • ${issue.statusName ?? \"No status\"}`\n      : (issue.statusName ?? \"No status\"),\n    description:\n      (issue.description?.slice(0, 150) ?? \"\") +\n      (issue.description && issue.description.length > 150 ? \"...\" : \"\"),\n    url: `/issues/${issue.id}`,\n    metadata: {\n      status: issue.statusName,\n      statusCategory: issue.statusCategory,\n      priority: issue.priorityName,\n      machine: issue.machineName,\n      machineId: issue.machineId,\n      assignee: issue.assigneeName,\n      assigneeId: issue.assigneeId,\n      createdAt: issue.createdAt,\n      consistency: issue.consistency,\n    },\n    relevance: issue.relevance * 100, // Scale relevance for sorting\n  }));\n}\n\n/**\n * Search machines using full-text search with organization scoping\n */\nasync function searchMachines(\n  query: string,\n  organizationId: string,\n  limit: number,\n): Promise<SearchResult[]> {\n  const searchVector = sql`to_tsvector('english', ${machines.name} || ' ' || coalesce(${models.name}, '') || ' ' || coalesce(${models.manufacturer}, ''))`;\n  const searchQuery = sql`to_tsquery('english', ${query\n    .split(\" \")\n    .map((term) => `${term}:*`)\n    .join(\" & \")})`;\n\n  const results = await db\n    .select({\n      id: machines.id,\n      name: machines.name,\n      modelName: models.name,\n      manufacturer: models.manufacturer,\n      year: models.year,\n      locationName: locations.name,\n      locationId: locations.id,\n      qrCodeId: machines.qr_code_id,\n      createdAt: machines.created_at,\n      issueCount: sql<number>`(\n        SELECT COUNT(*) \n        FROM ${issues} \n        WHERE ${issues.machine_id} = ${machines.id} \n        AND ${issues.organization_id} = ${organizationId}\n        AND ${issues.status_id} IN (\n          SELECT id FROM ${issueStatuses} \n          WHERE ${issueStatuses.category} IN ('NEW', 'IN_PROGRESS')\n        )\n      )`.as(\"issue_count\"),\n      relevance: sql<number>`ts_rank(${searchVector}, ${searchQuery})`.as(\n        \"relevance\",\n      ),\n    })\n    .from(machines)\n    .leftJoin(models, eq(machines.model_id, models.id))\n    .leftJoin(locations, eq(machines.location_id, locations.id))\n    .where(\n      and(\n        eq(machines.organization_id, organizationId),\n        sql`${searchVector} @@ ${searchQuery}`,\n      ),\n    )\n    .orderBy(\n      sql`ts_rank(${searchVector}, ${searchQuery}) DESC`,\n      desc(machines.created_at),\n    )\n    .limit(limit);\n\n  return results.map((machine) => ({\n    entity: \"machines\" as const,\n    id: machine.id,\n    title: machine.name,\n    subtitle: `${machine.manufacturer ?? \"Unknown\"} ${machine.modelName ?? \"Model\"}${machine.year ? ` (${String(machine.year)})` : \"\"}`,\n    description: machine.locationName\n      ? `Located at ${machine.locationName}`\n      : \"Location not specified\",\n    url: `/machines/${machine.id}`,\n    metadata: {\n      model: machine.modelName,\n      manufacturer: machine.manufacturer,\n      year: machine.year,\n      location: machine.locationName,\n      locationId: machine.locationId,\n      qrCodeId: machine.qrCodeId,\n      issueCount: machine.issueCount,\n      createdAt: machine.createdAt,\n    },\n    relevance: machine.relevance * 100,\n  }));\n}\n\n/**\n * Search users through organization memberships\n */\nasync function searchUsers(\n  query: string,\n  organizationId: string,\n  limit: number,\n): Promise<SearchResult[]> {\n  const searchVector = sql`to_tsvector('english', coalesce(${users.name}, '') || ' ' || coalesce(${users.email}, '') || ' ' || coalesce(${users.bio}, ''))`;\n  const searchQuery = sql`to_tsquery('english', ${query\n    .split(\" \")\n    .map((term) => `${term}:*`)\n    .join(\" & \")})`;\n\n  const results = await db\n    .select({\n      id: users.id,\n      name: users.name,\n      email: users.email,\n      bio: users.bio,\n      profilePicture: users.profile_picture,\n      createdAt: users.created_at,\n      relevance: sql<number>`ts_rank(${searchVector}, ${searchQuery})`.as(\n        \"relevance\",\n      ),\n    })\n    .from(users)\n    .innerJoin(memberships, eq(users.id, memberships.user_id))\n    .where(\n      and(\n        eq(memberships.organization_id, organizationId),\n        sql`${searchVector} @@ ${searchQuery}`,\n      ),\n    )\n    .orderBy(\n      sql`ts_rank(${searchVector}, ${searchQuery}) DESC`,\n      desc(users.created_at),\n    )\n    .limit(limit);\n\n  return results.map((user) => ({\n    entity: \"users\" as const,\n    id: user.id,\n    title: user.name ?? user.email ?? \"Unknown User\",\n    subtitle: user.email ?? \"\",\n    description:\n      (user.bio?.slice(0, 150) ?? \"\") +\n      (user.bio && user.bio.length > 150 ? \"...\" : \"\"),\n    url: `/users/${user.id}`,\n    metadata: {\n      email: user.email,\n      bio: user.bio,\n      profilePicture: user.profilePicture,\n      createdAt: user.createdAt,\n    },\n    relevance: user.relevance * 100,\n  }));\n}\n\n/**\n * Search locations using full-text search with organization scoping\n */\nasync function searchLocations(\n  query: string,\n  organizationId: string,\n  limit: number,\n): Promise<SearchResult[]> {\n  const searchVector = sql`to_tsvector('english', ${locations.name} || ' ' || coalesce(${locations.description}, '') || ' ' || coalesce(${locations.city}, ''))`;\n  const searchQuery = sql`to_tsquery('english', ${query\n    .split(\" \")\n    .map((term) => `${term}:*`)\n    .join(\" & \")})`;\n\n  const results = await db\n    .select({\n      id: locations.id,\n      name: locations.name,\n      description: locations.description,\n      city: locations.city,\n      state: locations.state,\n      street: locations.street,\n      createdAt: locations.created_at,\n      machineCount: sql<number>`(\n        SELECT COUNT(*) \n        FROM ${machines} \n        WHERE ${machines.location_id} = ${locations.id} \n        AND ${machines.organization_id} = ${organizationId}\n      )`.as(\"machine_count\"),\n      relevance: sql<number>`ts_rank(${searchVector}, ${searchQuery})`.as(\n        \"relevance\",\n      ),\n    })\n    .from(locations)\n    .where(\n      and(\n        eq(locations.organization_id, organizationId),\n        sql`${searchVector} @@ ${searchQuery}`,\n      ),\n    )\n    .orderBy(\n      sql`ts_rank(${searchVector}, ${searchQuery}) DESC`,\n      desc(locations.created_at),\n    )\n    .limit(limit);\n\n  return results.map((location) => ({\n    entity: \"locations\" as const,\n    id: location.id,\n    title: location.name,\n    subtitle: `${location.city ?? \"\"}${location.city && location.state ? \", \" : \"\"}${location.state ?? \"\"}`,\n    description:\n      (location.description?.slice(0, 150) ?? \"\") +\n      (location.description && location.description.length > 150 ? \"...\" : \"\"),\n    url: `/locations/${location.id}`,\n    metadata: {\n      city: location.city,\n      state: location.state,\n      street: location.street,\n      machineCount: location.machineCount,\n      createdAt: location.createdAt,\n    },\n    relevance: location.relevance * 100,\n  }));\n}\n\n/**\n * Count functions for each entity type\n */\nasync function countIssues(\n  query: string,\n  organizationId: string,\n): Promise<number> {\n  const searchVector = sql`to_tsvector('english', ${issues.title} || ' ' || coalesce(${issues.description}, '') || ' ' || coalesce(${issues.consistency}, ''))`;\n  const searchQuery = sql`to_tsquery('english', ${query\n    .split(\" \")\n    .map((term) => `${term}:*`)\n    .join(\" & \")})`;\n\n  const result = await db\n    .select({ count: count() })\n    .from(issues)\n    .where(\n      and(\n        eq(issues.organization_id, organizationId),\n        sql`${searchVector} @@ ${searchQuery}`,\n      ),\n    );\n\n  return result[0]?.count ?? 0;\n}\n\nasync function countMachines(\n  query: string,\n  organizationId: string,\n): Promise<number> {\n  const searchVector = sql`to_tsvector('english', ${machines.name} || ' ' || coalesce(${models.name}, '') || ' ' || coalesce(${models.manufacturer}, ''))`;\n  const searchQuery = sql`to_tsquery('english', ${query\n    .split(\" \")\n    .map((term) => `${term}:*`)\n    .join(\" & \")})`;\n\n  const result = await db\n    .select({ count: count() })\n    .from(machines)\n    .leftJoin(models, eq(machines.model_id, models.id))\n    .where(\n      and(\n        eq(machines.organization_id, organizationId),\n        sql`${searchVector} @@ ${searchQuery}`,\n      ),\n    );\n\n  return result[0]?.count ?? 0;\n}\n\nasync function countUsers(\n  query: string,\n  organizationId: string,\n): Promise<number> {\n  const searchVector = sql`to_tsvector('english', coalesce(${users.name}, '') || ' ' || coalesce(${users.email}, '') || ' ' || coalesce(${users.bio}, ''))`;\n  const searchQuery = sql`to_tsquery('english', ${query\n    .split(\" \")\n    .map((term) => `${term}:*`)\n    .join(\" & \")})`;\n\n  const result = await db\n    .select({ count: count() })\n    .from(users)\n    .innerJoin(memberships, eq(users.id, memberships.user_id))\n    .where(\n      and(\n        eq(memberships.organization_id, organizationId),\n        sql`${searchVector} @@ ${searchQuery}`,\n      ),\n    );\n\n  return result[0]?.count ?? 0;\n}\n\nasync function countLocations(\n  query: string,\n  organizationId: string,\n): Promise<number> {\n  const searchVector = sql`to_tsvector('english', ${locations.name} || ' ' || coalesce(${locations.description}, '') || ' ' || coalesce(${locations.city}, ''))`;\n  const searchQuery = sql`to_tsquery('english', ${query\n    .split(\" \")\n    .map((term) => `${term}:*`)\n    .join(\" & \")})`;\n\n  const result = await db\n    .select({ count: count() })\n    .from(locations)\n    .where(\n      and(\n        eq(locations.organization_id, organizationId),\n        sql`${searchVector} @@ ${searchQuery}`,\n      ),\n    );\n\n  return result[0]?.count ?? 0;\n}\n\n/**\n * Get search suggestions for autocomplete\n * Returns commonly searched terms and recent results\n */\nexport const getSearchSuggestions = cache(\n  async (\n    query: string,\n    organizationId: string,\n    limit = 5,\n  ): Promise<SearchResult[]> => {\n    if (!query.trim() || query.length < 2) {\n      return [];\n    }\n\n    // Get top suggestions from each entity type (limited to 2 per entity for quick suggestions)\n    const suggestionPromises = [\n      searchIssues(query, organizationId, 2),\n      searchMachines(query, organizationId, 2),\n      searchUsers(query, organizationId, 1),\n      searchLocations(query, organizationId, 1),\n    ];\n\n    const suggestions = await Promise.all(suggestionPromises);\n    const allSuggestions = suggestions\n      .flat()\n      .sort((a, b) => b.relevance - a.relevance);\n\n    return allSuggestions.slice(0, limit);\n  },\n);\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/subdomain-verification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/supabase/error-handler.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-namespace","severity":2,"message":"ES2015 module syntax is preferred over namespaces.","line":83,"column":8,"nodeType":"TSModuleDeclaration","messageId":"moduleSyntaxIsPreferred","endLine":279,"endColumn":2,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/supabase/errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/supabase/multi-tenant-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/supabase/rls-helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/supabase/server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/supabase/type-guards.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary conditional, the types have no overlap.","line":203,"column":35,"nodeType":"BinaryExpression","messageId":"noOverlapBooleanExpression","endLine":203,"endColumn":48,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/supabase/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/temp-production-overrides.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/tracing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/types/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/types/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/types/database.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-definitions","severity":2,"message":"Use an `interface` instead of a `type`.","line":9,"column":13,"nodeType":"Identifier","messageId":"interfaceOverType","endLine":9,"endColumn":21,"fix":{"range":[121,34253],"text":"interface Database {\n  graphql_public: {\n    Tables: {\n      [_ in never]: never\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      graphql: {\n        Args: {\n          extensions?: Json\n          operationName?: string\n          query?: string\n          variables?: Json\n        }\n        Returns: Json\n      }\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n  public: {\n    Tables: {\n      accounts: {\n        Row: {\n          access_token: string | null\n          expires_at: string | null\n          id: string\n          id_token: string | null\n          provider: string\n          provider_account_id: string\n          refresh_token: string | null\n          scope: string | null\n          session_state: string | null\n          token_type: string | null\n          type: string\n          user_id: string\n        }\n        Insert: {\n          access_token?: string | null\n          expires_at?: string | null\n          id: string\n          id_token?: string | null\n          provider: string\n          provider_account_id: string\n          refresh_token?: string | null\n          scope?: string | null\n          session_state?: string | null\n          token_type?: string | null\n          type: string\n          user_id: string\n        }\n        Update: {\n          access_token?: string | null\n          expires_at?: string | null\n          id?: string\n          id_token?: string | null\n          provider?: string\n          provider_account_id?: string\n          refresh_token?: string | null\n          scope?: string | null\n          session_state?: string | null\n          token_type?: string | null\n          type?: string\n          user_id?: string\n        }\n        Relationships: []\n      }\n      activity_log: {\n        Row: {\n          action: string\n          created_at: string\n          details: Json | null\n          entity_id: string | null\n          entity_type: string\n          id: string\n          ip_address: unknown | null\n          organization_id: string\n          severity: string\n          user_agent: string | null\n          user_id: string | null\n        }\n        Insert: {\n          action: string\n          created_at?: string\n          details?: Json | null\n          entity_id?: string | null\n          entity_type: string\n          id: string\n          ip_address?: unknown | null\n          organization_id: string\n          severity?: string\n          user_agent?: string | null\n          user_id?: string | null\n        }\n        Update: {\n          action?: string\n          created_at?: string\n          details?: Json | null\n          entity_id?: string | null\n          entity_type?: string\n          id?: string\n          ip_address?: unknown | null\n          organization_id?: string\n          severity?: string\n          user_agent?: string | null\n          user_id?: string | null\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"activity_log_organization_id_organizations_id_fk\"\n            columns: [\"organization_id\"]\n            isOneToOne: false\n            referencedRelation: \"organizations\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      anonymous_rate_limits: {\n        Row: {\n          action_type: string\n          created_at: string\n          id: string\n          ip_address: string | null\n          organization_id: string\n          session_id: string\n        }\n        Insert: {\n          action_type: string\n          created_at?: string\n          id?: string\n          ip_address?: string | null\n          organization_id: string\n          session_id: string\n        }\n        Update: {\n          action_type?: string\n          created_at?: string\n          id?: string\n          ip_address?: string | null\n          organization_id?: string\n          session_id?: string\n        }\n        Relationships: []\n      }\n      attachments: {\n        Row: {\n          created_at: string\n          file_name: string\n          file_type: string\n          id: string\n          issue_id: string\n          organization_id: string\n          url: string\n        }\n        Insert: {\n          created_at?: string\n          file_name: string\n          file_type: string\n          id: string\n          issue_id: string\n          organization_id: string\n          url: string\n        }\n        Update: {\n          created_at?: string\n          file_name?: string\n          file_type?: string\n          id?: string\n          issue_id?: string\n          organization_id?: string\n          url?: string\n        }\n        Relationships: []\n      }\n      collection_machines: {\n        Row: {\n          collection_id: string\n          created_at: string\n          machine_id: string\n        }\n        Insert: {\n          collection_id: string\n          created_at?: string\n          machine_id: string\n        }\n        Update: {\n          collection_id?: string\n          created_at?: string\n          machine_id?: string\n        }\n        Relationships: []\n      }\n      collection_types: {\n        Row: {\n          created_at: string\n          description: string | null\n          display_name: string | null\n          generation_rules: Json | null\n          id: string\n          is_auto_generated: boolean\n          is_enabled: boolean\n          name: string\n          organization_id: string\n          sort_order: number\n          source_field: string | null\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          description?: string | null\n          display_name?: string | null\n          generation_rules?: Json | null\n          id: string\n          is_auto_generated?: boolean\n          is_enabled?: boolean\n          name: string\n          organization_id: string\n          sort_order?: number\n          source_field?: string | null\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          description?: string | null\n          display_name?: string | null\n          generation_rules?: Json | null\n          id?: string\n          is_auto_generated?: boolean\n          is_enabled?: boolean\n          name?: string\n          organization_id?: string\n          sort_order?: number\n          source_field?: string | null\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      collections: {\n        Row: {\n          created_at: string\n          description: string | null\n          filter_criteria: Json | null\n          id: string\n          is_manual: boolean\n          is_smart: boolean\n          location_id: string | null\n          name: string\n          organization_id: string\n          sort_order: number\n          type_id: string\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          description?: string | null\n          filter_criteria?: Json | null\n          id: string\n          is_manual?: boolean\n          is_smart?: boolean\n          location_id?: string | null\n          name: string\n          organization_id: string\n          sort_order?: number\n          type_id: string\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          description?: string | null\n          filter_criteria?: Json | null\n          id?: string\n          is_manual?: boolean\n          is_smart?: boolean\n          location_id?: string | null\n          name?: string\n          organization_id?: string\n          sort_order?: number\n          type_id?: string\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      comments: {\n        Row: {\n          anonymous_display_name: string | null\n          anonymous_session_id: string | null\n          author_id: string | null\n          commenter_type: Database[\"public\"][\"Enums\"][\"commenter_type\"]\n          content: string\n          created_at: string\n          deleted_at: string | null\n          deleted_by: string | null\n          id: string\n          issue_id: string\n          moderation_status: Database[\"public\"][\"Enums\"][\"moderation_status\"]\n          organization_id: string\n          updated_at: string\n        }\n        Insert: {\n          anonymous_display_name?: string | null\n          anonymous_session_id?: string | null\n          author_id?: string | null\n          commenter_type?: Database[\"public\"][\"Enums\"][\"commenter_type\"]\n          content: string\n          created_at?: string\n          deleted_at?: string | null\n          deleted_by?: string | null\n          id: string\n          issue_id: string\n          moderation_status?: Database[\"public\"][\"Enums\"][\"moderation_status\"]\n          organization_id: string\n          updated_at?: string\n        }\n        Update: {\n          anonymous_display_name?: string | null\n          anonymous_session_id?: string | null\n          author_id?: string | null\n          commenter_type?: Database[\"public\"][\"Enums\"][\"commenter_type\"]\n          content?: string\n          created_at?: string\n          deleted_at?: string | null\n          deleted_by?: string | null\n          id?: string\n          issue_id?: string\n          moderation_status?: Database[\"public\"][\"Enums\"][\"moderation_status\"]\n          organization_id?: string\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      invitations: {\n        Row: {\n          created_at: string\n          email: string\n          expires_at: string\n          id: string\n          invited_by: string\n          organization_id: string\n          role_id: string\n          status: string\n          token: string\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          email: string\n          expires_at: string\n          id: string\n          invited_by: string\n          organization_id: string\n          role_id: string\n          status?: string\n          token: string\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          email?: string\n          expires_at?: string\n          id?: string\n          invited_by?: string\n          organization_id?: string\n          role_id?: string\n          status?: string\n          token?: string\n          updated_at?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"invitations_organization_id_organizations_id_fk\"\n            columns: [\"organization_id\"]\n            isOneToOne: false\n            referencedRelation: \"organizations\"\n            referencedColumns: [\"id\"]\n          },\n          {\n            foreignKeyName: \"invitations_role_id_roles_id_fk\"\n            columns: [\"role_id\"]\n            isOneToOne: false\n            referencedRelation: \"roles\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      issue_history: {\n        Row: {\n          actor_id: string | null\n          changed_at: string\n          field: string\n          id: string\n          issue_id: string\n          new_value: string | null\n          old_value: string | null\n          organization_id: string\n          type: Database[\"public\"][\"Enums\"][\"activity_type\"]\n        }\n        Insert: {\n          actor_id?: string | null\n          changed_at?: string\n          field: string\n          id: string\n          issue_id: string\n          new_value?: string | null\n          old_value?: string | null\n          organization_id: string\n          type: Database[\"public\"][\"Enums\"][\"activity_type\"]\n        }\n        Update: {\n          actor_id?: string | null\n          changed_at?: string\n          field?: string\n          id?: string\n          issue_id?: string\n          new_value?: string | null\n          old_value?: string | null\n          organization_id?: string\n          type?: Database[\"public\"][\"Enums\"][\"activity_type\"]\n        }\n        Relationships: []\n      }\n      issue_statuses: {\n        Row: {\n          category: Database[\"public\"][\"Enums\"][\"status_category\"]\n          id: string\n          is_default: boolean\n          name: string\n          organization_id: string\n        }\n        Insert: {\n          category: Database[\"public\"][\"Enums\"][\"status_category\"]\n          id: string\n          is_default?: boolean\n          name: string\n          organization_id: string\n        }\n        Update: {\n          category?: Database[\"public\"][\"Enums\"][\"status_category\"]\n          id?: string\n          is_default?: boolean\n          name?: string\n          organization_id?: string\n        }\n        Relationships: []\n      }\n      issues: {\n        Row: {\n          anonymous_contact_method: string | null\n          anonymous_session_id: string | null\n          assigned_to_id: string | null\n          checklist: Json | null\n          consistency: string | null\n          created_at: string\n          created_by_id: string | null\n          description: string | null\n          id: string\n          is_public: boolean | null\n          machine_id: string\n          moderation_status: Database[\"public\"][\"Enums\"][\"moderation_status\"]\n          organization_id: string\n          priority_id: string\n          reporter_email: string | null\n          reporter_type: Database[\"public\"][\"Enums\"][\"reporter_type\"]\n          resolved_at: string | null\n          status_id: string\n          submitter_name: string | null\n          title: string\n          updated_at: string\n        }\n        Insert: {\n          anonymous_contact_method?: string | null\n          anonymous_session_id?: string | null\n          assigned_to_id?: string | null\n          checklist?: Json | null\n          consistency?: string | null\n          created_at?: string\n          created_by_id?: string | null\n          description?: string | null\n          id: string\n          is_public?: boolean | null\n          machine_id: string\n          moderation_status?: Database[\"public\"][\"Enums\"][\"moderation_status\"]\n          organization_id: string\n          priority_id: string\n          reporter_email?: string | null\n          reporter_type?: Database[\"public\"][\"Enums\"][\"reporter_type\"]\n          resolved_at?: string | null\n          status_id: string\n          submitter_name?: string | null\n          title: string\n          updated_at?: string\n        }\n        Update: {\n          anonymous_contact_method?: string | null\n          anonymous_session_id?: string | null\n          assigned_to_id?: string | null\n          checklist?: Json | null\n          consistency?: string | null\n          created_at?: string\n          created_by_id?: string | null\n          description?: string | null\n          id?: string\n          is_public?: boolean | null\n          machine_id?: string\n          moderation_status?: Database[\"public\"][\"Enums\"][\"moderation_status\"]\n          organization_id?: string\n          priority_id?: string\n          reporter_email?: string | null\n          reporter_type?: Database[\"public\"][\"Enums\"][\"reporter_type\"]\n          resolved_at?: string | null\n          status_id?: string\n          submitter_name?: string | null\n          title?: string\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      locations: {\n        Row: {\n          city: string | null\n          created_at: string\n          description: string | null\n          id: string\n          is_public: boolean | null\n          last_sync_at: string | null\n          latitude: number | null\n          longitude: number | null\n          name: string\n          organization_id: string\n          phone: string | null\n          pinball_map_id: number | null\n          region_id: string | null\n          state: string | null\n          street: string | null\n          sync_enabled: boolean\n          updated_at: string\n          website: string | null\n          zip: string | null\n        }\n        Insert: {\n          city?: string | null\n          created_at?: string\n          description?: string | null\n          id: string\n          is_public?: boolean | null\n          last_sync_at?: string | null\n          latitude?: number | null\n          longitude?: number | null\n          name: string\n          organization_id: string\n          phone?: string | null\n          pinball_map_id?: number | null\n          region_id?: string | null\n          state?: string | null\n          street?: string | null\n          sync_enabled?: boolean\n          updated_at?: string\n          website?: string | null\n          zip?: string | null\n        }\n        Update: {\n          city?: string | null\n          created_at?: string\n          description?: string | null\n          id?: string\n          is_public?: boolean | null\n          last_sync_at?: string | null\n          latitude?: number | null\n          longitude?: number | null\n          name?: string\n          organization_id?: string\n          phone?: string | null\n          pinball_map_id?: number | null\n          region_id?: string | null\n          state?: string | null\n          street?: string | null\n          sync_enabled?: boolean\n          updated_at?: string\n          website?: string | null\n          zip?: string | null\n        }\n        Relationships: []\n      }\n      machines: {\n        Row: {\n          created_at: string\n          deleted_at: string | null\n          id: string\n          is_public: boolean | null\n          location_id: string\n          model_id: string\n          name: string\n          notify_on_comments: boolean\n          notify_on_new_issues: boolean\n          notify_on_status_changes: boolean\n          organization_id: string\n          owner_id: string | null\n          owner_notifications_enabled: boolean\n          qr_code_generated_at: string | null\n          qr_code_id: string | null\n          qr_code_url: string | null\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          deleted_at?: string | null\n          id: string\n          is_public?: boolean | null\n          location_id: string\n          model_id: string\n          name: string\n          notify_on_comments?: boolean\n          notify_on_new_issues?: boolean\n          notify_on_status_changes?: boolean\n          organization_id: string\n          owner_id?: string | null\n          owner_notifications_enabled?: boolean\n          qr_code_generated_at?: string | null\n          qr_code_id?: string | null\n          qr_code_url?: string | null\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          deleted_at?: string | null\n          id?: string\n          is_public?: boolean | null\n          location_id?: string\n          model_id?: string\n          name?: string\n          notify_on_comments?: boolean\n          notify_on_new_issues?: boolean\n          notify_on_status_changes?: boolean\n          organization_id?: string\n          owner_id?: string | null\n          owner_notifications_enabled?: boolean\n          qr_code_generated_at?: string | null\n          qr_code_id?: string | null\n          qr_code_url?: string | null\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      memberships: {\n        Row: {\n          id: string\n          organization_id: string\n          role_id: string\n          user_id: string\n        }\n        Insert: {\n          id: string\n          organization_id: string\n          role_id: string\n          user_id: string\n        }\n        Update: {\n          id?: string\n          organization_id?: string\n          role_id?: string\n          user_id?: string\n        }\n        Relationships: []\n      }\n      models: {\n        Row: {\n          created_at: string\n          id: string\n          ipdb_id: string | null\n          ipdb_link: string | null\n          is_active: boolean\n          is_custom: boolean\n          kineticist_url: string | null\n          machine_display: string | null\n          machine_type: string | null\n          manufacturer: string | null\n          name: string\n          opdb_id: string | null\n          opdb_img_url: string | null\n          organization_id: string | null\n          updated_at: string\n          year: number | null\n        }\n        Insert: {\n          created_at?: string\n          id: string\n          ipdb_id?: string | null\n          ipdb_link?: string | null\n          is_active?: boolean\n          is_custom?: boolean\n          kineticist_url?: string | null\n          machine_display?: string | null\n          machine_type?: string | null\n          manufacturer?: string | null\n          name: string\n          opdb_id?: string | null\n          opdb_img_url?: string | null\n          organization_id?: string | null\n          updated_at?: string\n          year?: number | null\n        }\n        Update: {\n          created_at?: string\n          id?: string\n          ipdb_id?: string | null\n          ipdb_link?: string | null\n          is_active?: boolean\n          is_custom?: boolean\n          kineticist_url?: string | null\n          machine_display?: string | null\n          machine_type?: string | null\n          manufacturer?: string | null\n          name?: string\n          opdb_id?: string | null\n          opdb_img_url?: string | null\n          organization_id?: string | null\n          updated_at?: string\n          year?: number | null\n        }\n        Relationships: []\n      }\n      notifications: {\n        Row: {\n          action_url: string | null\n          created_at: string\n          entity_id: string | null\n          entity_type: Database[\"public\"][\"Enums\"][\"notification_entity\"] | null\n          id: string\n          message: string\n          organization_id: string\n          read: boolean\n          type: Database[\"public\"][\"Enums\"][\"notification_type\"]\n          user_id: string\n        }\n        Insert: {\n          action_url?: string | null\n          created_at?: string\n          entity_id?: string | null\n          entity_type?:\n            | Database[\"public\"][\"Enums\"][\"notification_entity\"]\n            | null\n          id: string\n          message: string\n          organization_id: string\n          read?: boolean\n          type: Database[\"public\"][\"Enums\"][\"notification_type\"]\n          user_id: string\n        }\n        Update: {\n          action_url?: string | null\n          created_at?: string\n          entity_id?: string | null\n          entity_type?:\n            | Database[\"public\"][\"Enums\"][\"notification_entity\"]\n            | null\n          id?: string\n          message?: string\n          organization_id?: string\n          read?: boolean\n          type?: Database[\"public\"][\"Enums\"][\"notification_type\"]\n          user_id?: string\n        }\n        Relationships: []\n      }\n      organizations: {\n        Row: {\n          address: string | null\n          allow_anonymous_comments: boolean\n          allow_anonymous_issues: boolean\n          allow_anonymous_upvotes: boolean\n          created_at: string\n          description: string | null\n          id: string\n          is_public: boolean\n          logo_url: string | null\n          name: string\n          phone: string | null\n          public_issue_default: string\n          require_moderation_anonymous: boolean\n          subdomain: string\n          updated_at: string\n          website: string | null\n        }\n        Insert: {\n          address?: string | null\n          allow_anonymous_comments?: boolean\n          allow_anonymous_issues?: boolean\n          allow_anonymous_upvotes?: boolean\n          created_at?: string\n          description?: string | null\n          id: string\n          is_public?: boolean\n          logo_url?: string | null\n          name: string\n          phone?: string | null\n          public_issue_default?: string\n          require_moderation_anonymous?: boolean\n          subdomain: string\n          updated_at?: string\n          website?: string | null\n        }\n        Update: {\n          address?: string | null\n          allow_anonymous_comments?: boolean\n          allow_anonymous_issues?: boolean\n          allow_anonymous_upvotes?: boolean\n          created_at?: string\n          description?: string | null\n          id?: string\n          is_public?: boolean\n          logo_url?: string | null\n          name?: string\n          phone?: string | null\n          public_issue_default?: string\n          require_moderation_anonymous?: boolean\n          subdomain?: string\n          updated_at?: string\n          website?: string | null\n        }\n        Relationships: []\n      }\n      permissions: {\n        Row: {\n          description: string | null\n          id: string\n          name: string\n        }\n        Insert: {\n          description?: string | null\n          id: string\n          name: string\n        }\n        Update: {\n          description?: string | null\n          id?: string\n          name?: string\n        }\n        Relationships: []\n      }\n      pinball_map_configs: {\n        Row: {\n          api_enabled: boolean\n          api_key: string | null\n          auto_sync_enabled: boolean\n          create_missing_models: boolean\n          id: string\n          last_global_sync: string | null\n          organization_id: string\n          sync_interval_hours: number\n          update_existing_data: boolean\n        }\n        Insert: {\n          api_enabled?: boolean\n          api_key?: string | null\n          auto_sync_enabled?: boolean\n          create_missing_models?: boolean\n          id: string\n          last_global_sync?: string | null\n          organization_id: string\n          sync_interval_hours?: number\n          update_existing_data?: boolean\n        }\n        Update: {\n          api_enabled?: boolean\n          api_key?: string | null\n          auto_sync_enabled?: boolean\n          create_missing_models?: boolean\n          id?: string\n          last_global_sync?: string | null\n          organization_id?: string\n          sync_interval_hours?: number\n          update_existing_data?: boolean\n        }\n        Relationships: []\n      }\n      priorities: {\n        Row: {\n          id: string\n          is_default: boolean\n          name: string\n          order: number\n          organization_id: string\n        }\n        Insert: {\n          id: string\n          is_default?: boolean\n          name: string\n          order: number\n          organization_id: string\n        }\n        Update: {\n          id?: string\n          is_default?: boolean\n          name?: string\n          order?: number\n          organization_id?: string\n        }\n        Relationships: []\n      }\n      role_permissions: {\n        Row: {\n          permission_id: string\n          role_id: string\n        }\n        Insert: {\n          permission_id: string\n          role_id: string\n        }\n        Update: {\n          permission_id?: string\n          role_id?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"role_permissions_permission_id_permissions_id_fk\"\n            columns: [\"permission_id\"]\n            isOneToOne: false\n            referencedRelation: \"permissions\"\n            referencedColumns: [\"id\"]\n          },\n          {\n            foreignKeyName: \"role_permissions_role_id_roles_id_fk\"\n            columns: [\"role_id\"]\n            isOneToOne: false\n            referencedRelation: \"roles\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      roles: {\n        Row: {\n          created_at: string\n          id: string\n          is_default: boolean\n          is_system: boolean\n          name: string\n          organization_id: string\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          id: string\n          is_default?: boolean\n          is_system?: boolean\n          name: string\n          organization_id: string\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          id?: string\n          is_default?: boolean\n          is_system?: boolean\n          name?: string\n          organization_id?: string\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      sessions: {\n        Row: {\n          expires: string\n          id: string\n          session_token: string\n          user_id: string\n        }\n        Insert: {\n          expires: string\n          id: string\n          session_token: string\n          user_id: string\n        }\n        Update: {\n          expires?: string\n          id?: string\n          session_token?: string\n          user_id?: string\n        }\n        Relationships: []\n      }\n      system_settings: {\n        Row: {\n          created_at: string\n          id: string\n          organization_id: string\n          setting_key: string\n          setting_value: Json\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          id: string\n          organization_id: string\n          setting_key: string\n          setting_value: Json\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          id?: string\n          organization_id?: string\n          setting_key?: string\n          setting_value?: Json\n          updated_at?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"system_settings_organization_id_organizations_id_fk\"\n            columns: [\"organization_id\"]\n            isOneToOne: false\n            referencedRelation: \"organizations\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      upvotes: {\n        Row: {\n          anonymous_session_id: string | null\n          created_at: string\n          id: string\n          issue_id: string\n          user_id: string | null\n          voter_type: Database[\"public\"][\"Enums\"][\"voter_type\"]\n        }\n        Insert: {\n          anonymous_session_id?: string | null\n          created_at?: string\n          id: string\n          issue_id: string\n          user_id?: string | null\n          voter_type?: Database[\"public\"][\"Enums\"][\"voter_type\"]\n        }\n        Update: {\n          anonymous_session_id?: string | null\n          created_at?: string\n          id?: string\n          issue_id?: string\n          user_id?: string | null\n          voter_type?: Database[\"public\"][\"Enums\"][\"voter_type\"]\n        }\n        Relationships: []\n      }\n      users: {\n        Row: {\n          bio: string | null\n          created_at: string\n          email: string | null\n          email_notifications_enabled: boolean\n          email_verified: string | null\n          id: string\n          image: string | null\n          name: string | null\n          notification_frequency: Database[\"public\"][\"Enums\"][\"notification_frequency\"]\n          profile_picture: string | null\n          push_notifications_enabled: boolean\n          updated_at: string\n        }\n        Insert: {\n          bio?: string | null\n          created_at?: string\n          email?: string | null\n          email_notifications_enabled?: boolean\n          email_verified?: string | null\n          id: string\n          image?: string | null\n          name?: string | null\n          notification_frequency?: Database[\"public\"][\"Enums\"][\"notification_frequency\"]\n          profile_picture?: string | null\n          push_notifications_enabled?: boolean\n          updated_at?: string\n        }\n        Update: {\n          bio?: string | null\n          created_at?: string\n          email?: string | null\n          email_notifications_enabled?: boolean\n          email_verified?: string | null\n          id?: string\n          image?: string | null\n          name?: string | null\n          notification_frequency?: Database[\"public\"][\"Enums\"][\"notification_frequency\"]\n          profile_picture?: string | null\n          push_notifications_enabled?: boolean\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      verification_tokens: {\n        Row: {\n          expires: string\n          identifier: string\n          token: string\n        }\n        Insert: {\n          expires: string\n          identifier: string\n          token: string\n        }\n        Update: {\n          expires?: string\n          identifier?: string\n          token?: string\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      public_organizations_minimal: {\n        Row: {\n          id: string | null\n          logo_url: string | null\n          name: string | null\n          subdomain: string | null\n        }\n        Relationships: []\n      }\n    }\n    Functions: {\n      cleanup_anonymous_rate_limits: {\n        Args: Record<PropertyKey, never>\n        Returns: undefined\n      }\n      fn_effective_issue_public: {\n        Args: { issue_id: string }\n        Returns: boolean\n      }\n      fn_effective_location_public: {\n        Args: { loc_id: string }\n        Returns: boolean\n      }\n      fn_effective_machine_public: {\n        Args: { machine_id: string }\n        Returns: boolean\n      }\n      fn_has_permission: {\n        Args: { org_id: string; perm_name: string; uid: string }\n        Returns: boolean\n      }\n      fn_is_org_member: {\n        Args: { org_id: string; uid: string }\n        Returns: boolean\n      }\n      fn_public_organizations_minimal: {\n        Args: Record<PropertyKey, never>\n        Returns: {\n          id: string\n          logo_url: string\n          name: string\n          subdomain: string\n        }[]\n      }\n    }\n    Enums: {\n      activity_type:\n        | \"CREATED\"\n        | \"STATUS_CHANGED\"\n        | \"ASSIGNED\"\n        | \"PRIORITY_CHANGED\"\n        | \"COMMENTED\"\n        | \"COMMENT_DELETED\"\n        | \"ATTACHMENT_ADDED\"\n        | \"MERGED\"\n        | \"RESOLVED\"\n        | \"REOPENED\"\n        | \"SYSTEM\"\n      commenter_type: \"authenticated\" | \"anonymous\"\n      moderation_status: \"pending\" | \"approved\" | \"rejected\"\n      notification_entity: \"ISSUE\" | \"MACHINE\" | \"COMMENT\" | \"ORGANIZATION\"\n      notification_frequency: \"IMMEDIATE\" | \"DAILY\" | \"WEEKLY\" | \"NEVER\"\n      notification_type:\n        | \"ISSUE_CREATED\"\n        | \"ISSUE_UPDATED\"\n        | \"ISSUE_ASSIGNED\"\n        | \"ISSUE_COMMENTED\"\n        | \"MACHINE_ASSIGNED\"\n        | \"SYSTEM_ANNOUNCEMENT\"\n      reporter_type: \"authenticated\" | \"anonymous\"\n      status_category: \"NEW\" | \"IN_PROGRESS\" | \"RESOLVED\"\n      voter_type: \"authenticated\" | \"anonymous\"\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}"}},{"ruleId":"@typescript-eslint/consistent-indexed-object-style","severity":2,"message":"A record is preferred over an index signature.","line":11,"column":13,"nodeType":"TSMappedType","messageId":"preferRecord","endLine":13,"endColumn":6,"fix":{"range":[171,204],"text":"Record<never, never>"}},{"ruleId":"@typescript-eslint/consistent-indexed-object-style","severity":2,"message":"A record is preferred over an index signature.","line":14,"column":12,"nodeType":"TSMappedType","messageId":"preferRecord","endLine":16,"endColumn":6,"fix":{"range":[216,249],"text":"Record<never, never>"}},{"ruleId":"@typescript-eslint/consistent-indexed-object-style","severity":2,"message":"A record is preferred over an index signature.","line":28,"column":12,"nodeType":"TSMappedType","messageId":"preferRecord","endLine":30,"endColumn":6,"fix":{"range":[470,503],"text":"Record<never, never>"}},{"ruleId":"@typescript-eslint/consistent-indexed-object-style","severity":2,"message":"A record is preferred over an index signature.","line":31,"column":21,"nodeType":"TSMappedType","messageId":"preferRecord","endLine":33,"endColumn":6,"fix":{"range":[524,557],"text":"Record<never, never>"}},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'unknown' overrides all other types in this union type.","line":90,"column":23,"nodeType":"TSUnknownKeyword","messageId":"overrides","endLine":90,"endColumn":30},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'unknown' overrides all other types in this union type.","line":103,"column":24,"nodeType":"TSUnknownKeyword","messageId":"overrides","endLine":103,"endColumn":31},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'unknown' overrides all other types in this union type.","line":116,"column":24,"nodeType":"TSUnknownKeyword","messageId":"overrides","endLine":116,"endColumn":31},{"ruleId":"@typescript-eslint/consistent-indexed-object-style","severity":2,"message":"A record is preferred over an index signature.","line":1194,"column":21,"nodeType":"TSMappedType","messageId":"preferRecord","endLine":1196,"endColumn":6,"fix":{"range":[34214,34247],"text":"Record<never, never>"}},{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'never' is overridden by other types in this union type.","line":1302,"column":7,"nodeType":"TSTypeOperator","messageId":"overridden","endLine":1302,"endColumn":44}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  graphql_public: {\n    Tables: {\n      [_ in never]: never\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      graphql: {\n        Args: {\n          extensions?: Json\n          operationName?: string\n          query?: string\n          variables?: Json\n        }\n        Returns: Json\n      }\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n  public: {\n    Tables: {\n      accounts: {\n        Row: {\n          access_token: string | null\n          expires_at: string | null\n          id: string\n          id_token: string | null\n          provider: string\n          provider_account_id: string\n          refresh_token: string | null\n          scope: string | null\n          session_state: string | null\n          token_type: string | null\n          type: string\n          user_id: string\n        }\n        Insert: {\n          access_token?: string | null\n          expires_at?: string | null\n          id: string\n          id_token?: string | null\n          provider: string\n          provider_account_id: string\n          refresh_token?: string | null\n          scope?: string | null\n          session_state?: string | null\n          token_type?: string | null\n          type: string\n          user_id: string\n        }\n        Update: {\n          access_token?: string | null\n          expires_at?: string | null\n          id?: string\n          id_token?: string | null\n          provider?: string\n          provider_account_id?: string\n          refresh_token?: string | null\n          scope?: string | null\n          session_state?: string | null\n          token_type?: string | null\n          type?: string\n          user_id?: string\n        }\n        Relationships: []\n      }\n      activity_log: {\n        Row: {\n          action: string\n          created_at: string\n          details: Json | null\n          entity_id: string | null\n          entity_type: string\n          id: string\n          ip_address: unknown | null\n          organization_id: string\n          severity: string\n          user_agent: string | null\n          user_id: string | null\n        }\n        Insert: {\n          action: string\n          created_at?: string\n          details?: Json | null\n          entity_id?: string | null\n          entity_type: string\n          id: string\n          ip_address?: unknown | null\n          organization_id: string\n          severity?: string\n          user_agent?: string | null\n          user_id?: string | null\n        }\n        Update: {\n          action?: string\n          created_at?: string\n          details?: Json | null\n          entity_id?: string | null\n          entity_type?: string\n          id?: string\n          ip_address?: unknown | null\n          organization_id?: string\n          severity?: string\n          user_agent?: string | null\n          user_id?: string | null\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"activity_log_organization_id_organizations_id_fk\"\n            columns: [\"organization_id\"]\n            isOneToOne: false\n            referencedRelation: \"organizations\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      anonymous_rate_limits: {\n        Row: {\n          action_type: string\n          created_at: string\n          id: string\n          ip_address: string | null\n          organization_id: string\n          session_id: string\n        }\n        Insert: {\n          action_type: string\n          created_at?: string\n          id?: string\n          ip_address?: string | null\n          organization_id: string\n          session_id: string\n        }\n        Update: {\n          action_type?: string\n          created_at?: string\n          id?: string\n          ip_address?: string | null\n          organization_id?: string\n          session_id?: string\n        }\n        Relationships: []\n      }\n      attachments: {\n        Row: {\n          created_at: string\n          file_name: string\n          file_type: string\n          id: string\n          issue_id: string\n          organization_id: string\n          url: string\n        }\n        Insert: {\n          created_at?: string\n          file_name: string\n          file_type: string\n          id: string\n          issue_id: string\n          organization_id: string\n          url: string\n        }\n        Update: {\n          created_at?: string\n          file_name?: string\n          file_type?: string\n          id?: string\n          issue_id?: string\n          organization_id?: string\n          url?: string\n        }\n        Relationships: []\n      }\n      collection_machines: {\n        Row: {\n          collection_id: string\n          created_at: string\n          machine_id: string\n        }\n        Insert: {\n          collection_id: string\n          created_at?: string\n          machine_id: string\n        }\n        Update: {\n          collection_id?: string\n          created_at?: string\n          machine_id?: string\n        }\n        Relationships: []\n      }\n      collection_types: {\n        Row: {\n          created_at: string\n          description: string | null\n          display_name: string | null\n          generation_rules: Json | null\n          id: string\n          is_auto_generated: boolean\n          is_enabled: boolean\n          name: string\n          organization_id: string\n          sort_order: number\n          source_field: string | null\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          description?: string | null\n          display_name?: string | null\n          generation_rules?: Json | null\n          id: string\n          is_auto_generated?: boolean\n          is_enabled?: boolean\n          name: string\n          organization_id: string\n          sort_order?: number\n          source_field?: string | null\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          description?: string | null\n          display_name?: string | null\n          generation_rules?: Json | null\n          id?: string\n          is_auto_generated?: boolean\n          is_enabled?: boolean\n          name?: string\n          organization_id?: string\n          sort_order?: number\n          source_field?: string | null\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      collections: {\n        Row: {\n          created_at: string\n          description: string | null\n          filter_criteria: Json | null\n          id: string\n          is_manual: boolean\n          is_smart: boolean\n          location_id: string | null\n          name: string\n          organization_id: string\n          sort_order: number\n          type_id: string\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          description?: string | null\n          filter_criteria?: Json | null\n          id: string\n          is_manual?: boolean\n          is_smart?: boolean\n          location_id?: string | null\n          name: string\n          organization_id: string\n          sort_order?: number\n          type_id: string\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          description?: string | null\n          filter_criteria?: Json | null\n          id?: string\n          is_manual?: boolean\n          is_smart?: boolean\n          location_id?: string | null\n          name?: string\n          organization_id?: string\n          sort_order?: number\n          type_id?: string\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      comments: {\n        Row: {\n          anonymous_display_name: string | null\n          anonymous_session_id: string | null\n          author_id: string | null\n          commenter_type: Database[\"public\"][\"Enums\"][\"commenter_type\"]\n          content: string\n          created_at: string\n          deleted_at: string | null\n          deleted_by: string | null\n          id: string\n          issue_id: string\n          moderation_status: Database[\"public\"][\"Enums\"][\"moderation_status\"]\n          organization_id: string\n          updated_at: string\n        }\n        Insert: {\n          anonymous_display_name?: string | null\n          anonymous_session_id?: string | null\n          author_id?: string | null\n          commenter_type?: Database[\"public\"][\"Enums\"][\"commenter_type\"]\n          content: string\n          created_at?: string\n          deleted_at?: string | null\n          deleted_by?: string | null\n          id: string\n          issue_id: string\n          moderation_status?: Database[\"public\"][\"Enums\"][\"moderation_status\"]\n          organization_id: string\n          updated_at?: string\n        }\n        Update: {\n          anonymous_display_name?: string | null\n          anonymous_session_id?: string | null\n          author_id?: string | null\n          commenter_type?: Database[\"public\"][\"Enums\"][\"commenter_type\"]\n          content?: string\n          created_at?: string\n          deleted_at?: string | null\n          deleted_by?: string | null\n          id?: string\n          issue_id?: string\n          moderation_status?: Database[\"public\"][\"Enums\"][\"moderation_status\"]\n          organization_id?: string\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      invitations: {\n        Row: {\n          created_at: string\n          email: string\n          expires_at: string\n          id: string\n          invited_by: string\n          organization_id: string\n          role_id: string\n          status: string\n          token: string\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          email: string\n          expires_at: string\n          id: string\n          invited_by: string\n          organization_id: string\n          role_id: string\n          status?: string\n          token: string\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          email?: string\n          expires_at?: string\n          id?: string\n          invited_by?: string\n          organization_id?: string\n          role_id?: string\n          status?: string\n          token?: string\n          updated_at?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"invitations_organization_id_organizations_id_fk\"\n            columns: [\"organization_id\"]\n            isOneToOne: false\n            referencedRelation: \"organizations\"\n            referencedColumns: [\"id\"]\n          },\n          {\n            foreignKeyName: \"invitations_role_id_roles_id_fk\"\n            columns: [\"role_id\"]\n            isOneToOne: false\n            referencedRelation: \"roles\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      issue_history: {\n        Row: {\n          actor_id: string | null\n          changed_at: string\n          field: string\n          id: string\n          issue_id: string\n          new_value: string | null\n          old_value: string | null\n          organization_id: string\n          type: Database[\"public\"][\"Enums\"][\"activity_type\"]\n        }\n        Insert: {\n          actor_id?: string | null\n          changed_at?: string\n          field: string\n          id: string\n          issue_id: string\n          new_value?: string | null\n          old_value?: string | null\n          organization_id: string\n          type: Database[\"public\"][\"Enums\"][\"activity_type\"]\n        }\n        Update: {\n          actor_id?: string | null\n          changed_at?: string\n          field?: string\n          id?: string\n          issue_id?: string\n          new_value?: string | null\n          old_value?: string | null\n          organization_id?: string\n          type?: Database[\"public\"][\"Enums\"][\"activity_type\"]\n        }\n        Relationships: []\n      }\n      issue_statuses: {\n        Row: {\n          category: Database[\"public\"][\"Enums\"][\"status_category\"]\n          id: string\n          is_default: boolean\n          name: string\n          organization_id: string\n        }\n        Insert: {\n          category: Database[\"public\"][\"Enums\"][\"status_category\"]\n          id: string\n          is_default?: boolean\n          name: string\n          organization_id: string\n        }\n        Update: {\n          category?: Database[\"public\"][\"Enums\"][\"status_category\"]\n          id?: string\n          is_default?: boolean\n          name?: string\n          organization_id?: string\n        }\n        Relationships: []\n      }\n      issues: {\n        Row: {\n          anonymous_contact_method: string | null\n          anonymous_session_id: string | null\n          assigned_to_id: string | null\n          checklist: Json | null\n          consistency: string | null\n          created_at: string\n          created_by_id: string | null\n          description: string | null\n          id: string\n          is_public: boolean | null\n          machine_id: string\n          moderation_status: Database[\"public\"][\"Enums\"][\"moderation_status\"]\n          organization_id: string\n          priority_id: string\n          reporter_email: string | null\n          reporter_type: Database[\"public\"][\"Enums\"][\"reporter_type\"]\n          resolved_at: string | null\n          status_id: string\n          submitter_name: string | null\n          title: string\n          updated_at: string\n        }\n        Insert: {\n          anonymous_contact_method?: string | null\n          anonymous_session_id?: string | null\n          assigned_to_id?: string | null\n          checklist?: Json | null\n          consistency?: string | null\n          created_at?: string\n          created_by_id?: string | null\n          description?: string | null\n          id: string\n          is_public?: boolean | null\n          machine_id: string\n          moderation_status?: Database[\"public\"][\"Enums\"][\"moderation_status\"]\n          organization_id: string\n          priority_id: string\n          reporter_email?: string | null\n          reporter_type?: Database[\"public\"][\"Enums\"][\"reporter_type\"]\n          resolved_at?: string | null\n          status_id: string\n          submitter_name?: string | null\n          title: string\n          updated_at?: string\n        }\n        Update: {\n          anonymous_contact_method?: string | null\n          anonymous_session_id?: string | null\n          assigned_to_id?: string | null\n          checklist?: Json | null\n          consistency?: string | null\n          created_at?: string\n          created_by_id?: string | null\n          description?: string | null\n          id?: string\n          is_public?: boolean | null\n          machine_id?: string\n          moderation_status?: Database[\"public\"][\"Enums\"][\"moderation_status\"]\n          organization_id?: string\n          priority_id?: string\n          reporter_email?: string | null\n          reporter_type?: Database[\"public\"][\"Enums\"][\"reporter_type\"]\n          resolved_at?: string | null\n          status_id?: string\n          submitter_name?: string | null\n          title?: string\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      locations: {\n        Row: {\n          city: string | null\n          created_at: string\n          description: string | null\n          id: string\n          is_public: boolean | null\n          last_sync_at: string | null\n          latitude: number | null\n          longitude: number | null\n          name: string\n          organization_id: string\n          phone: string | null\n          pinball_map_id: number | null\n          region_id: string | null\n          state: string | null\n          street: string | null\n          sync_enabled: boolean\n          updated_at: string\n          website: string | null\n          zip: string | null\n        }\n        Insert: {\n          city?: string | null\n          created_at?: string\n          description?: string | null\n          id: string\n          is_public?: boolean | null\n          last_sync_at?: string | null\n          latitude?: number | null\n          longitude?: number | null\n          name: string\n          organization_id: string\n          phone?: string | null\n          pinball_map_id?: number | null\n          region_id?: string | null\n          state?: string | null\n          street?: string | null\n          sync_enabled?: boolean\n          updated_at?: string\n          website?: string | null\n          zip?: string | null\n        }\n        Update: {\n          city?: string | null\n          created_at?: string\n          description?: string | null\n          id?: string\n          is_public?: boolean | null\n          last_sync_at?: string | null\n          latitude?: number | null\n          longitude?: number | null\n          name?: string\n          organization_id?: string\n          phone?: string | null\n          pinball_map_id?: number | null\n          region_id?: string | null\n          state?: string | null\n          street?: string | null\n          sync_enabled?: boolean\n          updated_at?: string\n          website?: string | null\n          zip?: string | null\n        }\n        Relationships: []\n      }\n      machines: {\n        Row: {\n          created_at: string\n          deleted_at: string | null\n          id: string\n          is_public: boolean | null\n          location_id: string\n          model_id: string\n          name: string\n          notify_on_comments: boolean\n          notify_on_new_issues: boolean\n          notify_on_status_changes: boolean\n          organization_id: string\n          owner_id: string | null\n          owner_notifications_enabled: boolean\n          qr_code_generated_at: string | null\n          qr_code_id: string | null\n          qr_code_url: string | null\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          deleted_at?: string | null\n          id: string\n          is_public?: boolean | null\n          location_id: string\n          model_id: string\n          name: string\n          notify_on_comments?: boolean\n          notify_on_new_issues?: boolean\n          notify_on_status_changes?: boolean\n          organization_id: string\n          owner_id?: string | null\n          owner_notifications_enabled?: boolean\n          qr_code_generated_at?: string | null\n          qr_code_id?: string | null\n          qr_code_url?: string | null\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          deleted_at?: string | null\n          id?: string\n          is_public?: boolean | null\n          location_id?: string\n          model_id?: string\n          name?: string\n          notify_on_comments?: boolean\n          notify_on_new_issues?: boolean\n          notify_on_status_changes?: boolean\n          organization_id?: string\n          owner_id?: string | null\n          owner_notifications_enabled?: boolean\n          qr_code_generated_at?: string | null\n          qr_code_id?: string | null\n          qr_code_url?: string | null\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      memberships: {\n        Row: {\n          id: string\n          organization_id: string\n          role_id: string\n          user_id: string\n        }\n        Insert: {\n          id: string\n          organization_id: string\n          role_id: string\n          user_id: string\n        }\n        Update: {\n          id?: string\n          organization_id?: string\n          role_id?: string\n          user_id?: string\n        }\n        Relationships: []\n      }\n      models: {\n        Row: {\n          created_at: string\n          id: string\n          ipdb_id: string | null\n          ipdb_link: string | null\n          is_active: boolean\n          is_custom: boolean\n          kineticist_url: string | null\n          machine_display: string | null\n          machine_type: string | null\n          manufacturer: string | null\n          name: string\n          opdb_id: string | null\n          opdb_img_url: string | null\n          organization_id: string | null\n          updated_at: string\n          year: number | null\n        }\n        Insert: {\n          created_at?: string\n          id: string\n          ipdb_id?: string | null\n          ipdb_link?: string | null\n          is_active?: boolean\n          is_custom?: boolean\n          kineticist_url?: string | null\n          machine_display?: string | null\n          machine_type?: string | null\n          manufacturer?: string | null\n          name: string\n          opdb_id?: string | null\n          opdb_img_url?: string | null\n          organization_id?: string | null\n          updated_at?: string\n          year?: number | null\n        }\n        Update: {\n          created_at?: string\n          id?: string\n          ipdb_id?: string | null\n          ipdb_link?: string | null\n          is_active?: boolean\n          is_custom?: boolean\n          kineticist_url?: string | null\n          machine_display?: string | null\n          machine_type?: string | null\n          manufacturer?: string | null\n          name?: string\n          opdb_id?: string | null\n          opdb_img_url?: string | null\n          organization_id?: string | null\n          updated_at?: string\n          year?: number | null\n        }\n        Relationships: []\n      }\n      notifications: {\n        Row: {\n          action_url: string | null\n          created_at: string\n          entity_id: string | null\n          entity_type: Database[\"public\"][\"Enums\"][\"notification_entity\"] | null\n          id: string\n          message: string\n          organization_id: string\n          read: boolean\n          type: Database[\"public\"][\"Enums\"][\"notification_type\"]\n          user_id: string\n        }\n        Insert: {\n          action_url?: string | null\n          created_at?: string\n          entity_id?: string | null\n          entity_type?:\n            | Database[\"public\"][\"Enums\"][\"notification_entity\"]\n            | null\n          id: string\n          message: string\n          organization_id: string\n          read?: boolean\n          type: Database[\"public\"][\"Enums\"][\"notification_type\"]\n          user_id: string\n        }\n        Update: {\n          action_url?: string | null\n          created_at?: string\n          entity_id?: string | null\n          entity_type?:\n            | Database[\"public\"][\"Enums\"][\"notification_entity\"]\n            | null\n          id?: string\n          message?: string\n          organization_id?: string\n          read?: boolean\n          type?: Database[\"public\"][\"Enums\"][\"notification_type\"]\n          user_id?: string\n        }\n        Relationships: []\n      }\n      organizations: {\n        Row: {\n          address: string | null\n          allow_anonymous_comments: boolean\n          allow_anonymous_issues: boolean\n          allow_anonymous_upvotes: boolean\n          created_at: string\n          description: string | null\n          id: string\n          is_public: boolean\n          logo_url: string | null\n          name: string\n          phone: string | null\n          public_issue_default: string\n          require_moderation_anonymous: boolean\n          subdomain: string\n          updated_at: string\n          website: string | null\n        }\n        Insert: {\n          address?: string | null\n          allow_anonymous_comments?: boolean\n          allow_anonymous_issues?: boolean\n          allow_anonymous_upvotes?: boolean\n          created_at?: string\n          description?: string | null\n          id: string\n          is_public?: boolean\n          logo_url?: string | null\n          name: string\n          phone?: string | null\n          public_issue_default?: string\n          require_moderation_anonymous?: boolean\n          subdomain: string\n          updated_at?: string\n          website?: string | null\n        }\n        Update: {\n          address?: string | null\n          allow_anonymous_comments?: boolean\n          allow_anonymous_issues?: boolean\n          allow_anonymous_upvotes?: boolean\n          created_at?: string\n          description?: string | null\n          id?: string\n          is_public?: boolean\n          logo_url?: string | null\n          name?: string\n          phone?: string | null\n          public_issue_default?: string\n          require_moderation_anonymous?: boolean\n          subdomain?: string\n          updated_at?: string\n          website?: string | null\n        }\n        Relationships: []\n      }\n      permissions: {\n        Row: {\n          description: string | null\n          id: string\n          name: string\n        }\n        Insert: {\n          description?: string | null\n          id: string\n          name: string\n        }\n        Update: {\n          description?: string | null\n          id?: string\n          name?: string\n        }\n        Relationships: []\n      }\n      pinball_map_configs: {\n        Row: {\n          api_enabled: boolean\n          api_key: string | null\n          auto_sync_enabled: boolean\n          create_missing_models: boolean\n          id: string\n          last_global_sync: string | null\n          organization_id: string\n          sync_interval_hours: number\n          update_existing_data: boolean\n        }\n        Insert: {\n          api_enabled?: boolean\n          api_key?: string | null\n          auto_sync_enabled?: boolean\n          create_missing_models?: boolean\n          id: string\n          last_global_sync?: string | null\n          organization_id: string\n          sync_interval_hours?: number\n          update_existing_data?: boolean\n        }\n        Update: {\n          api_enabled?: boolean\n          api_key?: string | null\n          auto_sync_enabled?: boolean\n          create_missing_models?: boolean\n          id?: string\n          last_global_sync?: string | null\n          organization_id?: string\n          sync_interval_hours?: number\n          update_existing_data?: boolean\n        }\n        Relationships: []\n      }\n      priorities: {\n        Row: {\n          id: string\n          is_default: boolean\n          name: string\n          order: number\n          organization_id: string\n        }\n        Insert: {\n          id: string\n          is_default?: boolean\n          name: string\n          order: number\n          organization_id: string\n        }\n        Update: {\n          id?: string\n          is_default?: boolean\n          name?: string\n          order?: number\n          organization_id?: string\n        }\n        Relationships: []\n      }\n      role_permissions: {\n        Row: {\n          permission_id: string\n          role_id: string\n        }\n        Insert: {\n          permission_id: string\n          role_id: string\n        }\n        Update: {\n          permission_id?: string\n          role_id?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"role_permissions_permission_id_permissions_id_fk\"\n            columns: [\"permission_id\"]\n            isOneToOne: false\n            referencedRelation: \"permissions\"\n            referencedColumns: [\"id\"]\n          },\n          {\n            foreignKeyName: \"role_permissions_role_id_roles_id_fk\"\n            columns: [\"role_id\"]\n            isOneToOne: false\n            referencedRelation: \"roles\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      roles: {\n        Row: {\n          created_at: string\n          id: string\n          is_default: boolean\n          is_system: boolean\n          name: string\n          organization_id: string\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          id: string\n          is_default?: boolean\n          is_system?: boolean\n          name: string\n          organization_id: string\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          id?: string\n          is_default?: boolean\n          is_system?: boolean\n          name?: string\n          organization_id?: string\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      sessions: {\n        Row: {\n          expires: string\n          id: string\n          session_token: string\n          user_id: string\n        }\n        Insert: {\n          expires: string\n          id: string\n          session_token: string\n          user_id: string\n        }\n        Update: {\n          expires?: string\n          id?: string\n          session_token?: string\n          user_id?: string\n        }\n        Relationships: []\n      }\n      system_settings: {\n        Row: {\n          created_at: string\n          id: string\n          organization_id: string\n          setting_key: string\n          setting_value: Json\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          id: string\n          organization_id: string\n          setting_key: string\n          setting_value: Json\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          id?: string\n          organization_id?: string\n          setting_key?: string\n          setting_value?: Json\n          updated_at?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"system_settings_organization_id_organizations_id_fk\"\n            columns: [\"organization_id\"]\n            isOneToOne: false\n            referencedRelation: \"organizations\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      upvotes: {\n        Row: {\n          anonymous_session_id: string | null\n          created_at: string\n          id: string\n          issue_id: string\n          user_id: string | null\n          voter_type: Database[\"public\"][\"Enums\"][\"voter_type\"]\n        }\n        Insert: {\n          anonymous_session_id?: string | null\n          created_at?: string\n          id: string\n          issue_id: string\n          user_id?: string | null\n          voter_type?: Database[\"public\"][\"Enums\"][\"voter_type\"]\n        }\n        Update: {\n          anonymous_session_id?: string | null\n          created_at?: string\n          id?: string\n          issue_id?: string\n          user_id?: string | null\n          voter_type?: Database[\"public\"][\"Enums\"][\"voter_type\"]\n        }\n        Relationships: []\n      }\n      users: {\n        Row: {\n          bio: string | null\n          created_at: string\n          email: string | null\n          email_notifications_enabled: boolean\n          email_verified: string | null\n          id: string\n          image: string | null\n          name: string | null\n          notification_frequency: Database[\"public\"][\"Enums\"][\"notification_frequency\"]\n          profile_picture: string | null\n          push_notifications_enabled: boolean\n          updated_at: string\n        }\n        Insert: {\n          bio?: string | null\n          created_at?: string\n          email?: string | null\n          email_notifications_enabled?: boolean\n          email_verified?: string | null\n          id: string\n          image?: string | null\n          name?: string | null\n          notification_frequency?: Database[\"public\"][\"Enums\"][\"notification_frequency\"]\n          profile_picture?: string | null\n          push_notifications_enabled?: boolean\n          updated_at?: string\n        }\n        Update: {\n          bio?: string | null\n          created_at?: string\n          email?: string | null\n          email_notifications_enabled?: boolean\n          email_verified?: string | null\n          id?: string\n          image?: string | null\n          name?: string | null\n          notification_frequency?: Database[\"public\"][\"Enums\"][\"notification_frequency\"]\n          profile_picture?: string | null\n          push_notifications_enabled?: boolean\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      verification_tokens: {\n        Row: {\n          expires: string\n          identifier: string\n          token: string\n        }\n        Insert: {\n          expires: string\n          identifier: string\n          token: string\n        }\n        Update: {\n          expires?: string\n          identifier?: string\n          token?: string\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      public_organizations_minimal: {\n        Row: {\n          id: string | null\n          logo_url: string | null\n          name: string | null\n          subdomain: string | null\n        }\n        Relationships: []\n      }\n    }\n    Functions: {\n      cleanup_anonymous_rate_limits: {\n        Args: Record<PropertyKey, never>\n        Returns: undefined\n      }\n      fn_effective_issue_public: {\n        Args: { issue_id: string }\n        Returns: boolean\n      }\n      fn_effective_location_public: {\n        Args: { loc_id: string }\n        Returns: boolean\n      }\n      fn_effective_machine_public: {\n        Args: { machine_id: string }\n        Returns: boolean\n      }\n      fn_has_permission: {\n        Args: { org_id: string; perm_name: string; uid: string }\n        Returns: boolean\n      }\n      fn_is_org_member: {\n        Args: { org_id: string; uid: string }\n        Returns: boolean\n      }\n      fn_public_organizations_minimal: {\n        Args: Record<PropertyKey, never>\n        Returns: {\n          id: string\n          logo_url: string\n          name: string\n          subdomain: string\n        }[]\n      }\n    }\n    Enums: {\n      activity_type:\n        | \"CREATED\"\n        | \"STATUS_CHANGED\"\n        | \"ASSIGNED\"\n        | \"PRIORITY_CHANGED\"\n        | \"COMMENTED\"\n        | \"COMMENT_DELETED\"\n        | \"ATTACHMENT_ADDED\"\n        | \"MERGED\"\n        | \"RESOLVED\"\n        | \"REOPENED\"\n        | \"SYSTEM\"\n      commenter_type: \"authenticated\" | \"anonymous\"\n      moderation_status: \"pending\" | \"approved\" | \"rejected\"\n      notification_entity: \"ISSUE\" | \"MACHINE\" | \"COMMENT\" | \"ORGANIZATION\"\n      notification_frequency: \"IMMEDIATE\" | \"DAILY\" | \"WEEKLY\" | \"NEVER\"\n      notification_type:\n        | \"ISSUE_CREATED\"\n        | \"ISSUE_UPDATED\"\n        | \"ISSUE_ASSIGNED\"\n        | \"ISSUE_COMMENTED\"\n        | \"MACHINE_ASSIGNED\"\n        | \"SYSTEM_ANNOUNCEMENT\"\n      reporter_type: \"authenticated\" | \"anonymous\"\n      status_category: \"NEW\" | \"IN_PROGRESS\" | \"RESOLVED\"\n      voter_type: \"authenticated\" | \"anonymous\"\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DatabaseWithoutInternals = Omit<Database, \"__InternalSupabase\">\n\ntype DefaultSchema = DatabaseWithoutInternals[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n    | { schema: keyof DatabaseWithoutInternals },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n        DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n      DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n    ? R\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])\n    ? (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n        Row: infer R\n      }\n      ? R\n      : never\n    : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof DatabaseWithoutInternals },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Insert: infer I\n    }\n    ? I\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Insert: infer I\n      }\n      ? I\n      : never\n    : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof DatabaseWithoutInternals },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Update: infer U\n    }\n    ? U\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Update: infer U\n      }\n      ? U\n      : never\n    : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n    | keyof DefaultSchema[\"Enums\"]\n    | { schema: keyof DatabaseWithoutInternals },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n    : never = never,\n> = DefaultSchemaEnumNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n    ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n    : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n    | keyof DefaultSchema[\"CompositeTypes\"]\n    | { schema: keyof DatabaseWithoutInternals },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n    : never = never,\n> = PublicCompositeTypeNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n    ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n    : never\n\nexport const Constants = {\n  graphql_public: {\n    Enums: {},\n  },\n  public: {\n    Enums: {\n      activity_type: [\n        \"CREATED\",\n        \"STATUS_CHANGED\",\n        \"ASSIGNED\",\n        \"PRIORITY_CHANGED\",\n        \"COMMENTED\",\n        \"COMMENT_DELETED\",\n        \"ATTACHMENT_ADDED\",\n        \"MERGED\",\n        \"RESOLVED\",\n        \"REOPENED\",\n        \"SYSTEM\",\n      ],\n      commenter_type: [\"authenticated\", \"anonymous\"],\n      moderation_status: [\"pending\", \"approved\", \"rejected\"],\n      notification_entity: [\"ISSUE\", \"MACHINE\", \"COMMENT\", \"ORGANIZATION\"],\n      notification_frequency: [\"IMMEDIATE\", \"DAILY\", \"WEEKLY\", \"NEVER\"],\n      notification_type: [\n        \"ISSUE_CREATED\",\n        \"ISSUE_UPDATED\",\n        \"ISSUE_ASSIGNED\",\n        \"ISSUE_COMMENTED\",\n        \"MACHINE_ASSIGNED\",\n        \"SYSTEM_ANNOUNCEMENT\",\n      ],\n      reporter_type: [\"authenticated\", \"anonymous\"],\n      status_category: [\"NEW\", \"IN_PROGRESS\", \"RESOLVED\"],\n      voter_type: [\"authenticated\", \"anonymous\"],\n    },\n  },\n} as const\n\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/types/db.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/types/filters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/types/guards.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/types/search.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/types/supabase-validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/types/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/types/test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/types/trpc.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/types/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/types/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/users/roleManagementValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[291,294],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[291,294],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n\n// Utility for conditional styling with MUI coexistence\nexport function muiToTailwind(_muiStyles: Record<string, any>): string {\n  // Helper to convert MUI sx props to Tailwind classes\n  // Implementation for gradual migration\n  return \"\";\n}\n\n// Design system bridge utilities\nexport const spacing = {\n  xs: \"0.5rem\",\n  sm: \"0.75rem\",\n  md: \"1rem\",\n  lg: \"1.5rem\",\n  xl: \"2rem\",\n  \"2xl\": \"3rem\",\n} as const;\n\nexport const colors = {\n  // Map your existing MUI theme colors to Tailwind variables\n  primary: \"hsl(var(--primary))\",\n  secondary: \"hsl(var(--secondary))\",\n  error: \"hsl(var(--destructive))\",\n  warning: \"hsl(var(--warning))\",\n  info: \"hsl(var(--info))\",\n  success: \"hsl(var(--success))\",\n} as const;\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/utils/__tests__/auth-response-transformers.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/utils/__tests__/case-transformers.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/utils/__tests__/machine-response-transformers.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/utils/api-response-transformers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/utils/auth-response-transformers.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":131,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":131,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":131,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3960,3963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3960,3963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .rolePermissions on an `any` value.","line":132,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":132,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":133,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":137,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .permissions on an `any` value.","line":133,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":133,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":133,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":133,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .rolePermissions on an `any` value.","line":133,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":133,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .rolePermissions on an `any` value.","line":138,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .permissions on an `any` value.","line":141,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":142,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":147,"endColumn":9},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .permissions on an `any` value.","line":142,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":142,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":142,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":142,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .permissions on an `any` value.","line":142,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":142,"endColumn":42}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { transformKeysToCamelCase } from \"./case-transformers\";\n\n// TypeScript types for common auth response shapes\nexport interface UserResponse {\n  id: string;\n  email: string;\n  name: string | null;\n  image: string | null;\n  emailVerified: Date | null;\n  notificationFrequency: string | null;\n  emailNotificationsEnabled: boolean;\n  pushNotificationsEnabled: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface OrganizationResponse {\n  id: string;\n  name: string;\n  subdomain: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface MembershipResponse {\n  id: string;\n  userId: string;\n  organizationId: string;\n  roleId: string;\n  createdAt: Date;\n  updatedAt: Date;\n  user?: UserResponse;\n  role?: {\n    id: string;\n    name: string;\n    permissions: { name: string }[];\n  };\n}\n\nexport interface UploadAuthContextResponse {\n  user: {\n    id: string;\n    email: string;\n    name: string | null;\n  };\n  organization: OrganizationResponse;\n  membership: MembershipResponse;\n  userPermissions: string[];\n}\n\nexport interface AuthUserProfile {\n  id: string;\n  name: string | null;\n  email: string | null;\n  image: string | null;\n  profilePicture?: string | null;\n}\n\n/**\n * Transforms user objects from database snake_case to API camelCase.\n * Handles user data with profile information, notification settings, and timestamps.\n *\n * @param user Raw user object from database with snake_case fields\n * @returns Transformed user object with camelCase fields for API consumption\n *\n * @example\n * const dbUser = { email_verified: new Date(), notification_frequency: 'daily' };\n * const apiUser = transformUserResponse(dbUser);\n * // Result: { emailVerified: Date, notificationFrequency: 'daily' }\n */\nexport function transformUserResponse(user: unknown): UserResponse {\n  return transformKeysToCamelCase(user) as UserResponse;\n}\n\n/**\n * Transforms organization objects from database snake_case to API camelCase.\n * Handles organization data with subdomain and configuration settings.\n *\n * @param org Raw organization object from database with snake_case fields\n * @returns Transformed organization object with camelCase fields for API consumption\n *\n * @example\n * const dbOrg = { created_at: new Date(), updated_at: new Date() };\n * const apiOrg = transformOrganizationResponse(dbOrg);\n * // Result: { createdAt: Date, updatedAt: Date }\n */\nexport function transformOrganizationResponse(\n  org: unknown,\n): OrganizationResponse {\n  return transformKeysToCamelCase(org) as OrganizationResponse;\n}\n\n/**\n * Transforms membership objects from database snake_case to API camelCase.\n * Handles complex membership objects with nested user and role relations.\n * Properly transforms nested user, role, and permissions data.\n *\n * @param membership Raw membership object from database with snake_case fields\n * @returns Transformed membership object with camelCase fields for API consumption\n *\n * @example\n * const dbMembership = {\n *   user_id: 'user1',\n *   organization_id: 'org1',\n *   role: { role_permissions: [{ permission: { name: 'read' } }] }\n * };\n * const apiMembership = transformMembershipResponse(dbMembership);\n * // Result: { userId: 'user1', organizationId: 'org1', role: { permissions: [...] } }\n */\nexport function transformMembershipResponse(\n  membership: unknown,\n): MembershipResponse {\n  const transformed = transformKeysToCamelCase(\n    membership,\n  ) as MembershipResponse;\n\n  // Handle nested user transformation if present\n  if (transformed.user && typeof transformed.user === \"object\") {\n    transformed.user = transformUserResponse(transformed.user);\n  }\n\n  // Handle nested role transformation if present\n  if (transformed.role && typeof transformed.role === \"object\") {\n    transformed.role = transformKeysToCamelCase(transformed.role) as {\n      id: string;\n      name: string;\n      permissions: { name: string }[];\n    };\n\n    // Handle role permissions array if present\n    const role = transformed.role as any; // Temporary any for permission processing\n    if (Array.isArray(role.rolePermissions)) {\n      role.permissions = role.rolePermissions.map(\n        (rp: Record<string, unknown>) => {\n          return rp[\"permission\"] ?? rp;\n        },\n      );\n      delete role.rolePermissions;\n    }\n\n    if (Array.isArray(role.permissions)) {\n      role.permissions = role.permissions.map((p: Record<string, unknown>) => {\n        if (typeof p === \"object\") {\n          return transformKeysToCamelCase(p) as Record<string, unknown>;\n        }\n        return p;\n      });\n    }\n  }\n\n  return transformed;\n}\n\n/**\n * Transforms upload auth context from database snake_case to API camelCase.\n * Specifically designed for upload authentication contexts with user, organization,\n * membership, and permissions data. Handles all nested relations properly.\n *\n * @param ctx Raw upload auth context from database with snake_case fields\n * @returns Transformed context with camelCase fields for API consumption\n *\n * @example\n * const dbCtx = {\n *   organization: { created_at: new Date() },\n *   membership: { user_id: 'user1', role: { role_permissions: [...] } }\n * };\n * const apiCtx = transformUploadAuthContextResponse(dbCtx);\n * // Result: { organization: { createdAt: Date }, membership: { userId: 'user1', ... } }\n */\nexport function transformUploadAuthContextResponse(\n  ctx: unknown,\n): UploadAuthContextResponse {\n  const transformed = transformKeysToCamelCase(\n    ctx,\n  ) as UploadAuthContextResponse;\n\n  // Transform nested organization if present\n  if (typeof transformed.organization === \"object\") {\n    transformed.organization = transformOrganizationResponse(\n      transformed.organization,\n    );\n  }\n\n  // Transform nested membership if present\n  if (typeof transformed.membership === \"object\") {\n    transformed.membership = transformMembershipResponse(\n      transformed.membership,\n    );\n  }\n\n  // Ensure userPermissions is an array of strings\n  if (!Array.isArray(transformed.userPermissions)) {\n    transformed.userPermissions = [];\n  }\n\n  return transformed;\n}\n\n/**\n * Transforms auth user profile from database snake_case to API camelCase.\n * Handles user profile data with image and profile picture fields.\n * Preserves both image and profilePicture fields for compatibility.\n *\n * @param profile Raw user profile object from database with snake_case fields\n * @returns Transformed profile object with camelCase fields for API consumption\n *\n * @example\n * const dbProfile = { profile_picture: 'url', email_verified: true };\n * const apiProfile = transformAuthUserProfile(profile);\n * // Result: { profilePicture: 'url', emailVerified: true }\n */\nexport function transformAuthUserProfile(profile: unknown): AuthUserProfile {\n  const transformed = transformKeysToCamelCase(profile) as AuthUserProfile;\n\n  // Field transformation is handled by transformKeysToCamelCase\n\n  return transformed;\n}\n\n/**\n * Utility function to transform arrays of auth objects.\n * Applies the appropriate transformer to each item in the array.\n *\n * @param items Array of database objects to transform\n * @param transformer Function to apply to each item\n * @returns Array of transformed objects\n */\nexport function transformAuthArray<T>(\n  items: unknown[],\n  transformer: (item: unknown) => T,\n): T[] {\n  if (!Array.isArray(items)) {\n    return [];\n  }\n\n  return items.map(transformer);\n}\n\n/**\n * Convenience function for transforming user arrays.\n */\nexport function transformUserArray(users: unknown[]): UserResponse[] {\n  return transformAuthArray(users, transformUserResponse);\n}\n\n/**\n * Convenience function for transforming membership arrays.\n */\nexport function transformMembershipArray(\n  memberships: unknown[],\n): MembershipResponse[] {\n  return transformAuthArray(memberships, transformMembershipResponse);\n}\n\n/**\n * Convenience function for transforming organization arrays.\n */\nexport function transformOrganizationArray(\n  organizations: unknown[],\n): OrganizationResponse[] {\n  return transformAuthArray(organizations, transformOrganizationResponse);\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/utils/case-transformers.ts","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":193,"column":5,"nodeType":"MemberExpression","endLine":193,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":245,"column":5,"nodeType":"MemberExpression","endLine":245,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/utils/domain.ts","messages":[{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"string | undefined\" of template literal expression.","line":52,"column":21,"nodeType":"Identifier","messageId":"invalidType","endLine":52,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Domain utilities for multi-tenant cookie management\n */\n\n/**\n * Extracts the root domain from a host header for cookie domain setting\n *\n * Examples:\n * - \"org1.mysite.com\" -> \".mysite.com\"\n * - \"org2.mysite.com:3000\" -> \".mysite.com\"\n * - \"localhost:3000\" -> \".localhost\"\n * - \"localhost\" -> \".localhost\"\n * - \"mysite.com\" -> \".mysite.com\"\n */\nexport function getCookieDomain(host: string): string {\n  // Remove port if present\n  const hostParts = host.split(\":\");\n  const hostname = hostParts[0] ?? host;\n\n  // Handle localhost (development)\n  if (hostname === \"localhost\") {\n    return \".localhost\";\n  }\n\n  // For production domains, we want the root domain with leading dot\n  // This handles both subdomains (org1.mysite.com -> .mysite.com)\n  // and apex domains (mysite.com -> .mysite.com)\n  const parts = hostname.split(\".\");\n\n  if (parts.length >= 2) {\n    // Take the last two parts (domain.tld)\n    const rootDomain = parts.slice(-2).join(\".\");\n    return `.${rootDomain}`;\n  }\n\n  // Fallback: use the hostname as-is with leading dot\n  return `.${hostname}`;\n}\n\n/**\n * Gets the full production URL from a host header\n * Used for client-side redirects and absolute URLs\n */\nexport function getProductionUrl(host: string): string {\n  const hostParts = host.split(\":\");\n  const hostname = hostParts.length > 0 ? hostParts[0] : host;\n\n  if (hostname === \"localhost\") {\n    return `https://${host}`;\n  }\n\n  return `https://${hostname}`;\n}\n\n/**\n * Client-safe version to get the current domain for redirects\n * Uses window.location when available (client-side)\n */\nexport function getCurrentDomain(): string {\n  if (typeof window === \"undefined\") {\n    // Server-side fallback - should not be used for redirects\n    return \"localhost\";\n  }\n\n  const hostname = window.location.hostname;\n\n  if (hostname === \"localhost\") {\n    return \"localhost\";\n  }\n\n  // Extract root domain (e.g., org1.mysite.com -> mysite.com)\n  const parts = hostname.split(\".\");\n  if (parts.length >= 2) {\n    return parts.slice(-2).join(\".\");\n  }\n\n  return hostname;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/utils/form-data.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":67,"column":24,"nodeType":"MemberExpression","endLine":67,"endColumn":33},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":72,"column":9,"nodeType":"MemberExpression","endLine":72,"endColumn":18},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":72,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":72,"endColumn":31},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":75,"column":7,"nodeType":"MemberExpression","endLine":75,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Type-safe FormData utilities for Server Actions\n * Eliminates TS4111 bracket notation errors and provides runtime safety\n */\n\nimport { z } from \"zod\";\n\n/**\n * Extract a single field from FormData with type safety\n */\nexport function extractFormField<T>(\n  formData: FormData,\n  fieldName: string,\n  schema: z.ZodType<T>,\n): T {\n  const value = formData.get(fieldName);\n\n  if (value === null) {\n    throw new Error(`Missing required field: ${fieldName}`);\n  }\n\n  try {\n    return schema.parse(value);\n  } catch (error) {\n    throw new Error(\n      `Invalid ${fieldName}: ${error instanceof z.ZodError ? error.message : \"Validation failed\"}`,\n    );\n  }\n}\n\n/**\n * Extract an optional field from FormData with type safety\n */\nexport function extractOptionalFormField<T>(\n  formData: FormData,\n  fieldName: string,\n  schema: z.ZodType<T>,\n): T | null {\n  const value = formData.get(fieldName);\n\n  if (value === null) {\n    return null;\n  }\n\n  try {\n    return schema.parse(value);\n  } catch (error) {\n    throw new Error(\n      `Invalid ${fieldName}: ${error instanceof z.ZodError ? error.message : \"Validation failed\"}`,\n    );\n  }\n}\n\n/**\n * Extract multiple fields from FormData using a schema\n */\nexport function extractFormFields<T extends Record<string, unknown>>(\n  formData: FormData,\n  schema: z.ZodType<T>,\n): T {\n  // Convert FormData to plain object\n  const data: Record<string, FormDataEntryValue | FormDataEntryValue[]> = {};\n\n  for (const [key, value] of formData.entries()) {\n    if (key in data) {\n      // Handle multiple values for same field name\n      const existing = data[key];\n      if (Array.isArray(existing)) {\n        existing.push(value);\n      } else {\n        // We know existing exists because of the 'key in data' check\n        data[key] = [existing!, value];\n      }\n    } else {\n      data[key] = value;\n    }\n  }\n\n  try {\n    return schema.parse(data);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const fieldErrors = error.issues\n        .map((e) => `${e.path.join(\".\")}: ${e.message}`)\n        .join(\", \");\n      throw new Error(`Form validation failed: ${fieldErrors}`);\n    }\n    throw new Error(\"Form validation failed\");\n  }\n}\n\n/**\n * Common field type schemas for reuse\n */\nexport const formFieldTypes = {\n  string: z.string().trim(),\n  nonEmptyString: z.string().trim().min(1, \"Field cannot be empty\"),\n  email: z\n    .string()\n    .trim()\n    .toLowerCase()\n    .refine((val) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(val), {\n      message: \"Invalid email address\",\n    }),\n  uuid: z\n    .string()\n    .refine(\n      (val) =>\n        /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(\n          val,\n        ),\n      { message: \"Invalid ID format\" },\n    ),\n  boolean: z\n    .union([z.literal(\"true\"), z.literal(\"false\"), z.boolean()])\n    .transform((val) => val === true || val === \"true\"),\n  number: z.union([z.string(), z.number()]).transform((val) => {\n    const num = typeof val === \"string\" ? parseFloat(val) : val;\n    if (isNaN(num)) throw new Error(\"Invalid number\");\n    return num;\n  }),\n  integer: z.union([z.string(), z.number()]).transform((val) => {\n    const num = typeof val === \"string\" ? parseInt(val, 10) : val;\n    if (isNaN(num)) throw new Error(\"Invalid integer\");\n    return num;\n  }),\n} as const;\n\n/**\n * Helper for extracting common field types without defining schema inline\n */\nexport const extractField = {\n  string: (formData: FormData, name: string) =>\n    extractFormField(formData, name, formFieldTypes.string),\n  nonEmptyString: (formData: FormData, name: string) =>\n    extractFormField(formData, name, formFieldTypes.nonEmptyString),\n  email: (formData: FormData, name: string) =>\n    extractFormField(formData, name, formFieldTypes.email),\n  uuid: (formData: FormData, name: string) =>\n    extractFormField(formData, name, formFieldTypes.uuid),\n  boolean: (formData: FormData, name: string) =>\n    extractFormField(formData, name, formFieldTypes.boolean),\n  number: (formData: FormData, name: string) =>\n    extractFormField(formData, name, formFieldTypes.number),\n  integer: (formData: FormData, name: string) =>\n    extractFormField(formData, name, formFieldTypes.integer),\n} as const;\n\n/**\n * Helper for extracting optional common field types\n */\nexport const extractOptionalField = {\n  string: (formData: FormData, name: string) =>\n    extractOptionalFormField(formData, name, formFieldTypes.string),\n  nonEmptyString: (formData: FormData, name: string) =>\n    extractOptionalFormField(formData, name, formFieldTypes.nonEmptyString),\n  email: (formData: FormData, name: string) =>\n    extractOptionalFormField(formData, name, formFieldTypes.email),\n  uuid: (formData: FormData, name: string) =>\n    extractOptionalFormField(formData, name, formFieldTypes.uuid),\n  boolean: (formData: FormData, name: string) =>\n    extractOptionalFormField(formData, name, formFieldTypes.boolean),\n  number: (formData: FormData, name: string) =>\n    extractOptionalFormField(formData, name, formFieldTypes.number),\n  integer: (formData: FormData, name: string) =>\n    extractOptionalFormField(formData, name, formFieldTypes.integer),\n} as const;\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/utils/id-generation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/utils/image-processing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/utils/machine-response-transformers.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":138,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":138,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4524,4527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4524,4527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .machines on an `any` value.","line":139,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .machines on an `any` value.","line":140,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .machines on an `any` value.","line":141,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":38}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Specialized transformation utilities for machine API responses.\n *\n * This module provides specialized transformers for converting machine and location\n * objects from snake_case database results to camelCase API responses. These transformers\n * handle complex nested structures, arrays, and special fields like QR codes and\n * notification settings.\n *\n * @example\n * ```typescript\n * // Transform a single machine with relations\n * const machineFromDb = {\n *   id: 'machine_123',\n *   name: 'Medieval Madness',\n *   qr_code_id: 'qr_456',\n *   model: { machine_type: 'pinball' },\n *   owner: { profile_picture: 'avatar.jpg' }\n * };\n * const apiResponse = transformMachineResponse(machineFromDb);\n * // { id: 'machine_123', name: 'Medieval Madness', qrCodeId: 'qr_456', ... }\n *\n * // Transform an array of machines\n * const machinesFromDb = [{ id: 'machine_1', qr_code_id: 'qr_1' }];\n * const apiResponse = transformMachinesResponse(machinesFromDb);\n * ```\n */\n\nimport {\n  transformKeysToCamelCase,\n  transformKeysToSnakeCase,\n} from \"./case-transformers\";\nimport type {\n  MachineResponse,\n  LocationResponse,\n  MachineForIssues,\n} from \"~/lib/types/api\";\n\n/**\n * NOTE: MachineResponse, LocationResponse, MachineForIssues types are now defined in ~/lib/types/api.ts\n * Import from there for consistent type definitions across the codebase.\n */\n\nexport interface MachineWithRelations extends MachineResponse {\n  model: NonNullable<MachineResponse[\"model\"]>;\n  location: NonNullable<MachineResponse[\"location\"]>;\n}\n\nexport interface LocationWithMachines extends LocationResponse {\n  machines: MachineResponse[];\n}\n\n/**\n * Transforms a machine object with model, location, owner relations and notification settings.\n * Handles snake_case to camelCase conversion for complex machine objects with nested relations.\n *\n * @param machine - Raw machine object from database with snake_case fields\n * @returns Transformed machine object with camelCase fields\n *\n * @example\n * ```typescript\n * const dbMachine = {\n *   id: 'machine_123',\n *   qr_code_id: 'qr_456',\n *   owner_notifications_enabled: true,\n *   model: { machine_type: 'pinball' },\n *   owner: { profile_picture: 'avatar.jpg' }\n * };\n * const apiMachine = transformMachineResponse(dbMachine);\n * // { id: 'machine_123', qrCodeId: 'qr_456', ownerNotificationsEnabled: true, ... }\n * ```\n */\nexport function transformMachineResponse(machine: unknown): MachineResponse {\n  if (!machine || typeof machine !== \"object\") {\n    throw new Error(\"Machine data must be an object\");\n  }\n\n  return transformKeysToCamelCase(\n    machine as Record<string, unknown>,\n  ) as MachineResponse;\n}\n\n/**\n * Transforms an array of machine objects for machine list endpoints.\n * Efficiently handles transformation of multiple machines with their relations.\n *\n * @param machines - Array of raw machine objects from database\n * @returns Array of transformed machine objects with camelCase fields\n *\n * @example\n * ```typescript\n * const dbMachines = [\n *   { id: 'machine_1', qr_code_id: 'qr_1', notify_on_new_issues: true },\n *   { id: 'machine_2', qr_code_id: 'qr_2', notify_on_status_changes: false }\n * ];\n * const apiMachines = transformMachinesResponse(dbMachines);\n * ```\n */\nexport function transformMachinesResponse(\n  machines: unknown,\n): MachineResponse[] {\n  if (!Array.isArray(machines)) {\n    throw new Error(\"Machines data must be an array\");\n  }\n\n  return machines.map((machine) => transformMachineResponse(machine));\n}\n\n/**\n * Transforms a location object with machines array and _count objects.\n * Handles complex location structures with nested machine arrays and count metadata.\n *\n * @param location - Raw location object from database with snake_case fields\n * @returns Transformed location object with camelCase fields\n *\n * @example\n * ```typescript\n * const dbLocation = {\n *   id: 'location_123',\n *   organization_id: 'org_456',\n *   pinball_map_id: 789,\n *   _count: { machines: 5 },\n *   machines: [{ id: 'machine_1', qr_code_id: 'qr_1' }]\n * };\n * const apiLocation = transformLocationResponse(dbLocation);\n * ```\n */\nexport function transformLocationResponse(location: unknown): LocationResponse {\n  if (!location || typeof location !== \"object\") {\n    throw new Error(\"Location data must be an object\");\n  }\n\n  const transformed = transformKeysToCamelCase(\n    location as Record<string, unknown>,\n  ) as LocationResponse;\n\n  // Handle nested machines array if present\n  if (\"machines\" in transformed) {\n    const locationWithMachines = transformed as any;\n    if (Array.isArray(locationWithMachines.machines)) {\n      locationWithMachines.machines = transformMachinesResponse(\n        locationWithMachines.machines,\n      );\n    }\n  }\n\n  return transformed;\n}\n\n/**\n * Transforms an array of location objects for location list endpoints.\n * Efficiently handles transformation of multiple locations with their nested machines.\n *\n * @param locations - Array of raw location objects from database\n * @returns Array of transformed location objects with camelCase fields\n *\n * @example\n * ```typescript\n * const dbLocations = [\n *   { id: 'location_1', pinball_map_id: 123, machines: [...] },\n *   { id: 'location_2', organization_id: 'org_456', _count: { machines: 3 } }\n * ];\n * const apiLocations = transformLocationsResponse(dbLocations);\n * ```\n */\nexport function transformLocationsResponse(\n  locations: unknown,\n): LocationResponse[] {\n  if (!Array.isArray(locations)) {\n    throw new Error(\"Locations data must be an array\");\n  }\n\n  return locations.map((location) => transformLocationResponse(location));\n}\n\n/**\n * Transforms a simplified machine object for issue reporting endpoints.\n * Handles minimal machine data used in issue forms and public endpoints.\n *\n * @param machine - Raw machine object with minimal fields for issues\n * @returns Transformed machine object for issue contexts\n *\n * @example\n * ```typescript\n * const dbMachine = {\n *   id: 'machine_123',\n *   name: 'Medieval Madness',\n *   model: { name: 'Medieval Madness (Williams 1997)' }\n * };\n * const apiMachine = transformMachineForIssuesResponse(dbMachine);\n * ```\n */\nexport function transformMachineForIssuesResponse(\n  machine: Record<string, unknown>,\n): MachineForIssues {\n  return transformKeysToCamelCase(machine) as MachineForIssues;\n}\n\n/**\n * Transforms an array of simplified machine objects for issue reporting.\n * Used by public endpoints that provide machine lists for issue submission.\n *\n * @param machines - Array of simplified machine objects\n * @returns Array of transformed machines for issue contexts\n */\nexport function transformMachinesForIssuesResponse(\n  machines: unknown,\n): MachineForIssues[] {\n  if (!Array.isArray(machines)) {\n    throw new Error(\"Machines data must be an array\");\n  }\n\n  return machines.map((machine) => {\n    if (!machine || typeof machine !== \"object\") {\n      throw new Error(\"Machine data must be an object\");\n    }\n    return transformMachineForIssuesResponse(\n      machine as Record<string, unknown>,\n    );\n  });\n}\n\n/**\n * Utility function to convert API request data from camelCase to snake_case.\n * Used when processing incoming API requests that need to be converted to database format.\n *\n * @param data - API request data with camelCase fields\n * @returns Data converted to snake_case for database operations\n *\n * @example\n * ```typescript\n * const apiRequest = {\n *   machineId: 'machine_123',\n *   locationId: 'location_456',\n *   ownerNotificationsEnabled: true\n * };\n * const dbData = transformApiRequestToDb(apiRequest);\n * // { machine_id: 'machine_123', location_id: 'location_456', owner_notifications_enabled: true }\n * ```\n */\nexport function transformApiRequestToDb(\n  data: Record<string, unknown>,\n): Record<string, unknown> {\n  return transformKeysToSnakeCase(data) as Record<string, unknown>;\n}\n\n// Removed redundant type-safe transformers - use the base functions instead\n// transformMachineResponse and transformLocationResponse already provide type safety\n\n/**\n * Convenience function for transforming any database result to API response format.\n * Generic transformer that can handle any type of database result.\n *\n * @param data - Any database result object or array\n * @returns Transformed data with camelCase keys\n */\nexport function transformDbResultToApiResponse(data: unknown): unknown {\n  return transformKeysToCamelCase(data);\n}\n\n/**\n * Alias for transformApiRequestToDb for backwards compatibility.\n * Use transformApiRequestToDb for new code.\n */\nexport const transformApiRequestToDbFormat = transformApiRequestToDb;\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/utils/membership-transformers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/utils/visibility-inheritance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/validation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/lib/validation/schemas.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":67,"column":60,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":67,"endColumn":62},{"ruleId":"@typescript-eslint/no-deprecated","severity":2,"message":"`email` is deprecated. Use `z.email()` instead.","line":262,"column":4,"nodeType":"Identifier","messageId":"deprecatedWithReason","endLine":262,"endColumn":9},{"ruleId":"@typescript-eslint/no-unnecessary-type-parameters","severity":2,"message":"Type parameter T is used only once in the function signature.","line":424,"column":34,"nodeType":"TSTypeParameter","messageId":"sole","endLine":424,"endColumn":57,"suggestions":[{"messageId":"replaceUsagesWithConstraint","fix":{"range":[12751,12785],"text":"(shape: z.ZodRawShape"},"desc":"Replace all usages of type parameter with its constraint."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":427,"column":5,"nodeType":"MemberExpression","endLine":427,"endColumn":20},{"ruleId":"@typescript-eslint/no-unnecessary-type-parameters","severity":2,"message":"Type parameter IdKey is used only once in the function signature.","line":442,"column":24,"nodeType":"TSTypeParameter","messageId":"sole","endLine":442,"endColumn":44,"suggestions":[{"messageId":"replaceUsagesWithConstraint","fix":{"range":[13367,13405],"text":"(\n  idKey: string"},"desc":"Replace all usages of type parameter with its constraint."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":445,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":445,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13453,13456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13453,13456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":446,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":446,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13474,13477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13474,13477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Centralized validation schema library.\n *\n * Consolidates duplicated validation logic across server & action layers.\n * Provides consistent validation patterns for IDs, text content, emails, and composite objects.\n */\nimport { z } from \"zod\";\n\n// -----------------------------------------------------------------------------\n// Validation Limits (single source of truth for character limits)\n// -----------------------------------------------------------------------------\n/**\n * Centralized validation limits for consistent enforcement across the application.\n * These limits help prevent database constraint violations and ensure reasonable\n * user input boundaries.\n *\n * @example\n * ```typescript\n * import { LIMITS } from \"~/lib/validation/schemas\";\n *\n * const titleSchema = z.string().max(LIMITS.TITLE_MAX);\n * ```\n */\nexport const LIMITS = {\n  /** Maximum characters for user comments and similar content */\n  COMMENT_MAX: 2000,\n  /** Maximum characters for titles (issues, etc.) */\n  TITLE_MAX: 200,\n  /** Maximum characters for entity names (machines, organizations, etc.) */\n  NAME_MAX: 255,\n  /** Maximum characters for longer descriptions */\n  DESCRIPTION_MAX: 5000,\n  /** Maximum characters for search query strings */\n  SEARCH_QUERY_MAX: 200,\n  /** Maximum characters for email addresses (RFC 5321 limit) */\n  EMAIL_MAX: 320,\n} as const;\n\n// -----------------------------------------------------------------------------\n// Helpers\n// -----------------------------------------------------------------------------\n/**\n * Wrap any Zod schema as optional for use in update operations.\n *\n * @example\n * ```typescript\n * const requiredName = z.string().min(1);\n * const optionalName = optional(requiredName); // z.ZodOptional<z.ZodString>\n * ```\n */\nexport const optional = <T extends z.ZodType>(schema: T): z.ZodOptional<T> =>\n  schema.optional();\n\n/**\n * Create a simple non-empty ID schema with a customizable error message.\n * Uses trim() to handle whitespace-only inputs.\n *\n * @param message - Custom error message for empty/missing IDs\n * @returns A Zod string schema requiring non-empty input\n *\n * @example\n * ```typescript\n * const machineId = createIdSchema(\"Machine ID is required\");\n * const genericId = createIdSchema(); // Uses default message\n * ```\n */\nexport const createIdSchema = (message = \"ID is required\") =>\n  z\n    .string()\n    .min(1, { message })\n    .transform((s) => s.trim());\n\n// -----------------------------------------------------------------------------\n// Core ID Schemas\n// -----------------------------------------------------------------------------\n/**\n * Standard non-empty ID schema for general entity identification.\n * Accepts any non-empty string after trimming whitespace.\n *\n * @example\n * ```typescript\n * const result = idSchema.parse(\"abc123\"); // ✓ \"abc123\"\n * idSchema.parse(\"  \"); // ✗ throws \"ID is required\"\n * ```\n */\nexport const idSchema = createIdSchema();\n\n/**\n * UUID-formatted ID with validation and clear error messaging.\n * Automatically trims whitespace and validates UUID format.\n *\n * @example\n * ```typescript\n * const result = uuidSchema.parse(\"550e8400-e29b-41d4-a716-446655440000\"); // ✓\n * uuidSchema.parse(\"invalid-uuid\"); // ✗ throws \"ID must be a valid UUID\"\n * ```\n */\nexport const uuidSchema = z\n  .string()\n  .transform((s: string) => s.trim())\n  .refine(\n    (val) =>\n      /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(\n        val,\n      ),\n    { message: \"ID must be a valid UUID\" },\n  );\n\n/**\n * Entity-specific ID schemas for type safety and documentation.\n * All are UUID-based but provide semantic meaning in function signatures.\n *\n * @example\n * ```typescript\n * function getMachine(id: z.infer<typeof machineIdSchema>) { ... }\n * function getIssue(id: z.infer<typeof issueIdSchema>) { ... }\n * ```\n */\nexport const machineIdSchema = uuidSchema;\nexport const issueIdSchema = uuidSchema;\nexport const userIdSchema = uuidSchema;\nexport const locationIdSchema = uuidSchema;\n\n// -----------------------------------------------------------------------------\n// Text / Content Schemas\n// -----------------------------------------------------------------------------\n/**\n * Comment content validation for user-submitted comments.\n * Enforces non-empty content and a conservative max length for database storage.\n * Automatically trims leading/trailing whitespace.\n *\n * @example\n * ```typescript\n * const comment = commentContentSchema.parse(\"Great feedback!\"); // ✓\n * commentContentSchema.parse(\"\"); // ✗ \"Comment cannot be empty\"\n * commentContentSchema.parse(\"x\".repeat(2001)); // ✗ \"Comment must be less than 2000 characters\"\n * ```\n */\nexport const commentContentSchema = z\n  .string()\n  .min(1, { message: \"Comment cannot be empty\" })\n  .max(LIMITS.COMMENT_MAX, {\n    message: `Comment must be less than ${LIMITS.COMMENT_MAX.toString()} characters`,\n  })\n  .transform((s) => s.trim());\n\n/**\n * Optional comment schema for update operations where comment may be omitted.\n *\n * @example\n * ```typescript\n * const updateData = { comment: optionalCommentSchema.parse(undefined) }; // ✓\n * ```\n */\nexport const optionalCommentSchema = optional(commentContentSchema);\n\n/**\n * Title validation for issues and similar short descriptive text.\n * Requires non-empty content with reasonable length limits.\n *\n * @example\n * ```typescript\n * const title = titleSchema.parse(\"Pinball machine not working\"); // ✓\n * titleSchema.parse(\"\"); // ✗ \"Title is required\"\n * ```\n */\nexport const titleSchema = z\n  .string()\n  .min(1, { message: \"Title is required\" })\n  .max(LIMITS.TITLE_MAX, {\n    message: `Title must be less than ${LIMITS.TITLE_MAX.toString()} characters`,\n  })\n  .transform((s) => s.trim());\n\n/**\n * Optional title schema for update operations.\n */\nexport const optionalTitleSchema = optional(titleSchema);\n\n/**\n * Backwards-compatible aliases for existing code that expects these specific names.\n */\nexport const issueTitleSchema = titleSchema;\nexport const optionalIssueTitleSchema = optionalTitleSchema;\n\n/**\n * Generic name validation for entities like machines, organizations, locations.\n * Allows longer content than titles but still constrained for UI/database purposes.\n *\n * @example\n * ```typescript\n * const machineName = nameSchema.parse(\"Medieval Madness\"); // ✓\n * const orgName = nameSchema.parse(\"Dave & Buster's Downtown\"); // ✓\n * ```\n */\nexport const nameSchema = z\n  .string()\n  .min(1, { message: \"Name is required\" })\n  .max(LIMITS.NAME_MAX, {\n    message: `Name must be less than ${LIMITS.NAME_MAX.toString()} characters`,\n  })\n  .transform((s) => s.trim());\n\n/**\n * Optional name schema for update operations.\n */\nexport const optionalNameSchema = optional(nameSchema);\n\n/**\n * Backwards-compatible alias for submitter names in public issue forms.\n */\nexport const submitterNameSchema = optionalNameSchema;\n\n/**\n * Longer free-form description text with generous limits.\n * Optional by default since many entities may not require descriptions.\n *\n * @example\n * ```typescript\n * const desc = descriptionSchema.parse(\"This machine has intermittent issues...\"); // ✓\n * const empty = descriptionSchema.parse(\"\"); // ✓ (optional, allows empty)\n * ```\n */\nexport const descriptionSchema = z\n  .string()\n  .max(LIMITS.DESCRIPTION_MAX, {\n    message: `Description must be less than ${LIMITS.DESCRIPTION_MAX.toString()} characters`,\n  })\n  .transform((s) => s.trim())\n  .optional();\n\n/**\n * Search query validation with reasonable limits to prevent abuse.\n * Optional to handle empty search states.\n *\n * @example\n * ```typescript\n * const query = searchQuerySchema.parse(\"broken flipper\"); // ✓\n * const empty = searchQuerySchema.parse(\"\"); // ✓\n * ```\n */\nexport const searchQuerySchema = z\n  .string()\n  .max(LIMITS.SEARCH_QUERY_MAX, {\n    message: `Search query must be less than ${LIMITS.SEARCH_QUERY_MAX.toString()} characters`,\n  })\n  .transform((s) => s.trim())\n  .optional();\n\n/**\n * Standard email validation with RFC-compliant length limits.\n * Automatically trims whitespace and validates email format.\n *\n * @example\n * ```typescript\n * const email = emailSchema.parse(\"user@example.com\"); // ✓\n * emailSchema.parse(\"invalid-email\"); // ✗ \"Invalid email address\"\n * ```\n */\nexport const emailSchema = z\n  .string()\n  .email({ message: \"Invalid email address\" })\n  .max(LIMITS.EMAIL_MAX, {\n    message: `Email must be less than ${String(LIMITS.EMAIL_MAX)} characters`,\n  })\n  .transform((s: string) => s.trim().toLowerCase());\n\n/**\n * Optional email schema for contexts where email may not be required.\n */\nexport const optionalEmailSchema = optional(emailSchema);\n\n// -----------------------------------------------------------------------------\n// Composite / Reusable Object Schemas\n// -----------------------------------------------------------------------------\n/**\n * Generic entity creation schema with basic required fields.\n * Serves as a foundation for more specific entity schemas.\n *\n * @example\n * ```typescript\n * const newEntity = createEntitySchema.parse({\n *   name: \"New Machine\",\n *   description: \"A vintage pinball machine\"\n * }); // ✓ { name: string, description?: string, id?: string }\n * ```\n */\nexport const createEntitySchema = z.object({\n  id: optional(idSchema),\n  name: nameSchema,\n  description: descriptionSchema,\n});\n\n/**\n * Generic entity update schema allowing partial updates.\n * ID is required to identify the entity, other fields are optional.\n *\n * @example\n * ```typescript\n * const updateData = updateEntitySchema.parse({\n *   id: \"entity-123\",\n *   name: \"Updated Name\"\n * }); // ✓ description can be omitted\n * ```\n */\nexport const updateEntitySchema = z.object({\n  id: idSchema,\n  name: optionalNameSchema,\n  description: descriptionSchema,\n});\n\n/**\n * Issue creation schema with required title and optional metadata.\n * Designed for both authenticated and anonymous issue creation flows.\n *\n * @example\n * ```typescript\n * const newIssue = createIssueSchema.parse({\n *   title: \"Machine won't start\",\n *   description: \"The machine powers on but won't start a game\",\n *   organizationId: \"org-123\"\n * });\n * ```\n */\nexport const createIssueSchema = z.object({\n  title: titleSchema,\n  description: descriptionSchema,\n  reporterId: optional(userIdSchema),\n  organizationId: idSchema,\n});\n\n/**\n * Issue update schema allowing partial field updates.\n * ID is required to identify the issue being updated.\n *\n * @example\n * ```typescript\n * const updateData = updateIssueSchema.parse({\n *   id: \"issue-123\",\n *   title: \"Updated issue title\"\n * }); // description can be omitted\n * ```\n */\nexport const updateIssueSchema = z.object({\n  id: issueIdSchema,\n  title: optionalTitleSchema,\n  description: descriptionSchema,\n});\n\n/**\n * Comment creation schema for adding comments to issues.\n * Author ID is optional to support anonymous commenting.\n *\n * @example\n * ```typescript\n * const newComment = createCommentSchema.parse({\n *   issueId: \"issue-123\",\n *   content: \"I'm experiencing the same problem\",\n *   authorId: \"user-456\"\n * });\n * ```\n */\nexport const createCommentSchema = z.object({\n  issueId: issueIdSchema,\n  authorId: optional(userIdSchema),\n  content: commentContentSchema,\n});\n\n/**\n * Comment update schema for editing existing comments.\n * Content is optional to allow for other metadata updates.\n *\n * @example\n * ```typescript\n * const updateData = updateCommentSchema.parse({\n *   id: \"comment-123\",\n *   content: \"Updated comment text\"\n * });\n * ```\n */\nexport const updateCommentSchema = z.object({\n  id: idSchema,\n  content: optional(commentContentSchema),\n});\n\n/**\n * Backwards-compatible alias for existing code expecting this specific name.\n */\nexport const commentCreationSchema = createCommentSchema;\n\n// -----------------------------------------------------------------------------\n// Utility Builder Functions\n// -----------------------------------------------------------------------------\n/**\n * Create a strict object schema for entity creation.\n * Useful for building consistent creation schemas across different entity types.\n *\n * @example\n * ```typescript\n * const createMachineSchema = makeCreateSchema({\n *   name: nameSchema,\n *   model: nameSchema,\n *   location: optionalNameSchema\n * });\n * ```\n */\nexport function makeCreateSchema<T extends z.ZodRawShape>(shape: T): z.ZodObject<T> {\n  return z.object(shape).strict();\n}\n\n/**\n * Create a schema for entity updates where all fields are optional.\n * Automatically converts all provided fields to optional variants.\n *\n * @example\n * ```typescript\n * const updateMachineSchema = makeUpdateSchema({\n *   name: nameSchema,\n *   model: nameSchema,\n *   location: nameSchema\n * }); // All fields become optional\n * ```\n */\nexport function makeUpdateSchema<T extends z.ZodRawShape>(shape: T): z.ZodObject<Record<string, z.ZodType>> {\n  const partialShape: Record<string, z.ZodType> = {};\n  for (const [k, v] of Object.entries(shape)) {\n    partialShape[k] = (v as z.ZodType).optional();\n  }\n  return z.object(partialShape).strict();\n}\n\n/**\n * Add an ID field to an existing schema for operations that require entity identification.\n *\n * @example\n * ```typescript\n * const baseSchema = z.object({ title: titleSchema });\n * const withIdSchema = withId(\"issueId\", issueIdSchema, baseSchema);\n * // Result: { issueId: string, title: string }\n * ```\n */\nexport function withId<IdKey extends string>(\n  idKey: IdKey,\n  idSchema: z.ZodType,\n  payload: z.ZodObject<any>,\n): z.ZodObject<any> {\n  return z.object({ [idKey]: idSchema }).extend(payload.shape);\n}\n\n// -----------------------------------------------------------------------------\n// Exports: Comprehensive collection of validation schemas\n// -----------------------------------------------------------------------------\n/**\n * Default export containing the most commonly used validation schemas.\n * Provides a convenient way to import multiple schemas at once.\n *\n * @example\n * ```typescript\n * import schemas from \"~/lib/validation/schemas\";\n *\n * const title = schemas.titleSchema.parse(\"My Title\");\n * const email = schemas.emailSchema.parse(\"user@example.com\");\n * ```\n */\nconst schemas = {\n  // Core constants\n  LIMITS,\n\n  // ID validation schemas\n  idSchema,\n  uuidSchema,\n  machineIdSchema,\n  issueIdSchema,\n  userIdSchema,\n  locationIdSchema,\n\n  // Text and content validation\n  commentContentSchema,\n  optionalCommentSchema,\n  titleSchema,\n  optionalTitleSchema,\n  nameSchema,\n  optionalNameSchema,\n  descriptionSchema,\n  searchQuerySchema,\n  emailSchema,\n  optionalEmailSchema,\n\n  // Composite object schemas\n  createEntitySchema,\n  updateEntitySchema,\n  createIssueSchema,\n  updateIssueSchema,\n  createCommentSchema,\n  updateCommentSchema,\n\n  // Backwards-compatible aliases\n  issueTitleSchema,\n  optionalIssueTitleSchema,\n  submitterNameSchema,\n  commentCreationSchema,\n\n  // Utility helpers\n  optional,\n  createIdSchema,\n  makeCreateSchema,\n  makeUpdateSchema,\n  withId,\n} as const;\n\nexport default schemas;\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/root.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/admin.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":333,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":333,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9499,9502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9499,9502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | SQLWrapper`.","line":347,"column":39,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":347,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | SQLWrapper`.","line":398,"column":37,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":398,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | SQLWrapper`.","line":399,"column":45,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":399,"endColumn":63}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// External libraries (alphabetical)\nimport { TRPCError } from \"@trpc/server\";\nimport { and, asc, desc, eq, isNull } from \"drizzle-orm\";\nimport { z } from \"zod\";\n\n// Internal validation schemas\nimport { emailSchema, idSchema } from \"~/lib/validation/schemas\";\n\n// Internal types (alphabetical)\nimport type {\n  RoleAssignmentInput,\n  RoleManagementContext,\n  RoleReassignmentInput,\n} from \"~/lib/users/roleManagementValidation\";\n\n// Internal utilities (alphabetical)\nimport { generatePrefixedId } from \"~/lib/utils/id-generation\";\nimport {\n  transformMembershipForValidation,\n  transformMembershipsForValidation,\n  transformRoleForValidation,\n} from \"~/lib/utils/membership-transformers\";\nimport {\n  validateRoleAssignment,\n  validateRoleReassignment,\n  validateUserRemoval,\n} from \"~/lib/users/roleManagementValidation\";\n\n// Server modules (alphabetical)\nimport { createTRPCRouter, organizationProcedure } from \"~/server/api/trpc\";\n\n// Database schema (alphabetical)\nimport { memberships, roles, users } from \"~/server/db/schema\";\nimport { ensureAtLeastOneAdmin } from \"~/server/db/utils\";\n\n// Admin-specific interfaces\ninterface AdminUserResponse {\n  userId: string;\n  email: string;\n  name: string;\n  profilePicture: string | null;\n  emailVerified: Date | null;\n  createdAt: Date;\n  membershipId: string;\n  role: {\n    id: string;\n    name: string;\n    isSystem: boolean;\n  };\n}\n\ninterface AdminInvitationResponse {\n  userId: string;\n  email: string;\n  name: string;\n  createdAt: Date;\n  role: {\n    id: string;\n    name: string;\n  };\n  isInvitation?: boolean;\n}\n\ninterface AdminMembershipResponse {\n  id: string;\n  userId: string;\n  organizationId: string;\n  roleId: string;\n  role: {\n    id: string;\n    name: string;\n    isSystem: boolean;\n  };\n  user: {\n    id: string;\n    name: string | null;\n    email: string;\n  };\n}\n\nexport const adminRouter = createTRPCRouter({\n  /**\n   * Get all organization members with their roles\n   */\n  getUsers: organizationProcedure.query(\n    async ({ ctx }): Promise<AdminUserResponse[]> => {\n      const members = await ctx.db\n        .select({\n          id: memberships.id,\n          userId: memberships.user_id, // alias db user_id -> userId\n          organizationId: memberships.organization_id, // alias db organization_id -> organizationId\n          roleId: memberships.role_id, // alias db role_id -> roleId\n          user: {\n            id: users.id,\n            name: users.name,\n            email: users.email,\n            profilePicture: users.profile_picture, // db profile_picture\n            emailVerified: users.email_verified, // db email_verified\n            createdAt: users.created_at, // db created_at\n          },\n          role: {\n            id: roles.id,\n            name: roles.name,\n            organizationId: roles.organization_id, // db organization_id\n            isSystem: roles.is_system, // db is_system\n            isDefault: roles.is_default, // db is_default\n          },\n        })\n        .from(memberships)\n        .innerJoin(users, eq(memberships.user_id, users.id))\n        .innerJoin(roles, eq(memberships.role_id, roles.id))\n        .where(eq(memberships.organization_id, ctx.organizationId))\n        .orderBy(asc(roles.name), asc(users.name));\n\n      return members.map((member) => ({\n        userId: member.user.id,\n        email: member.user.email ?? \"\",\n        name: member.user.name ?? \"\",\n        profilePicture: member.user.profilePicture,\n        emailVerified: member.user.emailVerified,\n        createdAt: member.user.createdAt,\n        membershipId: member.id,\n        role: {\n          id: member.role.id,\n          name: member.role.name,\n          isSystem: member.role.isSystem,\n        },\n      }));\n    },\n  ),\n\n  /**\n   * Update a user's role assignment\n   */\n  updateUserRole: organizationProcedure\n    .input(\n      z.object({\n        userId: z.string(),\n        roleId: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }): Promise<AdminMembershipResponse> => {\n      // Get the target role and verify it exists in this organization\n      const [role] = await ctx.db\n        .select()\n        .from(roles)\n        .where(\n          and(\n            eq(roles.id, input.roleId),\n            eq(roles.organization_id, ctx.organizationId),\n          ),\n        )\n        .limit(1);\n\n      if (!role) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Role not found\",\n        });\n      }\n\n      // Get the current user membership\n      const membershipResults = await ctx.db\n        .select({\n          id: memberships.id,\n          userId: memberships.user_id,\n          organizationId: memberships.organization_id,\n          roleId: memberships.role_id,\n          user: {\n            id: users.id,\n            name: users.name,\n            email: users.email,\n            profilePicture: users.profile_picture,\n            emailVerified: users.email_verified,\n            createdAt: users.created_at,\n          },\n          role: {\n            id: roles.id,\n            name: roles.name,\n            organizationId: roles.organization_id,\n            isSystem: roles.is_system,\n            isDefault: roles.is_default,\n          },\n        })\n        .from(memberships)\n        .innerJoin(users, eq(memberships.user_id, users.id))\n        .innerJoin(roles, eq(memberships.role_id, roles.id))\n        .where(\n          and(\n            eq(memberships.user_id, input.userId),\n            eq(memberships.organization_id, ctx.organizationId),\n          ),\n        )\n        .limit(1);\n\n      const currentMembership = membershipResults[0];\n\n      if (!currentMembership) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"User is not a member of this organization\",\n        });\n      }\n\n      // Get all memberships for validation\n      const allMemberships = await ctx.db\n        .select({\n          id: memberships.id,\n          userId: memberships.user_id,\n          organizationId: memberships.organization_id,\n          roleId: memberships.role_id,\n          user: {\n            id: users.id,\n            name: users.name,\n            email: users.email,\n            profilePicture: users.profile_picture,\n            emailVerified: users.email_verified,\n            createdAt: users.created_at,\n          },\n          role: {\n            id: roles.id,\n            name: roles.name,\n            organizationId: roles.organization_id,\n            isSystem: roles.is_system,\n            isDefault: roles.is_default,\n          },\n        })\n        .from(memberships)\n        .innerJoin(users, eq(memberships.user_id, users.id))\n        .innerJoin(roles, eq(memberships.role_id, roles.id));\n      // Create validation input\n      const validationInput: RoleAssignmentInput = {\n        userId: input.userId,\n        roleId: input.roleId,\n        organizationId: ctx.organization.id,\n      };\n\n      const context: RoleManagementContext = {\n        organizationId: ctx.organization.id,\n        actorUserId: ctx.user.id,\n        userPermissions: ctx.userPermissions,\n      };\n\n      // Convert Drizzle result to validation interface\n      const validationMembership =\n        transformMembershipForValidation(currentMembership);\n\n      const validationAllMemberships =\n        transformMembershipsForValidation(allMemberships);\n\n      const validationRole = transformRoleForValidation({\n        id: role.id,\n        name: role.name,\n        organizationId: role.organization_id,\n        isSystem: role.is_system,\n        isDefault: role.is_default,\n      });\n\n      // Validate the role assignment using pure functions\n      const validation = validateRoleAssignment(\n        validationInput,\n        validationRole,\n        validationMembership,\n        validationAllMemberships,\n        context,\n      );\n\n      if (!validation.valid) {\n        throw new TRPCError({\n          code: \"PRECONDITION_FAILED\",\n          message: validation.error ?? \"Role assignment validation failed\",\n        });\n      }\n\n      // Update the user's membership\n      await ctx.db\n        .update(memberships)\n        .set({ role_id: input.roleId })\n        .where(eq(memberships.user_id, input.userId));\n\n      // Fetch the updated membership with role and user data\n      const [membership] = await ctx.db\n        .select({\n          id: memberships.id,\n          userId: memberships.user_id,\n          organizationId: memberships.organization_id,\n          roleId: memberships.role_id,\n          role: {\n            id: roles.id,\n            name: roles.name,\n            isSystem: roles.is_system,\n          },\n          user: {\n            id: users.id,\n            name: users.name,\n            email: users.email,\n          },\n        })\n        .from(memberships)\n        .innerJoin(users, eq(memberships.user_id, users.id))\n        .innerJoin(roles, eq(memberships.role_id, roles.id))\n        .where(eq(memberships.user_id, input.userId))\n        .limit(1);\n\n      if (!membership) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Membership not found\",\n        });\n      }\n\n      return {\n        ...membership,\n        user: {\n          ...membership.user,\n          email: membership.user.email ?? \"\",\n        },\n      };\n    }),\n\n  /**\n   * Invite a user to the organization\n   */\n  inviteUser: organizationProcedure\n    .input(\n      z.object({\n        email: emailSchema,\n        roleId: idSchema,\n        name: z.string().optional(),\n      }),\n    )\n    .mutation(async ({ ctx, input }: {\n      ctx: any;\n      input: {\n        email: string;\n        roleId: string;\n        name?: string | undefined;\n      };\n    }): Promise<AdminInvitationResponse> => {\n      // Verify the role exists in this organization\n      const [role] = await ctx.db\n        .select()\n        .from(roles)\n        .where(\n          and(\n            eq(roles.id, input.roleId),\n            eq(roles.organization_id, ctx.organizationId),\n          ),\n        )\n        .limit(1);\n\n      if (!role) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Role not found\",\n        });\n      }\n\n      // Check if user already exists\n      const userResults = await ctx.db\n        .select()\n        .from(users)\n        .where(eq(users.email, input.email))\n        .limit(1);\n\n      let user = userResults[0] ?? null;\n\n      // Create user if they don't exist (pre-creation for invitation)\n      if (!user) {\n        const userData = {\n          id: generatePrefixedId(\"user\"),\n          email: input.email,\n          name: input.name ?? input.email.split(\"@\")[0] ?? \"User\",\n          email_verified: null, // Will be set when they accept invitation\n          profile_picture: null,\n        };\n\n        const insertedUsers = await ctx.db\n          .insert(users)\n          .values(userData)\n          .returning();\n        const insertedUser = insertedUsers[0];\n        if (!insertedUser) {\n          throw new TRPCError({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: \"Failed to create user\",\n          });\n        }\n        user = insertedUser;\n      }\n\n      // Check if membership already exists in this organization\n      const [existingMembership] = await ctx.db\n        .select()\n        .from(memberships)\n        .where(\n          and(\n            eq(memberships.user_id, user.id),\n            eq(memberships.organization_id, ctx.organizationId),\n          ),\n        )\n        .limit(1);\n\n      if (existingMembership) {\n        throw new TRPCError({\n          code: \"CONFLICT\",\n          message: \"User is already a member of this organization\",\n        });\n      }\n\n      // Create membership\n      const membershipData = {\n        id: generatePrefixedId(\"membership\"),\n        user_id: user.id,\n        organization_id: ctx.organization.id,\n        role_id: input.roleId,\n      };\n\n      await ctx.db.insert(memberships).values(membershipData);\n\n      // Fetch the created membership with user and role data\n      const membershipResults = await ctx.db\n        .select({\n          id: memberships.id,\n          userId: memberships.user_id,\n          organizationId: memberships.organization_id,\n          roleId: memberships.role_id,\n          user: {\n            id: users.id,\n            email: users.email,\n            name: users.name,\n            emailVerified: users.email_verified,\n            createdAt: users.created_at,\n          },\n          role: {\n            id: roles.id,\n            name: roles.name,\n          },\n        })\n        .from(memberships)\n        .innerJoin(users, eq(memberships.user_id, users.id))\n        .innerJoin(roles, eq(memberships.role_id, roles.id))\n        .where(eq(memberships.id, membershipData.id))\n        .limit(1);\n\n      const membership = membershipResults[0];\n      if (!membership) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to create membership\",\n        });\n      }\n\n      // TODO: Send invitation email here\n      // For now, we'll just return the membership\n\n      return {\n        userId: membership.user.id,\n        email: membership.user.email ?? \"\",\n        name: membership.user.name ?? \"\",\n        createdAt: membership.user.createdAt,\n        role: membership.role,\n      };\n    }),\n\n  /**\n   * Get pending invitations\n   */\n  getInvitations: organizationProcedure.query(\n    async ({ ctx }): Promise<AdminInvitationResponse[]> => {\n      const invitations = await ctx.db\n        .select({\n          id: memberships.id,\n          userId: memberships.user_id,\n          organizationId: memberships.organization_id,\n          roleId: memberships.role_id,\n          createdAt: users.created_at,\n          user: {\n            id: users.id,\n            email: users.email,\n            name: users.name,\n            createdAt: users.created_at,\n          },\n          role: {\n            id: roles.id,\n            name: roles.name,\n          },\n        })\n        .from(memberships)\n        .innerJoin(users, eq(memberships.user_id, users.id))\n        .innerJoin(roles, eq(memberships.role_id, roles.id))\n        .where(\n          and(\n            isNull(users.email_verified),\n            eq(memberships.organization_id, ctx.organizationId),\n          ),\n        )\n        .orderBy(desc(users.created_at));\n\n      return invitations.map((invitation) => ({\n        userId: invitation.user.id,\n        email: invitation.user.email ?? \"\",\n        name: invitation.user.name ?? \"\",\n        createdAt: invitation.user.createdAt,\n        role: invitation.role,\n      }));\n    },\n  ),\n\n  /**\n   * Remove a user from the organization\n   */\n  removeUser: organizationProcedure\n    .input(\n      z.object({\n        userId: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }): Promise<{ success: boolean }> => {\n      // Get the user membership to remove\n      const [membership] = await ctx.db\n        .select({\n          id: memberships.id,\n          userId: memberships.user_id,\n          organizationId: memberships.organization_id,\n          roleId: memberships.role_id,\n          user: {\n            id: users.id,\n            name: users.name,\n            email: users.email,\n          },\n          role: {\n            id: roles.id,\n            name: roles.name,\n            organizationId: roles.organization_id,\n            isSystem: roles.is_system,\n            isDefault: roles.is_default,\n          },\n        })\n        .from(memberships)\n        .innerJoin(users, eq(memberships.user_id, users.id))\n        .innerJoin(roles, eq(memberships.role_id, roles.id))\n        .where(eq(memberships.user_id, input.userId))\n        .limit(1);\n\n      if (!membership) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"User is not a member of this organization\",\n        });\n      }\n\n      // Get all memberships for validation\n      const allMemberships = await ctx.db\n        .select({\n          id: memberships.id,\n          userId: memberships.user_id,\n          organizationId: memberships.organization_id,\n          roleId: memberships.role_id,\n          user: {\n            id: users.id,\n            name: users.name,\n            email: users.email,\n            profilePicture: users.profile_picture,\n            emailVerified: users.email_verified,\n            createdAt: users.created_at,\n          },\n          role: {\n            id: roles.id,\n            name: roles.name,\n            organizationId: roles.organization_id,\n            isSystem: roles.is_system,\n            isDefault: roles.is_default,\n          },\n        })\n        .from(memberships)\n        .innerJoin(users, eq(memberships.user_id, users.id))\n        .innerJoin(roles, eq(memberships.role_id, roles.id));\n      const context: RoleManagementContext = {\n        organizationId: ctx.organization.id,\n        actorUserId: ctx.user.id,\n        userPermissions: ctx.userPermissions,\n      };\n\n      // Convert database result to validation interface\n      const validationMembership = {\n        id: membership.id,\n        userId: membership.userId,\n        organizationId: membership.organizationId,\n        roleId: membership.roleId,\n        user: {\n          id: membership.user.id,\n          name: membership.user.name,\n          email: membership.user.email ?? \"\",\n        },\n        role: {\n          id: membership.role.id,\n          name: membership.role.name,\n          organizationId: membership.role.organizationId,\n          isSystem: membership.role.isSystem,\n          isDefault: membership.role.isDefault,\n        },\n      };\n\n      const validationAllMemberships =\n        transformMembershipsForValidation(allMemberships);\n\n      // Validate user removal using pure functions\n      const validation = validateUserRemoval(\n        validationMembership,\n        validationAllMemberships,\n        context,\n      );\n\n      if (!validation.valid) {\n        throw new TRPCError({\n          code: \"PRECONDITION_FAILED\",\n          message: validation.error ?? \"User removal validation failed\",\n        });\n      }\n\n      // Remove the membership\n      await ctx.db\n        .delete(memberships)\n        .where(eq(memberships.user_id, input.userId));\n\n      return { success: true };\n    }),\n\n  /**\n   * Delete a role with member reassignment\n   */\n  deleteRoleWithReassignment: organizationProcedure\n    .input(\n      z.object({\n        roleId: z.string(),\n        reassignRoleId: z.string().optional(),\n      }),\n    )\n    .mutation(async ({ ctx, input }): Promise<{ success: boolean }> => {\n      // Get the role to delete\n      const [role] = await ctx.db\n        .select()\n        .from(roles)\n        .where(eq(roles.id, input.roleId))\n        .limit(1);\n\n      if (!role) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Role not found\",\n        });\n      }\n\n      // Get memberships associated with the role\n      const roleMemberships = await ctx.db\n        .select({\n          id: memberships.id,\n          userId: memberships.user_id,\n          organizationId: memberships.organization_id,\n          roleId: memberships.role_id,\n          user: {\n            id: users.id,\n            name: users.name,\n            email: users.email,\n          },\n          role: {\n            id: roles.id,\n            name: roles.name,\n            organizationId: roles.organization_id,\n            isSystem: roles.is_system,\n            isDefault: roles.is_default,\n          },\n        })\n        .from(memberships)\n        .innerJoin(users, eq(memberships.user_id, users.id))\n        .innerJoin(roles, eq(memberships.role_id, roles.id))\n        .where(eq(memberships.role_id, input.roleId));\n\n      // Construct the role object with memberships to match the original structure\n      const roleWithMemberships = {\n        ...role,\n        memberships: roleMemberships,\n      };\n\n      // Get reassignment role if specified\n      let reassignRole = null;\n      if (input.reassignRoleId) {\n        [reassignRole] = await ctx.db\n          .select()\n          .from(roles)\n          .where(eq(roles.id, input.reassignRoleId))\n          .limit(1);\n\n        if (!reassignRole) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Reassignment role not found\",\n          });\n        }\n      }\n\n      const context: RoleManagementContext = {\n        organizationId: ctx.organization.id,\n        actorUserId: ctx.user.id,\n        userPermissions: ctx.userPermissions,\n      };\n\n      // Create validation input\n      const validationInput: RoleReassignmentInput = {\n        roleId: input.roleId,\n        organizationId: ctx.organization.id,\n        ...(input.reassignRoleId && { reassignRoleId: input.reassignRoleId }),\n      };\n\n      // Convert role to validation interface\n      const validationRoleToDelete = {\n        id: role.id,\n        name: role.name,\n        organizationId: role.organization_id,\n        isSystem: role.is_system,\n        isDefault: role.is_default,\n      };\n\n      const validationReassignRole = reassignRole\n        ? {\n            id: reassignRole.id,\n            name: reassignRole.name,\n            organizationId: reassignRole.organization_id,\n            isSystem: reassignRole.is_system,\n            isDefault: reassignRole.is_default,\n          }\n        : null;\n\n      // Convert memberships to validation interface\n      const validationMemberships = roleWithMemberships.memberships.map(\n        (m) => ({\n          id: m.id,\n          userId: m.userId, // already aliased in select\n          organizationId: m.organizationId,\n          roleId: m.roleId,\n          user: {\n            id: m.user.id,\n            name: m.user.name,\n            email: m.user.email ?? \"\",\n          },\n          role: {\n            id: m.role.id,\n            name: m.role.name,\n            organizationId: m.role.organizationId,\n            isSystem: m.role.isSystem,\n            isDefault: m.role.isDefault,\n          },\n        }),\n      );\n\n      // Validate role reassignment using pure functions\n      const validation = validateRoleReassignment(\n        validationInput,\n        validationRoleToDelete,\n        validationReassignRole,\n        validationMemberships,\n        context,\n      );\n\n      if (!validation.valid) {\n        throw new TRPCError({\n          code: validation.error?.includes(\"System roles\")\n            ? \"FORBIDDEN\"\n            : \"PRECONDITION_FAILED\",\n          message: validation.error ?? \"Role reassignment validation failed\",\n        });\n      }\n\n      // If there are members, reassign them to the new role\n      if (roleWithMemberships.memberships.length > 0 && input.reassignRoleId) {\n        await ctx.db\n          .update(memberships)\n          .set({ role_id: input.reassignRoleId })\n          .where(eq(memberships.role_id, input.roleId));\n      }\n\n      // Delete the role\n      await ctx.db.delete(roles).where(eq(roles.id, input.roleId));\n      // roles table already uses snake_case for organization_id etc; no change needed here besides prior updates\n\n      // Ensure we still have at least one admin after reassignment\n      await ensureAtLeastOneAdmin(ctx.db, ctx.organization.id);\n\n      return { success: true };\n    }),\n\n  /**\n   * Cancel a user invitation\n   */\n  cancelInvitation: organizationProcedure\n    .input(\n      z.object({\n        userId: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }): Promise<{ success: boolean }> => {\n      // Find the invitation (user with null emailVerified in this organization)\n      const [invitation] = await ctx.db\n        .select()\n        .from(memberships)\n        .innerJoin(users, eq(memberships.user_id, users.id))\n        .where(\n          and(\n            eq(memberships.user_id, input.userId),\n            eq(memberships.organization_id, ctx.organizationId),\n            isNull(users.email_verified),\n          ),\n        )\n        .limit(1);\n\n      if (!invitation) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Invitation not found\",\n        });\n      }\n\n      // Delete the membership\n      await ctx.db\n        .delete(memberships)\n        .where(\n          and(\n            eq(memberships.user_id, input.userId),\n            eq(memberships.organization_id, ctx.organizationId),\n          ),\n        );\n\n      // Delete the user if they have no other memberships\n      const [remainingMembership] = await ctx.db\n        .select()\n        .from(memberships)\n        .where(eq(memberships.user_id, input.userId))\n        .limit(1);\n\n      if (!remainingMembership) {\n        await ctx.db.delete(users).where(eq(users.id, input.userId));\n      }\n\n      return { success: true };\n    }),\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/collection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/comment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/issue.admin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/issue.attachment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/issue.comment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/issue.core.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1727,1730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1727,1730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | SQLWrapper`.","line":90,"column":45,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":90,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | SQLWrapper`.","line":97,"column":42,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":97,"endColumn":60}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// External libraries (alphabetical)\nimport { TRPCError } from \"@trpc/server\";\nimport { eq, inArray, sql, isNull, and } from \"drizzle-orm\";\nimport { z } from \"zod\";\n\n// Internal types (alphabetical)\nimport type {\n  IssueAssignmentInput,\n  IssueCreationInput,\n  AssignmentValidationContext,\n} from \"~/lib/issues/assignmentValidation\";\nimport type {\n  IssueWithRelationsResponse,\n  IssueResponse,\n  IssueStatus,\n} from \"~/lib/types/api\";\n\n// Internal utilities (alphabetical)\nimport {\n  validateIssueAssignment,\n  validateIssueCreation,\n} from \"~/lib/issues/assignmentValidation\";\nimport {\n  validateStatusTransition,\n  getStatusChangeEffects,\n} from \"~/lib/issues/statusValidation\";\nimport {\n  transformKeysToCamelCase,\n  transformKeysToSnakeCase,\n} from \"~/lib/utils/case-transformers\";\nimport { generatePrefixedId } from \"~/lib/utils/id-generation\";\n\n// Server modules (alphabetical)\nimport {\n  issueCreateSchema,\n  issueUpdateSchema,\n  issueFilterSchema,\n  issueAssignSchema,\n  issueStatusUpdateSchema,\n  publicIssueCreateSchema,\n} from \"~/server/api/schemas/issue.schema\";\nimport {\n  createTRPCRouter,\n  anonOrgScopedProcedure,\n  orgScopedProcedure,\n  issueEditProcedure,\n} from \"~/server/api/trpc\";\nimport {\n  issueCreateProcedure,\n  issueAssignProcedure,\n  issueViewProcedure,\n} from \"~/server/api/trpc.permission\";\n\n// Database schema (alphabetical)\nimport {\n  attachments,\n  comments,\n  issues,\n  issueStatuses,\n  machines,\n  memberships,\n  priorities,\n} from \"~/server/db/schema\";\n\nexport const issueCoreRouter = createTRPCRouter({\n  // Public issue creation for anonymous users (via QR codes)\n  publicCreate: anonOrgScopedProcedure\n    .input(publicIssueCreateSchema)\n    .mutation(async ({ ctx, input }: {\n      ctx: any;\n      input: {\n        title: string;\n        description?: string | undefined;\n        machineId: string;\n        submitterName?: string | undefined;\n        reporterEmail: string;\n      };\n    }): Promise<IssueWithRelationsResponse> => {\n      // Get machine, status, and priority for validation (RLS handles org scoping)\n      const machine = await ctx.db.query.machines.findFirst({\n        where: eq(machines.id, input.machineId),\n        with: {\n          location: true,\n        },\n      });\n\n      const defaultStatus = await ctx.db.query.issueStatuses.findFirst({\n        where: and(\n          eq(issueStatuses.is_default, true),\n          eq(issueStatuses.organization_id, ctx.organizationId),\n        ),\n      });\n\n      const defaultPriority = await ctx.db.query.priorities.findFirst({\n        where: and(\n          eq(priorities.is_default, true),\n          eq(priorities.organization_id, ctx.organizationId),\n        ),\n      });\n\n      // Create validation input (handle exactOptionalPropertyTypes)\n      const baseValidationInput = {\n        title: input.title,\n        machineId: input.machineId,\n        organizationId: ctx.organizationId,\n      };\n\n      const validationInput: IssueCreationInput = {\n        ...baseValidationInput,\n        ...(input.description && { description: input.description }),\n        ...(input.reporterEmail && { reporterEmail: input.reporterEmail }),\n        ...(input.submitterName && { submitterName: input.submitterName }),\n      };\n\n      const context: AssignmentValidationContext = {\n        organizationId: ctx.organizationId,\n        actorUserId: \"anonymous\", // Anonymous user\n        userPermissions: [\"issue:create\"], // Anonymous creation allowed\n      };\n\n      // Transform machine data to camelCase for validation\n      const transformedMachine = machine\n        ? {\n            id: machine.id,\n            name: machine.name,\n            location: {\n              organizationId: machine.location.organization_id,\n            },\n          }\n        : null;\n\n      // Transform defaultStatus to camelCase for validation\n      const transformedDefaultStatus = defaultStatus\n        ? {\n            id: defaultStatus.id,\n            name: defaultStatus.name,\n            organizationId: defaultStatus.organization_id,\n            isDefault: defaultStatus.is_default,\n            category: defaultStatus.category,\n          }\n        : null;\n\n      // Transform defaultPriority to camelCase for validation\n      const transformedDefaultPriority = defaultPriority\n        ? {\n            id: defaultPriority.id,\n            name: defaultPriority.name,\n            organizationId: defaultPriority.organization_id,\n            isDefault: defaultPriority.is_default,\n          }\n        : null;\n\n      // Validate issue creation using pure functions\n      const validation = validateIssueCreation(\n        validationInput,\n        transformedMachine,\n        transformedDefaultStatus,\n        transformedDefaultPriority,\n        context,\n      );\n\n      if (!validation.valid) {\n        throw new TRPCError({\n          code: \"PRECONDITION_FAILED\",\n          message: validation.error ?? \"Issue creation validation failed\",\n        });\n      }\n\n      // Validation passed, so defaultStatus and defaultPriority are guaranteed to be non-null\n      if (!defaultStatus) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Default status validation failed\",\n        });\n      }\n      if (!defaultPriority) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Default priority validation failed\",\n        });\n      }\n\n      // Create the issue without a user (anonymous)\n      const issueData: {\n        id: string;\n        title: string;\n        description?: string | null;\n        reporterEmail?: string | null;\n        submitterName?: string | null;\n        createdById?: string | null;\n        organizationId: string;\n        machineId: string;\n        statusId: string;\n        priorityId: string;\n      } = {\n        id: generatePrefixedId(\"issue\"),\n        title: input.title,\n        createdById: null, // Anonymous issue\n        organizationId: ctx.organizationId,\n        machineId: input.machineId,\n        statusId: defaultStatus.id,\n        priorityId: defaultPriority.id,\n      };\n\n      if (input.description) {\n        issueData.description = input.description;\n      }\n\n      if (input.submitterName) {\n        issueData.submitterName = input.submitterName;\n      }\n\n      if (input.reporterEmail) {\n        issueData.reporterEmail = input.reporterEmail;\n      }\n\n      await ctx.db\n        .insert(issues)\n        .values(\n          transformKeysToSnakeCase(issueData) as typeof issues.$inferInsert,\n        );\n\n      // Get issue with relations for return\n      const issueWithRelations = await ctx.db.query.issues.findFirst({\n        where: eq(issues.id, issueData.id),\n        with: {\n          status: true,\n          createdBy: {\n            columns: {\n              id: true,\n              name: true,\n              email: true,\n              image: true,\n            },\n          },\n          machine: {\n            with: {\n              model: true,\n              location: true,\n            },\n          },\n        },\n      });\n\n      if (!issueWithRelations) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to create issue\",\n        });\n      }\n\n      // Note: Skip activity recording for anonymous issues\n      // Activity service requires actorId, which we don't have for anonymous users\n\n      // Send notifications for new issue\n      const notificationService = ctx.services.createNotificationService();\n      await notificationService.notifyMachineOwnerOfIssue(\n        issueData.id,\n        input.machineId,\n      );\n\n      // Create properly mapped issue with comments having createdBy alias\n      const mappedIssue = {\n        ...issueWithRelations,\n        comments: [], // Issues without comment relations loaded\n        attachments: [], // Issues without attachment relations loaded\n      };\n\n      return transformKeysToCamelCase(\n        mappedIssue,\n      ) as IssueWithRelationsResponse;\n    }),\n  // Create issue - requires issue:create permission\n  create: issueCreateProcedure\n    .input(issueCreateSchema)\n    .mutation(async ({ ctx, input }): Promise<IssueWithRelationsResponse> => {\n      // Organization is guaranteed by organizationProcedure middleware\n\n      // Get machine, status, and priority for validation (RLS handles org scoping)\n      const machine = await ctx.db.query.machines.findFirst({\n        where: eq(machines.id, input.machineId),\n        with: {\n          location: true,\n        },\n      });\n\n      const defaultStatus = await ctx.db.query.issueStatuses.findFirst({\n        where: and(\n          eq(issueStatuses.is_default, true),\n          eq(issueStatuses.organization_id, ctx.organizationId),\n        ),\n      });\n\n      const defaultPriority = await ctx.db.query.priorities.findFirst({\n        where: and(\n          eq(priorities.is_default, true),\n          eq(priorities.organization_id, ctx.organizationId),\n        ),\n      });\n\n      // Create validation input (handle exactOptionalPropertyTypes)\n      const baseValidationInput = {\n        title: input.title,\n        machineId: input.machineId,\n        organizationId: ctx.organizationId,\n        createdById: ctx.user.id,\n      };\n\n      const validationInput: IssueCreationInput = {\n        ...baseValidationInput,\n        ...(input.description && { description: input.description }),\n      };\n\n      const context: AssignmentValidationContext = {\n        organizationId: ctx.organizationId,\n        actorUserId: ctx.user.id,\n        userPermissions: ctx.userPermissions,\n      };\n\n      // Transform machine data to camelCase for validation\n      const transformedMachine = machine\n        ? {\n            id: machine.id,\n            name: machine.name,\n            location: {\n              organizationId: machine.location.organization_id,\n            },\n          }\n        : null;\n\n      // Transform defaultStatus to camelCase for validation\n      const transformedDefaultStatus = defaultStatus\n        ? {\n            id: defaultStatus.id,\n            name: defaultStatus.name,\n            organizationId: defaultStatus.organization_id,\n            isDefault: defaultStatus.is_default,\n            category: defaultStatus.category,\n          }\n        : null;\n\n      // Transform defaultPriority to camelCase for validation\n      const transformedDefaultPriority = defaultPriority\n        ? {\n            id: defaultPriority.id,\n            name: defaultPriority.name,\n            organizationId: defaultPriority.organization_id,\n            isDefault: defaultPriority.is_default,\n          }\n        : null;\n\n      // Validate issue creation using pure functions\n      const validation = validateIssueCreation(\n        validationInput,\n        transformedMachine,\n        transformedDefaultStatus,\n        transformedDefaultPriority,\n        context,\n      );\n\n      if (!validation.valid) {\n        throw new TRPCError({\n          code: \"PRECONDITION_FAILED\",\n          message: validation.error ?? \"Issue creation validation failed\",\n        });\n      }\n\n      // Validation passed, so defaultStatus and defaultPriority are guaranteed to be non-null\n      if (!defaultStatus) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Default status validation failed\",\n        });\n      }\n      if (!defaultPriority) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Default priority validation failed\",\n        });\n      }\n\n      // User is guaranteed to exist in protected procedure\n      const createdById = ctx.user.id;\n\n      // Create the issue\n      const issueData: {\n        id: string;\n        title: string;\n        description?: string | null;\n        createdById: string;\n        organizationId: string;\n        machineId: string;\n        statusId: string;\n        priorityId: string;\n      } = {\n        id: generatePrefixedId(\"issue\"),\n        title: input.title,\n        createdById,\n        organizationId: ctx.organizationId,\n        machineId: input.machineId,\n        statusId: defaultStatus.id,\n        priorityId: defaultPriority.id,\n      };\n\n      if (input.description) {\n        issueData.description = input.description;\n      }\n\n      await ctx.db\n        .insert(issues)\n        .values(\n          transformKeysToSnakeCase(issueData) as typeof issues.$inferInsert,\n        );\n\n      // Get issue with relations for return\n      const issueWithRelations = await ctx.db.query.issues.findFirst({\n        where: eq(issues.id, issueData.id),\n        with: {\n          status: true,\n          createdBy: {\n            columns: {\n              id: true,\n              name: true,\n              email: true,\n              image: true,\n            },\n          },\n          machine: {\n            with: {\n              model: true,\n              location: true,\n            },\n          },\n        },\n      });\n\n      if (!issueWithRelations) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to create issue\",\n        });\n      }\n\n      // Record the issue creation activity\n      const activityService = ctx.services.createIssueActivityService();\n      await activityService.recordIssueCreated(issueData.id, createdById);\n\n      // Send notifications for new issue\n      const notificationService = ctx.services.createNotificationService();\n      await notificationService.notifyMachineOwnerOfIssue(\n        issueData.id,\n        input.machineId,\n      );\n\n      // Create properly mapped issue with comments having createdBy alias\n      const mappedIssue = {\n        ...issueWithRelations,\n        comments: [], // Issues without comment relations loaded\n        attachments: [], // Issues without attachment relations loaded\n      };\n\n      return transformKeysToCamelCase(\n        mappedIssue,\n      ) as IssueWithRelationsResponse;\n    }),\n\n  // Assign issue to a user - requires issue:assign permission\n  assign: issueAssignProcedure\n    .input(issueAssignSchema)\n    .mutation(\n      async ({\n        ctx,\n        input,\n      }): Promise<{ success: boolean; issue: IssueResponse }> => {\n        // Get issue and membership for validation (organization scoped)\n        const issue = await ctx.db.query.issues.findFirst({\n          where: and(\n            eq(issues.id, input.issueId),\n            eq(issues.organization_id, ctx.organizationId),\n          ),\n        });\n\n        const membership = await ctx.db.query.memberships.findFirst({\n          where: eq(memberships.user_id, input.userId),\n          with: { user: true },\n        });\n\n        // Create validation input\n        const validationInput: IssueAssignmentInput = {\n          issueId: input.issueId,\n          userId: input.userId,\n          organizationId: ctx.organizationId,\n        };\n\n        const context: AssignmentValidationContext = {\n          organizationId: ctx.organizationId,\n          actorUserId: ctx.user.id,\n          userPermissions: ctx.userPermissions,\n        };\n\n        // Convert membership to validation format\n        const validationMembership = membership\n          ? {\n              id: membership.id,\n              userId: membership.user_id,\n              organizationId: membership.organization_id,\n              roleId: membership.role_id,\n              user: {\n                id: membership.user.id,\n                name: membership.user.name,\n                email: membership.user.email ?? \"\",\n              },\n            }\n          : null;\n\n        // Transform issue data to camelCase for validation\n        const transformedIssue = issue\n          ? {\n              id: issue.id,\n              title: issue.title,\n              organizationId: issue.organization_id,\n              machineId: issue.machine_id,\n              assignedToId: issue.assigned_to_id,\n              statusId: issue.status_id,\n              createdById: issue.created_by_id,\n            }\n          : null;\n\n        // Validate issue assignment using pure functions\n        const validation = validateIssueAssignment(\n          validationInput,\n          transformedIssue,\n          validationMembership,\n          context,\n        );\n\n        if (!validation.valid) {\n          throw new Error(\n            validation.error ?? \"Issue assignment validation failed\",\n          );\n        }\n\n        // Update the issue assignment\n        await ctx.db\n          .update(issues)\n          .set({ assigned_to_id: input.userId })\n          .where(eq(issues.id, input.issueId));\n\n        // Get updated issue with relations\n        const updatedIssue = await ctx.db.query.issues.findFirst({\n          where: eq(issues.id, input.issueId),\n          with: {\n            assignedTo: {\n              columns: {\n                id: true,\n                name: true,\n                email: true,\n              },\n            },\n            status: true,\n            createdBy: {\n              columns: {\n                id: true,\n                name: true,\n              },\n            },\n            machine: {\n              with: {\n                model: true,\n                location: true,\n              },\n            },\n          },\n        });\n\n        if (!updatedIssue) {\n          throw new TRPCError({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: \"Failed to update issue\",\n          });\n        }\n\n        // Record the assignment activity\n        const activityService = ctx.services.createIssueActivityService();\n        await activityService.recordIssueAssigned(\n          input.issueId,\n          ctx.user.id,\n          input.userId,\n        );\n\n        return {\n          success: true,\n          issue: transformKeysToCamelCase(updatedIssue) as IssueResponse,\n        };\n      },\n    ),\n\n  // Get all issues for an organization\n  getAll: orgScopedProcedure\n    .input(issueFilterSchema.optional())\n    .query(async ({ ctx, input }): Promise<IssueWithRelationsResponse[]> => {\n      // Build where conditions dynamically (RLS handles org scoping)\n      const conditions = [];\n\n      // Machine ID filter\n      if (input?.machineId) {\n        conditions.push(eq(issues.machine_id, input.machineId));\n      }\n\n      // Status filtering - support both single statusId and statusIds array\n      if (input?.statusIds && input.statusIds.length > 0) {\n        conditions.push(inArray(issues.status_id, input.statusIds));\n      } else if (input?.statusId) {\n        conditions.push(eq(issues.status_id, input.statusId));\n      }\n\n      // Assignee filter\n      if (input?.assigneeId) {\n        if (input.assigneeId === \"unassigned\") {\n          conditions.push(isNull(issues.assigned_to_id));\n        } else {\n          conditions.push(eq(issues.assigned_to_id, input.assigneeId));\n        }\n      }\n\n      // Reporter filter\n      if (input?.reporterId) {\n        conditions.push(eq(issues.created_by_id, input.reporterId));\n      }\n\n      // For complex filters involving relations, we'll need to use the subquery or joins\n      const baseQuery = ctx.db.query.issues.findMany({\n        where: and(...conditions),\n        with: {\n          status: true,\n          priority: true,\n          assignedTo: {\n            columns: {\n              id: true,\n              name: true,\n              email: true,\n              image: true,\n            },\n          },\n          createdBy: {\n            columns: {\n              id: true,\n              name: true,\n              email: true,\n              image: true,\n            },\n          },\n          machine: {\n            with: {\n              model: true,\n              location: true,\n              owner: {\n                columns: {\n                  id: true,\n                  name: true,\n                },\n              },\n            },\n          },\n        },\n      });\n\n      let results = await baseQuery;\n\n      // Apply post-query filters for complex relations\n      if (input?.locationId) {\n        results = results.filter(\n          (issue) => issue.machine.location.id === input.locationId,\n        );\n      }\n\n      if (input?.modelId) {\n        results = results.filter(\n          (issue) => issue.machine.model.id === input.modelId,\n        );\n      }\n\n      if (input?.ownerId) {\n        results = results.filter(\n          (issue) => issue.machine.owner?.id === input.ownerId,\n        );\n      }\n\n      if (input?.statusCategory) {\n        results = results.filter(\n          (issue) => issue.status.category === input.statusCategory,\n        );\n      }\n\n      // Handle search across title and description\n      if (input?.search?.trim()) {\n        const searchTerm = input.search.trim().toLowerCase();\n        results = results.filter(\n          (issue) =>\n            issue.title.toLowerCase().includes(searchTerm) ||\n            issue.description?.toLowerCase().includes(searchTerm),\n        );\n      }\n\n      // Get comment and attachment counts using separate queries\n      const issueIds = results.map((issue) => issue.id);\n\n      const commentCounts =\n        issueIds.length > 0\n          ? await ctx.db\n              .select({\n                issueId: comments.issue_id,\n                count: sql<number>`count(*)`.as(\"count\"),\n              })\n              .from(comments)\n              .where(inArray(comments.issue_id, issueIds))\n              .groupBy(comments.issue_id)\n          : [];\n\n      const attachmentCounts =\n        issueIds.length > 0\n          ? await ctx.db\n              .select({\n                issueId: attachments.issue_id,\n                count: sql<number>`count(*)`.as(\"count\"),\n              })\n              .from(attachments)\n              .where(inArray(attachments.issue_id, issueIds))\n              .groupBy(attachments.issue_id)\n          : [];\n\n      // Map counts to issues\n      const commentCountMap = new Map(\n        commentCounts.map((c) => [c.issueId, c.count]),\n      );\n      const attachmentCountMap = new Map(\n        attachmentCounts.map((a) => [a.issueId, a.count]),\n      );\n\n      const resultsWithCounts = results.map((issue) => ({\n        ...issue,\n        _count: {\n          comments: commentCountMap.get(issue.id) ?? 0,\n          attachments: attachmentCountMap.get(issue.id) ?? 0,\n        },\n      }));\n\n      // Apply sorting\n      const sortBy = input?.sortBy ?? \"created\";\n      const sortOrder = input?.sortOrder ?? \"desc\";\n\n      resultsWithCounts.sort((a, b) => {\n        let aValue: string | number | Date;\n        let bValue: string | number | Date;\n\n        switch (sortBy) {\n          case \"created\":\n            aValue = a.created_at;\n            bValue = b.created_at;\n            break;\n          case \"updated\":\n            aValue = a.updated_at;\n            bValue = b.updated_at;\n            break;\n          case \"status\":\n            aValue = a.status.name;\n            bValue = b.status.name;\n            break;\n          case \"severity\":\n            aValue = a.priority.order;\n            bValue = b.priority.order;\n            break;\n          case \"machine\":\n            aValue = a.machine.model.name;\n            bValue = b.machine.model.name;\n            break;\n          default:\n            aValue = a.created_at;\n            bValue = b.created_at;\n        }\n\n        if (sortOrder === \"desc\") {\n          return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\n        } else {\n          return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n        }\n      });\n\n      return transformKeysToCamelCase(\n        resultsWithCounts,\n      ) as IssueWithRelationsResponse[];\n    }),\n\n  // Get a single issue by ID\n  getById: issueViewProcedure\n    .input(z.object({ id: z.string() }))\n    .query(async ({ ctx, input }): Promise<IssueWithRelationsResponse> => {\n      const issue = await ctx.db.query.issues.findFirst({\n        where: and(\n          eq(issues.id, input.id),\n          eq(issues.organization_id, ctx.organizationId),\n        ),\n        with: {\n          status: true,\n          priority: true,\n          assignedTo: {\n            columns: {\n              id: true,\n              name: true,\n              email: true,\n              image: true,\n            },\n          },\n          createdBy: {\n            columns: {\n              id: true,\n              name: true,\n              email: true,\n              image: true,\n            },\n          },\n          machine: {\n            with: {\n              model: true,\n              location: true,\n            },\n          },\n          comments: {\n            with: {\n              author: {\n                columns: {\n                  id: true,\n                  name: true,\n                  image: true,\n                },\n              },\n            },\n            orderBy: (comments, { asc }) => [asc(comments.created_at)],\n          },\n          attachments: {\n            orderBy: (attachments, { asc }) => [asc(attachments.id)],\n          },\n        },\n      });\n\n      if (!issue) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Issue not found\",\n        });\n      }\n\n      // Map comments to include createdBy alias\n      const mappedIssue = {\n        ...issue,\n        comments: issue.comments.map((comment) => ({\n          ...comment,\n          createdBy: comment.author, // Add createdBy as alias for author\n        })),\n      };\n\n      return transformKeysToCamelCase(\n        mappedIssue,\n      ) as IssueWithRelationsResponse;\n    }),\n\n  // Update issue (for members/admins)\n  update: issueEditProcedure\n    .input(issueUpdateSchema)\n    .mutation(async ({ ctx, input }): Promise<IssueWithRelationsResponse> => {\n      // Verify the issue exists (organization scoped)\n      const existingIssue = await ctx.db.query.issues.findFirst({\n        where: and(\n          eq(issues.id, input.id),\n          eq(issues.organization_id, ctx.organizationId),\n        ),\n        with: {\n          status: true,\n          assignedTo: true,\n        },\n      });\n\n      if (!existingIssue) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Issue not found\",\n        });\n      }\n\n      const activityService = ctx.services.createIssueActivityService();\n      const notificationService = ctx.services.createNotificationService();\n      const userId = ctx.user.id;\n\n      // Prepare data for tracking changes\n      let newStatus = existingIssue.status;\n      let newAssignedTo = existingIssue.assignedTo;\n\n      // If updating status, verify it exists (RLS handles org scoping)\n      if (input.statusId) {\n        const status = await ctx.db.query.issueStatuses.findFirst({\n          where: eq(issueStatuses.id, input.statusId),\n        });\n        if (!status) {\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid status\",\n          });\n        }\n        newStatus = status;\n      }\n\n      // If updating assignee, verify they are a member (RLS handles org scoping)\n      if (input.assignedToId !== undefined) {\n        if (input.assignedToId) {\n          const membership = await ctx.db.query.memberships.findFirst({\n            where: eq(memberships.user_id, input.assignedToId),\n            with: {\n              user: true,\n            },\n          });\n          if (!membership) {\n            throw new TRPCError({\n              code: \"BAD_REQUEST\",\n              message: \"User is not a member of this organization\",\n            });\n          }\n          newAssignedTo = membership.user;\n        } else {\n          newAssignedTo = null;\n        }\n      }\n\n      // Update the issue\n      const updateData: Partial<typeof issues.$inferInsert> = {};\n      if (input.title) updateData.title = input.title;\n      if (input.description !== undefined)\n        updateData.description = input.description;\n      if (input.statusId) updateData.status_id = input.statusId;\n      if (input.assignedToId !== undefined)\n        updateData.assigned_to_id = input.assignedToId ?? null;\n\n      await ctx.db\n        .update(issues)\n        .set(updateData)\n        .where(\n          and(\n            eq(issues.id, input.id),\n            eq(issues.organization_id, ctx.organizationId),\n          ),\n        );\n\n      // Get updated issue with relations\n      const updatedIssue = await ctx.db.query.issues.findFirst({\n        where: and(\n          eq(issues.id, input.id),\n          eq(issues.organization_id, ctx.organizationId),\n        ),\n        with: {\n          status: true,\n          assignedTo: {\n            columns: {\n              id: true,\n              name: true,\n              email: true,\n              image: true,\n            },\n          },\n          createdBy: {\n            columns: {\n              id: true,\n              name: true,\n              email: true,\n              image: true,\n            },\n          },\n          machine: {\n            with: {\n              model: true,\n              location: true,\n            },\n          },\n        },\n      });\n\n      if (!updatedIssue) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to update issue\",\n        });\n      }\n\n      // Record activities for changes\n      if (input.statusId && existingIssue.status.id !== input.statusId) {\n        await activityService.recordStatusChange(\n          input.id,\n          userId,\n          existingIssue.status,\n          newStatus,\n        );\n\n        // Send status change notifications\n        await notificationService.notifyMachineOwnerOfStatusChange(\n          input.id,\n          existingIssue.status.name,\n          newStatus.name,\n        );\n      }\n\n      if (\n        input.assignedToId !== undefined &&\n        existingIssue.assigned_to_id !== input.assignedToId\n      ) {\n        await activityService.recordAssignmentChange(\n          input.id,\n          userId,\n          existingIssue.assignedTo,\n          newAssignedTo,\n        );\n\n        // Send assignment notifications\n        if (newAssignedTo) {\n          await notificationService.notifyUserOfAssignment(\n            input.id,\n            newAssignedTo.id,\n          );\n        }\n      }\n\n      if (input.title && existingIssue.title !== input.title) {\n        await activityService.recordFieldUpdate(\n          input.id,\n          userId,\n          \"title\",\n          existingIssue.title,\n          input.title,\n        );\n      }\n\n      if (\n        input.description !== undefined &&\n        existingIssue.description !== input.description\n      ) {\n        await activityService.recordFieldUpdate(\n          input.id,\n          userId,\n          \"description\",\n          existingIssue.description ?? \"\",\n          input.description ?? \"\",\n        );\n      }\n\n      return transformKeysToCamelCase(\n        updatedIssue,\n      ) as IssueWithRelationsResponse;\n    }),\n\n  // Close an issue (set status to resolved)\n  close: issueEditProcedure\n    .input(z.object({ id: z.string() }))\n    .mutation(async ({ ctx, input }): Promise<IssueWithRelationsResponse> => {\n      // Find the resolved status (RLS handles org scoping)\n      const resolvedStatus = await ctx.db.query.issueStatuses.findFirst({\n        where: eq(issueStatuses.category, \"RESOLVED\"),\n      });\n\n      if (!resolvedStatus) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"No resolved status found for this organization\",\n        });\n      }\n\n      // Update the issue\n      await ctx.db\n        .update(issues)\n        .set({\n          status_id: resolvedStatus.id,\n          resolved_at: new Date(),\n        })\n        .where(\n          and(\n            eq(issues.id, input.id),\n            eq(issues.organization_id, ctx.organizationId),\n          ),\n        );\n\n      // Get updated issue with relations\n      const updatedIssue = await ctx.db.query.issues.findFirst({\n        where: eq(issues.id, input.id),\n        with: {\n          status: true,\n          priority: true,\n          assignedTo: {\n            columns: {\n              id: true,\n              name: true,\n              email: true,\n              image: true,\n            },\n          },\n          createdBy: {\n            columns: {\n              id: true,\n              name: true,\n              email: true,\n              image: true,\n            },\n          },\n          machine: {\n            with: {\n              model: true,\n              location: true,\n            },\n          },\n        },\n      });\n\n      if (!updatedIssue) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to close issue\",\n        });\n      }\n\n      // Record activity\n      const activityService = ctx.services.createIssueActivityService();\n      await activityService.recordIssueResolved(input.id, ctx.user.id);\n\n      return transformKeysToCamelCase(\n        updatedIssue,\n      ) as IssueWithRelationsResponse;\n    }),\n\n  // Update issue status\n  updateStatus: issueEditProcedure\n    .input(issueStatusUpdateSchema)\n    .mutation(async ({ ctx, input }): Promise<IssueWithRelationsResponse> => {\n      // Verify the issue exists (organization scoped)\n      const existingIssue = await ctx.db.query.issues.findFirst({\n        where: and(\n          eq(issues.id, input.id),\n          eq(issues.organization_id, ctx.organizationId),\n        ),\n        with: {\n          status: true,\n        },\n      });\n\n      if (!existingIssue) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Issue not found\",\n        });\n      }\n\n      // Verify the status exists (RLS handles org scoping)\n      const newStatus = await ctx.db.query.issueStatuses.findFirst({\n        where: eq(issueStatuses.id, input.statusId),\n      });\n\n      if (!newStatus) {\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Invalid status\",\n        });\n      }\n\n      // Use extracted validation functions\n      // Since this is using issueEditProcedure, user has issue:edit permission\n      const userPermissions = [\"issue:edit\"] as const;\n      const validationResult = validateStatusTransition(\n        {\n          currentStatus: transformKeysToCamelCase(\n            existingIssue.status,\n          ) as IssueStatus,\n          newStatusId: input.statusId,\n          organizationId: ctx.organizationId,\n        },\n        transformKeysToCamelCase(newStatus) as IssueStatus,\n        {\n          userPermissions,\n          organizationId: ctx.organizationId,\n        },\n      );\n\n      if (!validationResult.valid) {\n        throw new TRPCError({\n          code: \"PRECONDITION_FAILED\",\n          message: validationResult.error ?? \"Invalid status transition\",\n        });\n      }\n\n      // Get status change effects using extracted function\n      const effects = getStatusChangeEffects(\n        transformKeysToCamelCase(existingIssue.status) as IssueStatus,\n        transformKeysToCamelCase(newStatus) as IssueStatus,\n      );\n\n      // Update the issue\n      const updateData: Partial<typeof issues.$inferInsert> = {\n        status_id: input.statusId,\n      };\n      if (effects.shouldSetResolvedAt) updateData.resolved_at = new Date();\n      if (effects.shouldClearResolvedAt) updateData.resolved_at = null;\n\n      await ctx.db\n        .update(issues)\n        .set(updateData)\n        .where(\n          and(\n            eq(issues.id, input.id),\n            eq(issues.organization_id, ctx.organizationId),\n          ),\n        );\n\n      // Get updated issue with relations\n      const updatedIssue = await ctx.db.query.issues.findFirst({\n        where: and(\n          eq(issues.id, input.id),\n          eq(issues.organization_id, ctx.organizationId),\n        ),\n        with: {\n          status: true,\n          priority: true,\n          assignedTo: {\n            columns: {\n              id: true,\n              name: true,\n              email: true,\n              image: true,\n            },\n          },\n          createdBy: {\n            columns: {\n              id: true,\n              name: true,\n              email: true,\n              image: true,\n            },\n          },\n          machine: {\n            with: {\n              model: true,\n              location: true,\n            },\n          },\n        },\n      });\n\n      if (!updatedIssue) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to update issue status\",\n        });\n      }\n\n      // Record activity\n      const activityService = ctx.services.createIssueActivityService();\n      await activityService.recordStatusChange(\n        input.id,\n        ctx.user.id,\n        existingIssue.status,\n        newStatus,\n      );\n\n      // Send notifications\n      const notificationService = ctx.services.createNotificationService();\n      await notificationService.notifyMachineOwnerOfStatusChange(\n        input.id,\n        existingIssue.status.name,\n        newStatus.name,\n      );\n\n      return transformKeysToCamelCase(\n        updatedIssue,\n      ) as IssueWithRelationsResponse;\n    }),\n\n  // Public procedure for getting issues (for anonymous users to see recent issues)\n  publicGetAll: anonOrgScopedProcedure\n    .input(issueFilterSchema.optional())\n    .query(async ({ ctx, input }): Promise<IssueResponse[]> => {\n      // Build where conditions dynamically (RLS handles org scoping)\n      const conditions = [];\n\n      // Machine ID filter\n      if (input?.machineId) {\n        conditions.push(eq(issues.machine_id, input.machineId));\n      }\n\n      // Status filter\n      if (input?.statusId) {\n        conditions.push(eq(issues.status_id, input.statusId));\n      }\n\n      const baseQuery = ctx.db.query.issues.findMany({\n        where: and(...conditions),\n        columns: {\n          id: true,\n          title: true,\n          description: true,\n          created_at: true,\n          updated_at: true,\n          submitter_name: true,\n        },\n        with: {\n          status: true,\n          priority: true,\n          assignedTo: {\n            columns: {\n              id: true,\n              name: true,\n              email: true,\n              image: true,\n            },\n          },\n          createdBy: {\n            columns: {\n              id: true,\n              name: true,\n              email: true,\n              image: true,\n            },\n          },\n          machine: {\n            with: {\n              model: true,\n              location: true,\n            },\n          },\n        },\n      });\n\n      let results = await baseQuery;\n\n      // Apply post-query filters for complex relations\n      if (input?.locationId) {\n        results = results.filter(\n          (issue) => issue.machine.location.id === input.locationId,\n        );\n      }\n\n      if (input?.modelId) {\n        results = results.filter(\n          (issue) => issue.machine.model.id === input.modelId,\n        );\n      }\n\n      if (input?.statusCategory) {\n        results = results.filter(\n          (issue) => issue.status.category === input.statusCategory,\n        );\n      }\n\n      // Apply sorting\n      const sortBy = input?.sortBy ?? \"created\";\n      const sortOrder = input?.sortOrder ?? \"desc\";\n\n      results.sort((a, b) => {\n        let aValue: string | number | Date;\n        let bValue: string | number | Date;\n\n        switch (sortBy) {\n          case \"created\":\n            aValue = a.created_at;\n            bValue = b.created_at;\n            break;\n          case \"updated\":\n            aValue = a.updated_at;\n            bValue = b.updated_at;\n            break;\n          case \"status\":\n            aValue = a.status.name;\n            bValue = b.status.name;\n            break;\n          case \"severity\":\n            aValue = a.priority.order;\n            bValue = b.priority.order;\n            break;\n          case \"machine\":\n            aValue = a.machine.model.name;\n            bValue = b.machine.model.name;\n            break;\n          default:\n            aValue = a.created_at;\n            bValue = b.created_at;\n        }\n\n        if (sortOrder === \"desc\") {\n          return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\n        } else {\n          return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n        }\n      });\n\n      // Apply limit\n      const limit = input?.limit ?? 20;\n      return transformKeysToCamelCase(\n        results.slice(0, limit),\n      ) as IssueResponse[];\n    }),\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/issue.status.ts","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":160,"column":30,"nodeType":"MemberExpression","endLine":160,"endColumn":54,"suppressions":[{"kind":"directive","justification":"category is validated by isValidCategory and type-constrained"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":162,"column":9,"nodeType":"MemberExpression","endLine":162,"endColumn":33,"suppressions":[{"kind":"directive","justification":"category is validated by isValidCategory and type-constrained"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/issue.timeline.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/issue.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/location.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/machine.core.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/machine.location.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/machine.owner.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/machine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/model.core.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/model.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/notification.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/organization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/pinballMap.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/qrCode.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/role.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/utils/commentService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/routers/utils/commentValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/schemas/issue.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/schemas/machine.schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/trpc.base.ts","messages":[{"ruleId":"@typescript-eslint/non-nullable-type-assertion-style","severity":2,"message":"Use a ! assertion to more succinctly remove null and undefined from the type.","line":498,"column":27,"nodeType":"TSAsExpression","messageId":"preferNonNullAssertion","endLine":498,"endColumn":55,"fix":{"range":[14121,14149],"text":"ctx.organizationId!"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"/**\n * Base tRPC procedures and middleware\n *\n * This file contains the fundamental building blocks for tRPC procedures\n * that are used across the application. It's separated to avoid circular\n * dependencies between trpc.ts and trpc.permission.ts.\n */\n\nimport { initTRPC, TRPCError } from \"@trpc/server\";\nimport { eq, and } from \"drizzle-orm\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\n\nimport type { LoggerInterface } from \"~/lib/logger\";\nimport type { SupabaseServerClient } from \"~/lib/supabase/server\";\nimport type { PinPointSupabaseUser } from \"~/lib/types\";\nimport type { DrizzleClient } from \"~/server/db/drizzle\";\n\nimport { logger } from \"~/lib/logger\";\nimport {\n  ERROR_MESSAGE_TRUNCATE_LENGTH,\n  SLOW_OPERATION_THRESHOLD_MS,\n} from \"~/lib/logger-constants\";\nimport { createClient } from \"~/lib/supabase/server\";\nimport { getUserOrganizationId } from \"~/lib/supabase/rls-helpers\";\nimport { createTraceContext, traceStorage } from \"~/lib/tracing\";\nimport { getUserPermissionsForSupabaseUser } from \"~/server/auth/permissions\";\nimport { getSupabaseUser } from \"~/server/auth/supabase\";\nimport { getGlobalDatabaseProvider } from \"~/server/db/provider\";\nimport { organizations, memberships } from \"~/server/db/schema\";\nimport { withOrgRLS } from \"~/server/db/utils/rls\";\nimport { ServiceFactory } from \"~/server/services/factory\";\n\n/**\n * Base context interface for tRPC\n */\ninterface CreateTRPCContextOptions {\n  headers: Headers;\n}\n\n/**\n * Organization type for context\n */\ninterface Organization {\n  id: string;\n  subdomain: string;\n  name: string;\n  // Add other fields as needed\n}\n\n/**\n * Permission type for context\n */\ninterface Permission {\n  id: string;\n  name: string;\n}\n\n/**\n * Role type for context\n */\ninterface Role {\n  id: string;\n  name: string;\n  permissions: Permission[];\n}\n\n/**\n * Membership type for context\n */\ninterface Membership {\n  id: string;\n  organizationId: string;\n  userId: string;\n  role: Role;\n}\n\n/**\n * tRPC context type that includes all available properties\n */\nexport interface TRPCContext {\n  db: DrizzleClient;\n  user: PinPointSupabaseUser | null;\n  supabase: SupabaseServerClient;\n  organizationId: string | null;\n  organization: Organization | null;\n  services: ServiceFactory;\n  headers: Headers;\n  logger: LoggerInterface;\n  traceId?: string;\n  requestId?: string;\n}\n\n/**\n * Enhanced context for protected procedures with authenticated user\n */\nexport interface ProtectedTRPCContext extends TRPCContext {\n  user: PinPointSupabaseUser;\n  organizationId: string | null;\n}\n\n/**\n * Enhanced context for RLS-aware organization procedures\n * organizationId is guaranteed non-null and automatically used by RLS policies\n */\nexport interface RLSOrganizationTRPCContext extends ProtectedTRPCContext {\n  organizationId: string; // Override to be non-null (guaranteed by middleware)\n  organization: Organization; // Override to be non-null (guaranteed by middleware)\n  membership: Membership;\n  userPermissions: string[];\n}\n\n/**\n * Legacy organization context for backward compatibility\n * @deprecated Use RLSOrganizationTRPCContext directly\n */\nexport type OrganizationTRPCContext = RLSOrganizationTRPCContext;\n\n/**\n * Context creation for tRPC with RLS-aware organization handling\n */\nexport const createTRPCContext = async (\n  opts: CreateTRPCContextOptions,\n): Promise<TRPCContext> => {\n  const dbProvider = getGlobalDatabaseProvider();\n\n  const db = dbProvider.getClient();\n  const services = new ServiceFactory(db);\n  const supabase = await createClient();\n  const user = await getSupabaseUser();\n\n  // Get organization ID from user's app_metadata (used by RLS policies)\n  // NOTE: must be 'let' (was 'const') because we may assign a fallback value later with `organizationId ??= org.id;`\n  let organizationId = await getUserOrganizationId(supabase);\n\n  let organization: Organization | null = null;\n\n  // If user has organization context, fetch organization details\n  if (organizationId) {\n    const org = await db.query.organizations.findFirst({\n      where: eq(organizations.id, organizationId),\n    });\n    if (org) {\n      organization = {\n        id: org.id,\n        subdomain: org.subdomain,\n        name: org.name,\n      } satisfies Organization;\n    }\n  }\n\n  // Fallback: derive organization from subdomain for users without app_metadata organizationId\n  if (!organization) {\n    const subdomain = opts.headers.get(\"x-subdomain\");\n\n    if (!subdomain) {\n      // No subdomain = public PinPoint site, no organization context needed\n      organization = null;\n    } else {\n      const org = await db.query.organizations.findFirst({\n        where: eq(organizations.subdomain, subdomain),\n      });\n\n      if (org) {\n        organization = {\n          id: org.id,\n          subdomain: org.subdomain,\n          name: org.name,\n        } satisfies Organization;\n\n        // Set organizationId for downstream procedures if not already set\n        organizationId ??= org.id;\n\n        // RLS session variable is now bound in procedure-level transactions.\n      }\n    }\n  }\n\n  // Create organization-scoped service factory if we have organization context\n  const contextServices = organizationId\n    ? services.withOrganization(organizationId)\n    : services;\n\n  return {\n    db,\n    user,\n    supabase,\n    organizationId,\n    organization,\n    services: contextServices,\n    headers: opts.headers,\n    logger,\n  };\n};\n\n/**\n * tRPC initialization\n */\nconst t = initTRPC.context<TRPCContext>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError: error.cause instanceof ZodError ? error.cause.issues : null,\n      },\n    };\n  },\n});\n\nexport const createCallerFactory = t.createCallerFactory;\nexport const createTRPCRouter = t.router;\n\n/**\n * Enhanced logging middleware with trace correlation\n */\nconst loggingMiddleware = t.middleware(async ({ path, type, next, ctx }) => {\n  const start = Date.now();\n  const traceContext = createTraceContext();\n\n  const contextLogger = logger.child({\n    component: `tRPC.${type}.${path}`,\n    traceId: traceContext.traceId,\n    requestId: traceContext.requestId,\n    organizationId: ctx.organization?.id,\n    userId: ctx.user?.id,\n  });\n\n  return traceStorage.run(traceContext, async () => {\n    const enhancedCtx = {\n      ...ctx,\n      logger: contextLogger,\n      traceId: traceContext.traceId,\n      requestId: traceContext.requestId,\n    };\n\n    try {\n      contextLogger.info({\n        msg: `${type} ${path} started`,\n        context: {\n          operation: path,\n          hasAuth: !!ctx.user,\n          hasOrg: !!ctx.organization,\n        },\n      });\n\n      if (t._config.isDev) {\n        // artificial delay in dev\n        const waitMs = Math.floor(Math.random() * 400) + 100;\n        await new Promise((resolve) => setTimeout(resolve, waitMs));\n      }\n\n      const result = await next({ ctx: enhancedCtx });\n      const duration = Date.now() - start;\n\n      // Log slow operations\n      if (duration > SLOW_OPERATION_THRESHOLD_MS) {\n        contextLogger.warn({\n          msg: `Slow ${type} ${path} completed`,\n          context: {\n            duration,\n            operation: path,\n            performance: \"slow\",\n          },\n        });\n      } else {\n        contextLogger.info({\n          msg: `${type} ${path} completed`,\n          context: {\n            duration,\n            operation: path,\n          },\n        });\n      }\n\n      return result;\n    } catch (error) {\n      const duration = Date.now() - start;\n\n      contextLogger.error({\n        msg: `${type} ${path} failed`,\n        error: {\n          type: error instanceof Error ? error.constructor.name : \"Unknown\",\n          code: (error as { code?: string }).code ?? \"UNKNOWN\",\n          message:\n            error instanceof Error\n              ? error.message.substring(0, ERROR_MESSAGE_TRUNCATE_LENGTH)\n              : \"Unknown error\",\n        },\n        context: {\n          duration,\n          operation: path,\n          success: false,\n        },\n      });\n\n      throw error;\n    }\n  });\n});\n\n/**\n * Base procedures\n */\nexport const publicProcedure = t.procedure.use(loggingMiddleware);\n\nexport const protectedProcedure = t.procedure\n  .use(loggingMiddleware)\n  .use(({ ctx, next }) => {\n    if (!ctx.user) {\n      throw new TRPCError({ code: \"UNAUTHORIZED\" });\n    }\n    return next({\n      ctx: {\n        ...ctx,\n        // infers the `user` as non-nullable\n        user: ctx.user,\n      } satisfies ProtectedTRPCContext,\n    });\n  });\n\n/**\n * RLS-aware organization procedure with automatic organizational scoping and context repair\n *\n * This procedure ensures:\n * 1. User is authenticated\n * 2. User has organization context (organizationId in app_metadata or can be repaired)\n * 3. RLS policies will automatically scope all database queries\n *\n * Enhanced with authentication context repair:\n * - Attempts to find user's organization through membership if app_metadata is missing\n * - Provides fallback mechanisms for broken authentication contexts\n *\n * CRITICAL: organizationId is now handled by RLS policies automatically!\n * No manual filtering needed in router queries.\n */\nexport const organizationProcedure = protectedProcedure.use(\n  async ({ ctx, next }) => {\n    let organizationId = ctx.organizationId;\n    let organization = ctx.organization;\n\n    // Phase 2.2: Authentication context repair\n    // If user is missing organizationId in app_metadata, attempt to repair via membership lookup\n    if (!organizationId) {\n      ctx.logger.warn({\n        msg: \"Attempting authentication context repair - user missing organizationId\",\n        component: \"organizationProcedure\",\n        context: {\n          userId: ctx.user.id,\n          hasAppMetadata: !!ctx.user.app_metadata,\n          operation: \"context_repair\",\n        },\n      });\n\n      // Try to find user's organization through their membership\n      try {\n        const userMembership = await ctx.db.query.memberships.findFirst({\n          where: eq(memberships.user_id, ctx.user.id),\n          with: {\n            organization: true,\n          },\n          // Note: memberships table doesn't have updated_at, using id for deterministic ordering\n        });\n\n        if (userMembership?.organization) {\n          organizationId = userMembership.organization_id;\n          organization = {\n            id: userMembership.organization.id,\n            subdomain: userMembership.organization.subdomain,\n            name: userMembership.organization.name,\n          };\n\n          ctx.logger.info({\n            msg: \"Authentication context repair successful\",\n            component: \"organizationProcedure\",\n            context: {\n              userId: ctx.user.id,\n              repairedOrganizationId: organizationId,\n              repairMethod: \"membership_lookup\",\n            },\n          });\n        }\n      } catch (error) {\n        ctx.logger.error({\n          msg: \"Authentication context repair failed\",\n          component: \"organizationProcedure\",\n          context: {\n            userId: ctx.user.id,\n            operation: \"membership_lookup_failed\",\n          },\n          error: {\n            message: error instanceof Error ? error.message : String(error),\n          },\n        });\n      }\n    }\n\n    // Final validation after repair attempts\n    if (!organizationId) {\n      throw new TRPCError({\n        code: \"FORBIDDEN\",\n        message:\n          \"User does not have organization context. Please contact support if this persists.\",\n      });\n    }\n\n    if (!organization) {\n      throw new TRPCError({\n        code: \"NOT_FOUND\",\n        message: \"Organization not found\",\n      });\n    }\n\n    // Execute the remainder within an RLS-bound transaction\n    const result = await withOrgRLS(ctx.db, organizationId, async (tx) => {\n      // Membership query under RLS + explicit where\n      const membership = await tx.query.memberships.findFirst({\n        where: and(\n          eq(memberships.organization_id, organizationId),\n          eq(memberships.user_id, ctx.user.id),\n        ),\n        with: {\n          role: {\n            with: {\n              rolePermissions: {\n                with: {\n                  permission: true,\n                },\n              },\n            },\n          },\n        },\n      });\n\n      if (!membership) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"You don't have permission to access this organization\",\n        });\n      }\n\n      // Get user permissions (handles admin role automatically)\n      const userPermissions = await getUserPermissionsForSupabaseUser(\n        ctx.user,\n        tx,\n      );\n\n      return next({\n        ctx: {\n          ...ctx,\n          db: tx,\n          organizationId, // Guaranteed non-null (original or repaired)\n          organization, // Guaranteed non-null (original or repaired)\n          membership: {\n            id: membership.id,\n            organizationId: membership.organization_id,\n            userId: membership.user_id,\n            role: {\n              id: membership.role.id,\n              name: membership.role.name,\n              permissions: membership.role.rolePermissions.map(\n                (rp) => rp.permission,\n              ),\n            },\n          } satisfies Membership,\n          userPermissions,\n        } satisfies RLSOrganizationTRPCContext,\n      });\n    });\n\n    return result;\n  },\n);\n\n/**\n * Simplified organization procedure for RLS-enabled operations\n *\n * This is the new recommended procedure that leverages RLS for automatic\n * organizational scoping without complex middleware.\n *\n * Use this for new routers that don't need complex permission checking.\n */\nexport const orgScopedProcedure = protectedProcedure.use(\n  async ({ ctx, next }) => {\n    if (!ctx.organizationId) {\n      throw new TRPCError({\n        code: \"FORBIDDEN\",\n        message: \"User does not have organization context\",\n      });\n    }\n\n    const result = await withOrgRLS(ctx.db, ctx.organizationId, async (tx) => {\n      return next({\n        ctx: {\n          ...ctx,\n          db: tx,\n          organizationId: ctx.organizationId as string, // Type assertion: already checked for null above\n        } satisfies TRPCContext & { organizationId: string },\n      });\n    });\n\n    return result;\n  },\n);\n\n/**\n * Anonymous organization-scoped procedure\n *\n * This procedure ensures anonymous users have organization context from subdomain\n * resolution. Use this instead of publicProcedure for multi-tenant operations\n * that require organization context.\n *\n * Features:\n * - Validates organization context exists (from subdomain resolution)\n * - Provides guaranteed non-null organizationId for consistent usage\n * - Standardizes error handling for missing organization context\n * - Compatible with application-layer organization filtering patterns\n */\nexport const anonOrgScopedProcedure = publicProcedure.use(\n  async ({ ctx, next }) => {\n    if (!ctx.organization) {\n      throw new TRPCError({\n        code: \"NOT_FOUND\",\n        message: \"Organization not found. Please check the URL or subdomain.\",\n      });\n    }\n\n    const org = ctx.organization; // Non-null assertion: checked above\n    const orgId = org.id;\n    const result = await withOrgRLS(ctx.db, orgId, async (tx) => {\n      return next({\n        ctx: {\n          ...ctx,\n          db: tx,\n          organizationId: orgId, // Guaranteed non-null for consistency\n          organization: org, // Guaranteed non-null\n        } satisfies TRPCContext & {\n          organizationId: string;\n          organization: NonNullable<TRPCContext[\"organization\"]>;\n        },\n      });\n    });\n\n    return result;\n  },\n);\n","usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/trpc.permission.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/api/trpc.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/auth/permissions.constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/auth/permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/auth/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/auth/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/auth/uploadAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/auth/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/constants/cleanup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/client-factory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/drizzle.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/provider.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/queries/audit-queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/queries/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/queries/membership.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/schema/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/schema/collections.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/schema/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/schema/issues.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/schema/machines.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/schema/organizations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/utils/__tests__/field-validation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/utils/common-queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/utils/field-validation.ts","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":125,"column":10,"nodeType":"MemberExpression","endLine":125,"endColumn":40,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":249,"column":45,"nodeType":"MemberExpression","endLine":249,"endColumn":67,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/utils/rls.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/db/utils/role-validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/services/collectionService.service.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/services/collectionService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/services/commentCleanupService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/services/factory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/services/issueActivityService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/services/notificationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/services/permissionService.ts","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":175,"column":28,"nodeType":"MemberExpression","endLine":175,"endColumn":63,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/services/pinballmapService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/services/qrCodeService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/services/roleService.service.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/services/roleService.simple.service.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/services/roleService.ts","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":185,"column":22,"nodeType":"MemberExpression","endLine":185,"endColumn":50,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":550,"column":26,"nodeType":"MemberExpression","endLine":550,"endColumn":55,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/services/validation-helper.ts","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":42,"column":69,"nodeType":"MemberExpression","endLine":42,"endColumn":101,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/server/utils/qrCodeUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/test/constants/seed-test-ids.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/test/helpers/anonymous-test-helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/test/helpers/pglite-test-setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/test/helpers/service-test-helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/test/integration/archetype-integration-example.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/test/mocks/seed-based-mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/test/mocks/usage-examples.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/test/rsc-helpers/dal-test-helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/test/rsc-helpers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/test/rsc-helpers/server-action-test-helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/test/setup/nextjs-mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/test/setup/organization-mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/trpc/query-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/trpc/react.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/trpc/server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/utils/supabase/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/utils/supabase/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/utils/supabase/server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/src/utils/version.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/test-schemas.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/types/css.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/types/eslint-plugin-promise.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/froeht/Code/PinPoint/types/jsx.d.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":10,"column":15,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":10,"endColumn":22,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[201,259],"text":"type Element = React.ReactElement<any, any>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[246,249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[246,249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[251,254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[251,254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[311,314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[311,314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":14,"column":50,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":14,"endColumn":52,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[406,408],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[406,408],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":15,"column":52,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":15,"endColumn":54,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[463,465],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[463,465],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":16,"column":15,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":16,"endColumn":34,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[473,531],"text":"type IntrinsicAttributes = React.Attributes"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":17,"column":15,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":17,"endColumn":39,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[536,610],"text":"type IntrinsicClassAttributes<T> = React.ClassAttributes<T>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Global JSX type declaration for React 18+\n * This makes JSX.Element available globally without needing React imports\n */\n\nimport * as React from 'react';\n\ndeclare global {\n  namespace JSX {\n    interface Element extends React.ReactElement<any, any> { }\n    interface ElementClass extends React.Component<any> {\n      render(): React.ReactNode;\n    }\n    interface ElementAttributesProperty { props: {}; }\n    interface ElementChildrenAttribute { children: {}; }\n    interface IntrinsicAttributes extends React.Attributes { }\n    interface IntrinsicClassAttributes<T> extends React.ClassAttributes<T> { }\n  }\n}","usedDeprecatedRules":[]}]