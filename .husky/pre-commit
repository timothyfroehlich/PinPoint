#!/bin/sh
# Prevent commits to main branch
branch=$(git rev-parse --abbrev-ref HEAD)
if [ "$branch" = "main" ]; then
#  echo "üö® BLOCKED: Direct commits to main are not allowed!"
#  echo "üí° Use a feature branch and create a PR, or use /ship-it for meta changes"
#  echo "üîß Create a branch: git checkout -b feature/your-changes"
  echo "Temporarily allowing pushes to main"
  exit 0
fi

echo "üîß Running pre-commit checks in parallel..."

# Check for NEW migration files (allow initial base migration only)
if [ -d "supabase/migrations" ]; then
  # Count migration files, excluding the allowed base migration
  NEW_MIGRATIONS=$(find supabase/migrations -name "*.sql" -not -name "0000_fuzzy_talisman.sql" 2>/dev/null || true)
  if [ -n "$NEW_MIGRATIONS" ]; then
    echo "‚ùå NEW migration files detected! This project uses 'drizzle-kit push' approach."
    echo "Only the base migration (0000_fuzzy_talisman.sql) is allowed for Supabase seeding."
    echo "Found new migrations: $NEW_MIGRATIONS"
    echo "Remove with: rm [filename]"
    exit 1
  fi
fi
echo "‚úÖ Using base migration for Supabase seeding, no new migrations found"

# Check for staged .env* files (except explicitly allowed ones)
STAGED_ENV_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '^\.env' | grep -v '^\.env$' | grep -v '^\.env\.example$' || true)
if [ -n "$STAGED_ENV_FILES" ]; then
  echo "‚ùå BLOCKED: Staging .env* files is not allowed for security!"
  echo "Found staged files: $STAGED_ENV_FILES"
  echo "üí° Only .env and .env.example are allowed to be committed"
  echo "üîß Unstage with: git reset HEAD <file>"
  exit 1
fi
echo "‚úÖ No restricted .env* files staged"

npm run pre-commit:all
