/**
 * Infrastructure Seeding
 *
 * Shared seeding for organizations, permissions, roles, priorities, statuses.
 * Consolidates the common code from the old seed files.
 */

import { createPrismaClient } from "~/server/db";
import { RoleService } from "~/server/services/roleService";
import {
  ALL_PERMISSIONS,
  PERMISSION_DESCRIPTIONS,
} from "~/server/auth/permissions.constants";

const prisma = createPrismaClient();

export interface Organization {
  id: string;
  name: string;
  subdomain: string;
}

/**
 * Create global permissions using the constants
 */
async function createGlobalPermissions(): Promise<void> {
  for (const permName of ALL_PERMISSIONS) {
    await prisma.permission.upsert({
      where: { name: permName },
      update: {},
      create: {
        name: permName,
        description:
          PERMISSION_DESCRIPTIONS[permName] ?? `Permission: ${permName}`,
      },
    });
  }

  console.log(
    `[INFRASTRUCTURE] Created ${ALL_PERMISSIONS.length.toString()} global permissions`,
  );
}

/**
 * Create organization with automatic default roles using RoleService
 */
async function createOrganizationWithRoles(orgData: {
  name: string;
  subdomain: string;
  logoUrl?: string;
}): Promise<Organization> {
  const organization = await prisma.organization.upsert({
    where: { subdomain: orgData.subdomain },
    update: orgData,
    create: orgData,
  });

  const roleService = new RoleService(prisma, organization.id);

  // Create system roles (Admin and Unauthenticated)
  await roleService.createSystemRoles();
  console.log(
    `[INFRASTRUCTURE] Created system roles for organization: ${organization.name}`,
  );

  // Create default Member role from template
  await roleService.createTemplateRole("MEMBER");
  console.log(
    `[INFRASTRUCTURE] Created Member role template for organization: ${organization.name}`,
  );

  return {
    id: organization.id,
    name: organization.name,
    subdomain: organization.subdomain || "apc", // Should never be null since we just created it
  };
}

/**
 * Create default priorities for organization
 */
async function createDefaultPriorities(organizationId: string): Promise<void> {
  const priorities = [
    { name: "Low", order: 1 },
    { name: "Medium", order: 2 },
    { name: "High", order: 3 },
    { name: "Critical", order: 4 },
  ];

  for (const priorityData of priorities) {
    await prisma.priority.upsert({
      where: {
        name_organizationId: {
          name: priorityData.name,
          organizationId: organizationId,
        },
      },
      update: {},
      create: {
        ...priorityData,
        organizationId: organizationId,
        isDefault: true,
      },
    });
  }

  console.log(
    `[INFRASTRUCTURE] Created ${priorities.length.toString()} default priorities`,
  );
}

/**
 * Create default collection types for an organization
 */
async function createDefaultCollectionTypes(
  organizationId: string,
): Promise<void> {
  const defaultCollectionTypes = [
    {
      name: "Rooms",
      displayName: "Rooms",
      isAutoGenerated: false,
      isEnabled: true,
      sortOrder: 1,
    },
    {
      name: "Manufacturer",
      displayName: "Manufacturer",
      isAutoGenerated: true,
      sourceField: "manufacturer",
      isEnabled: false,
      sortOrder: 2,
    },
    {
      name: "Era",
      displayName: "Era",
      isAutoGenerated: true,
      sourceField: "year",
      isEnabled: false,
      sortOrder: 3,
    },
  ];

  for (const typeData of defaultCollectionTypes) {
    await prisma.collectionType.upsert({
      where: {
        name_organizationId: {
          name: typeData.name,
          organizationId,
        },
      },
      update: typeData,
      create: {
        ...typeData,
        organizationId,
      },
    });
    console.log(
      `[INFRASTRUCTURE] Created/Updated collection type: ${typeData.name}`,
    );
  }
}

/**
 * Create default issue statuses for organization
 */
async function createDefaultStatuses(organizationId: string): Promise<void> {
  const statusesToUpsert = [
    { name: "New", category: "NEW" as const },
    { name: "In Progress", category: "IN_PROGRESS" as const },
    { name: "Needs expert help", category: "IN_PROGRESS" as const },
    { name: "Needs Parts", category: "IN_PROGRESS" as const },
    { name: "Fixed", category: "RESOLVED" as const },
    { name: "Not to be Fixed", category: "RESOLVED" as const },
    { name: "Not Reproducible", category: "RESOLVED" as const },
  ];

  for (const statusData of statusesToUpsert) {
    await prisma.issueStatus.upsert({
      where: {
        name_organizationId: {
          name: statusData.name,
          organizationId,
        },
      },
      update: { category: statusData.category },
      create: {
        name: statusData.name,
        category: statusData.category,
        organizationId,
        isDefault: true,
      },
    });
    console.log(`[INFRASTRUCTURE] Upserted issue status: ${statusData.name}`);
  }
}

/**
 * Main infrastructure seeding function
 */
export async function seedInfrastructure(): Promise<Organization> {
  console.log("[INFRASTRUCTURE] Creating organizations, permissions, roles...");

  // 1. Create global permissions first
  await createGlobalPermissions();

  // 2. Create organization with roles
  const organization = await createOrganizationWithRoles({
    name: "Austin Pinball Collective",
    subdomain: "apc",
    logoUrl: "/images/logos/austinpinballcollective-logo-outline.png",
  });
  console.log(`[INFRASTRUCTURE] Created organization: ${organization.name}`);

  // 3. Create default priorities
  await createDefaultPriorities(organization.id);

  // 4. Create default collection types
  await createDefaultCollectionTypes(organization.id);

  // 5. Create default issue statuses
  await createDefaultStatuses(organization.id);

  console.log(
    `[INFRASTRUCTURE] âœ… Infrastructure seeding complete for ${organization.name}`,
  );

  return {
    id: organization.id,
    name: organization.name,
    subdomain: organization.subdomain || "apc", // Should never be null since we just created it
  };
}
