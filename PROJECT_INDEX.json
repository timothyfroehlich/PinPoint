{
  "at": "2025-08-28T09:53:44.781099",
  "root": ".",
  "tree": [
    ".",
    "\u251c\u2500\u2500 docs/",
    "\u2502   \u251c\u2500\u2500 architecture/",
    "\u2502   \u251c\u2500\u2500 configuration/",
    "\u2502   \u251c\u2500\u2500 deployment/",
    "\u2502   \u251c\u2500\u2500 deprecated/",
    "\u2502   \u2502   \u2514\u2500\u2500 testing/",
    "\u2502   \u251c\u2500\u2500 design-docs/",
    "\u2502   \u251c\u2500\u2500 developer-guides/",
    "\u2502   \u251c\u2500\u2500 latest-updates/",
    "... (truncated)"
  ],
  "stats": {
    "total_files": 543,
    "total_directories": 351,
    "fully_parsed": {
      "typescript": 500,
      "javascript": 4,
      "shell": 4
    },
    "listed_only": {
      "json": 13,
      "sql": 18,
      "shell": 3,
      "css": 1
    },
    "markdown_files": 166
  },
  "f": {
    "e2e/dashboard-auth-flow.e2e.test.ts": [
      "t",
      [
        "authenticateTestUser:316:async (page:Page)::",
        "setOrganizationContext:323:async (page:Page, orgId:::",
        "clearAuthentication:329:async (page:Page)::"
      ]
    ],
    "sr/app/api/search/suggestions/route.ts": [
      "t",
      [
        "GET:12:async (request:NextRequest):::"
      ]
    ],
    "sr/app/api/search/universal/route.ts": [
      "t",
      [
        "GET:15:async (request:NextRequest):::",
        "OPTIONS:109:async ():Promise<NextResponse>::"
      ]
    ],
    "sr/app/machines/new/page.tsx": [
      "t",
      [
        "NewMachinePage:19:async ()::"
      ]
    ],
    "sr/app/search/page.tsx": [
      "t",
      [
        "generateMetadata:14:async ({ searchParams }:SearchPageProps)::",
        "SearchPage:36:async ({ searchParams }:SearchPageProps)::",
        "SearchResultsWithData:115:async ({ query, entities, page, limit }:{ query::SearchEntity[]; page:number; limit:number; })::"
      ]
    ],
    "sr/app/settings/activity/components/ActivityLogFilter.tsx": [
      "t",
      [
        "ActivityLogFilter:31:()::",
        "applyFilters:61:()::",
        "clearFilters:74:()::",
        "setQuickDateRange:83:(days:number)::"
      ]
    ],
    "sr/app/settings/activity/page.tsx": [
      "t",
      [
        "ActivityLogPage:41:async ({ searchParams, }:{ searchParams::string]:string | string[] | undefined }; })::",
        "getActionIcon:120:(action:string)::",
        "getSeverityColor:137:(severity:string)::"
      ]
    ],
    "sr/app/settings/layout.tsx": [
      "t",
      [
        "SettingsLayout:24:async ({ children }:SettingsLayoutProps)::"
      ]
    ],
    "sr/app/settings/organization/components/OrganizationLogoForm.tsx": [
      "t",
      [
        "OrganizationLogoForm:22:({ currentLogoUrl }:OrganizationLogoFormProps)::",
        "handleUrlChange:38:(url:string)::",
        "clearLogo:42:()::"
      ]
    ],
    "sr/app/settings/organization/components/OrganizationProfileForm.tsx": [
      "t",
      [
        "OrganizationProfileForm:28:({ organization }:OrganizationProfileFormProps)::"
      ]
    ],
    "sr/app/settings/organization/page.tsx": [
      "t",
      [
        "OrganizationSettingsPage:17:async ()::"
      ]
    ],
    "sr/app/settings/page.tsx": [
      "t",
      [
        "SettingsPage:21:async ()::"
      ]
    ],
    "sr/app/settings/roles/page.tsx": [
      "t",
      [
        "RolesSettingsPage:23:async ()::"
      ]
    ],
    "sr/app/settings/system/components/SystemNotificationSettings.tsx": [
      "t",
      [
        "SystemNotificationSettings:27:({ settings }:SystemNotificationSettingsProps)::",
        "handleToggle:31:(key:keyof typeof formData, value:::"
      ]
    ],
    "sr/app/settings/system/components/SystemPreferences.tsx": [
      "t",
      [
        "SystemPreferences:33:({ settings }:SystemPreferencesProps)::",
        "handleSelectChange:37:(key:keyof typeof formData, value:::"
      ]
    ],
    "sr/app/settings/system/components/SystemSecuritySettings.tsx": [
      "t",
      [
        "SystemSecuritySettings:35:({ settings }:SystemSecuritySettingsProps)::",
        "handleToggle:39:(key:keyof typeof formData, value:::",
        "handleInputChange:43:(key:keyof typeof formData, value:::",
        "handleSelectChange:50:(key:keyof typeof formData, value:::"
      ]
    ],
    "sr/app/settings/system/page.tsx": [
      "t",
      [
        "SystemSettingsPage:25:async ()::"
      ]
    ],
    "sr/app/settings/users/components/InviteUserDialog.tsx": [
      "t",
      [
        "InviteUserDialog:37:({ children, availableRoles = [] }:InviteUserDialogProps)::"
      ]
    ],
    "sr/app/settings/users/components/RoleChangeDialog.tsx": [
      "t",
      [
        "RoleChangeDialog:50:({ user, availableRoles, children }:RoleChangeDialogProps)::"
      ]
    ],
    "sr/app/settings/users/components/UserTableActions.tsx": [
      "t",
      [
        "UserTableActions:50:({ user, currentUserCanManage, availableRoles = [] }:UserTableActionsProps)::",
        "handleResendInvitation:53:async ()::",
        "handleRemoveUser:65:async ()::"
      ]
    ],
    "sr/app/settings/users/page.tsx": [
      "t",
      [
        "UsersSettingsPage:25:async ()::"
      ]
    ],
    "sr/components/forms/CreateIssueFormServer.tsx": [
      "t",
      [
        "CreateIssueFormServer:48:({ machines, users = [], className, action, initialMachineId, }:CreateIssueFormServerProps)::"
      ]
    ],
    "sr/components/forms/form-enhancement-client.tsx": [
      "t",
      [
        "EnhancedSubmitButton:20:({ isPending }:{ isPending:::",
        "FormEnhancementClient:41:()::"
      ]
    ],
    "sr/components/issues/realtime-comments-client.tsx": [
      "t",
      [
        "RealtimeCommentsClient:42:({ issueId, currentUserId, existingCommentIds = [], }:RealtimeCommentsClientProps)::",
        "initializeRealtimeConnection:59:async ()::"
      ]
    ],
    "sr/components/layout/notification-bell-client.tsx": [
      "t",
      [
        "NotificationBellClient:22:({ initialUnreadCount, userId, }:NotificationBellClientProps)::",
        "initializeRealtimeConnection:33:async ()::",
        "handleOpenChange:104:(open:boolean)::"
      ]
    ],
    "sr/components/layout/notification-bell-wrapper.tsx": [
      "t",
      [
        "NotificationBellSkeleton:19:()::",
        "NotificationBellWrapper:31:async ({ userId }:NotificationBellWrapperProps)::",
        "NotificationListSkeleton:48:()::"
      ]
    ],
    "sr/components/layout/notifications-list-server.tsx": [
      "t",
      [
        "getNotificationIcon:29:(type:string)::",
        "getNotificationColor:49:(type:string)::",
        "NotificationsListServer:68:async ({ limit = 10 }:NotificationListServerProps)::"
      ]
    ],
    "sr/components/machines/client/create-machine-form-client.tsx": [
      "t",
      [
        "CreateMachineFormClient:46:({ locations, models, action, }:CreateMachineFormClientProps)::"
      ]
    ],
    "sr/components/machines/machine-detail-server.tsx": [
      "t",
      [
        "MachineDetailServer:46:({ machine }:MachineDetailServerProps)::"
      ]
    ],
    "sr/components/machines/machine-header.tsx": [
      "t",
      [
        "MachineHeader:35:({ machine }:MachineHeaderProps)::"
      ]
    ],
    "sr/components/notifications/notification-client.tsx": [
      "t",
      [
        "NotificationClient:60:({ userId, organizationId, maxNotifications = 5, autoHideDelay = 5000, }:NotificationClientProps)::",
        "handleIssueUpdate:71:(_event:CustomEvent)::",
        "handleMachineUpdate:80:(event:CustomEvent)::",
        "handleFormSubmission:89:(event:CustomEvent)::",
        "initializeNotificationStream:122:async ():addNotification:",
        "addNotification:169:(notification:Omit<Notification, \"id\" | \"timestamp\">)::",
        "removeNotification:189:(id:string)::"
      ]
    ],
    "sr/components/search/advanced-search-form-optimized.tsx": [
      "t",
      [
        "FieldRenderer:31:({ field, formState, updateFormField }:{ field::FormState; updateFormField:(fieldId:string, value:any)::",
        "AdvancedSearchFormOptimized:207:({ entityType, fields, currentParams, buildUrl, title, description, collapsible = true, defaultExpanded = false, showActiveFilters = true, onFormSubmit, }:AdvancedSearchFormProps)::"
      ]
    ],
    "sr/components/search/advanced-search-form.tsx": [
      "t",
      [
        "AdvancedSearchForm:60:({ entityType, fields, currentParams, buildUrl, title, description, collapsible = true, defaultExpanded = false, showActiveFilters = true, onFormSubmit, }:AdvancedSearchFormProps)::",
        "updateFormField:104:(fieldId:string, value:::",
        "handleSubmit:112:(event:React.FormEvent)::",
        "handleClearFilters:163:():forEach:",
        "renderField:211:(field:FilterField)::"
      ]
    ],
    "sr/components/search/filter-configs.tsx": [
      "t",
      [
        "getFilterFieldsForEntity:222:(entityType:\"issues\" | \"machines\" | \"universal\"):::",
        "getFilterField:238:(entityType:\"issues\" | \"machines\" | \"universal\", fieldId::FilterField | undefined:getFilterFieldsForEntity:",
        "validateFilterValue:246:(field:FilterField, value::boolean::"
      ]
    ],
    "sr/components/search/global-search-shortcut.tsx": [
      "t",
      [
        "GlobalSearchShortcut:18:({ children }:GlobalSearchShortcutProps)::",
        "SearchButtonTrigger:125:({ variant = \"outline\", size = \"sm\", showShortcut = true, className = \"\" }:SearchButtonTriggerProps)::",
        "useGlobalSearchShortcut:191:()::",
        "handleKeyDown:195:(event:KeyboardEvent)::",
        "handleResultSelect:58:(result:SearchResult)::",
        "handleOpenChange:63:(open:boolean)::"
      ]
    ],
    "sr/components/search/universal-search-input.tsx": [
      "t",
      [
        "UniversalSearchInput:58:({ placeholder = \"Search issues, machines, users...\", showSuggestions = true, showRecentSearches = true, maxSuggestions = 5, className = \"\", autoFocus = false, onResultSelect, }:UniversalSearchInputProps)::",
        "fetchSuggestions:105:async ()::",
        "handleClickOutside:134:(event:MouseEvent)::",
        "handleKeyDown:151:(event:KeyboardEvent)::",
        "saveRecentSearch:166:(query:string)::",
        "handleSubmit:178:(e:React.FormEvent)::",
        "handleInputFocus:190:()::",
        "handleInputChange:194:(e:React.ChangeEvent<HTMLInputElement>)::",
        "clearSearch:203:()::",
        "selectSuggestion:210:(result:SearchResult)::",
        "selectRecentSearch:222:(recentSearch:string)::"
      ]
    ],
    "sr/components/search/universal-search-results.tsx": [
      "t",
      [
        "UniversalSearchResults:54:async ({ query, entities = [\"all\"], page = 1, limit = 20, showEntityCounts = true, showMetadata = true, }:UniversalSearchResultsProps)::",
        "UniversalSearchResultsSkeleton:309:()::"
      ]
    ],
    "sr/components/ui/calendar.tsx": [
      "t",
      [
        "Calendar:14:({ className, classNames, showOutsideDays = true, captionLayout = \"label\", buttonVariant = \"ghost\", formatters, components, ...props }:React.ComponentProps<typeof DayPicker> & { buttonVariant?:::",
        "CalendarDayButton:175:({ className, day, modifiers, ...props }:React.ComponentProps<typeof DayButton>)::"
      ]
    ],
    "sr/components/ui/dialog.tsx": [
      "t",
      [
        "DialogHeader:56:({ className, ...props }:React.HTMLAttributes<HTMLDivElement>)::",
        "DialogFooter:70:({ className, ...props }:React.HTMLAttributes<HTMLDivElement>)::"
      ]
    ],
    "sr/components/ui/pagination-universal.tsx": [
      "t",
      [
        "buildPaginationUrl:24:(baseUrl:string, page::Record<string, string | string[] | undefined> = {}):string::",
        "calculateVisiblePages:56:(currentPage:number, totalPages::(number | \"ellipsis\")[]::",
        "PaginationUniversal:97:({ currentPage, totalPages, totalCount, baseUrl, searchParams = {}, itemName = \"items\", }:PaginationProps)::"
      ]
    ],
    "sr/components/utils/lazy-client-island.tsx": [
      "t",
      [
        "LazyClientIsland:33:({ importComponent, componentProps, fallback = <div className=\"h-16 bg-muted animate-pulse rounded\" />, loadImmediately = false, threshold = 0.1, strategy = 'intersection', name = 'LazyComponent', }:LazyClientIslandProps<T>)::",
        "usePreloadComponent:157:(importComponent:()::",
        "createLazyClientIsland:179:(importComponent:()::",
        "LazyWrapper:183:(props:T & Partial<LazyClientIslandProps<T>>)::",
        "loadOnIdle:79:():loadComponent:",
        "loadComponent:91:async ()::",
        "preload:162:async ()::"
      ]
    ],
    "sr/lib/actions/admin-actions.ts": [
      "t",
      [
        "inviteUserAction:77:async (_prevState:ActionResult<{ success::FormData,):Promise<ActionResult<::",
        "updateUserRoleAction:219:async (_prevState:ActionResult<{ success::FormData,):Promise<ActionResult<::",
        "removeUserAction:288:async (_prevState:ActionResult<{ success::FormData,):Promise<ActionResult<::",
        "updateSystemSettingsAction:353:async (_prevState:ActionResult<{ success::FormData,):Promise<ActionResult<::"
      ]
    ],
    "sr/lib/actions/comment-actions.ts": [
      "t",
      [
        "addCommentAction:71:async (issueId:string, _prevState::string }> | null, formData:FormData,):Promise<ActionResult<::",
        "editCommentAction:141:async (commentId:string, _prevState::boolean }> | null, formData:FormData,):Promise<ActionResult<::",
        "deleteCommentAction:198:async (commentId:string, _prevState::boolean }> | null, formData:FormData,):Promise<ActionResult<::",
        "restoreCommentAction:248:async (commentId:string, _prevState::boolean }> | null, formData:FormData,):Promise<ActionResult<::"
      ]
    ],
    "sr/lib/actions/notification-actions.ts": [
      "t",
      [
        "markNotificationAsReadAction:38:async (_prevState:ActionResult<{ success::FormData,):Promise<ActionResult<::",
        "bulkMarkNotificationsAsReadAction:95:async (_prevState:ActionResult<{ updatedCount::FormData,):Promise<ActionResult<::",
        "markAllNotificationsAsReadAction:156:async (_prevState:ActionResult<{ updatedCount::FormData,):Promise<ActionResult<::",
        "markNotificationAsUnreadAction:209:async (_prevState:ActionResult<{ success::FormData,):Promise<ActionResult<::"
      ]
    ],
    "sr/lib/actions/organization-actions.ts": [
      "t",
      [
        "updateOrganizationProfileAction:61:async (_prevState:ActionResult<{ success::FormData,):Promise<ActionResult<::",
        "updateOrganizationLogoAction:125:async (_prevState:ActionResult<{ success::FormData,):Promise<ActionResult<::"
      ]
    ],
    "sr/lib/dal/notifications.ts": [
      "t",
      [
        "createNotificationActionUrl:216:(entityType:\"ISSUE\" | \"MACHINE\" | \"COMMENT\" | \"ORGANIZATION\", entityId::string::"
      ]
    ],
    "sr/lib/services/notification-generator.ts": [
      "t",
      [
        "createNotificationForUser:51:async (userId:string, notificationData::NotificationContext,)::",
        "getIssueStakeholders:81:async (issueId:string, organizationId:::",
        "generateCommentNotifications:144:async (issueId:string, commentId::NotificationContext,):createNotificationForUser,getIssueStakeholders:",
        "generateAssignmentNotifications:201:async (issueId:string, newAssigneeId::string | null, context:NotificationContext,):createNotificationForUser:",
        "generateStatusChangeNotifications:255:async (issueId:string, newStatusName::NotificationContext,):createNotificationForUser,getIssueStakeholders:",
        "generateIssueCreationNotifications:310:async (issueId:string, context::createNotificationForUser:"
      ]
    ],
    "sr/lib/services/qr-code-service.ts": [
      "t",
      [
        "generateMachineQRCode:29:async (machineId:string, options::Promise<GeneratedQRCode>::",
        "generateMachineQRCodeBuffer:75:async (machineId:string, options::Promise<Buffer>::",
        "validateQRCodeParams:105:(machineId:string):::",
        "getDefaultQROptions:122:():QRCodeOptions::"
      ]
    ],
    "sr/lib/services/search-service.ts": [
      "t",
      [
        "searchIssues:142:async (query:string, organizationId::number):Promise<SearchResult[]>::",
        "searchMachines:202:async (query:string, organizationId::number):Promise<SearchResult[]>::",
        "searchUsers:265:async (query:string, organizationId::number):Promise<SearchResult[]>::",
        "searchLocations:310:async (query:string, organizationId::number):Promise<SearchResult[]>::",
        "countIssues:362:async (query:string, organizationId::Promise<number>::",
        "countMachines:379:async (query:string, organizationId::Promise<number>::",
        "countUsers:397:async (query:string, organizationId::Promise<number>::",
        "countLocations:415:async (query:string, organizationId::Promise<number>::"
      ]
    ],
    ".archived-tests-2025-08-23/e2e/helpers/auth.ts": [
      "t",
      [
        "loginAsTechnician:30:async (page:Page)::",
        "loginAsAdmin:52:async (page:Page)::",
        "loginAsUserWithPermissions:61:async (page:Page, permissions::{ id:string; name:string; email:string; },)::",
        "loginAsRegularUser:111:async (page:Page)::",
        "logout:120:async (page:Page)::",
        "setupTestIssue:129:async (page:Page, issueData?:::"
      ]
    ],
    ".archived-tests-2025-08-23/e2e/helpers/unified-dashboard.ts": [
      "t",
      [
        "loginAsUser:7:async (page:Page, userType::number = 3,):Promise<void>:clearSession,waitForAuthentication:",
        "waitForAuthentication:65:async (page:Page):::",
        "logout:76:async (page:Page, maxRetries::Promise<void>:clearSession,waitForLogout:",
        "waitForLogout:122:async (page:Page, timeout::Promise<void>::",
        "verifyPublicContent:150:async (page:Page, expect::Promise<void>::",
        "verifyAuthenticatedContent:161:async (page:Page, expect::number = 10000,):Promise<void>::",
        "verifyPublicOnlyContent:176:async (page:Page, expect::Promise<void>:verifyPublicContent:",
        "verifyNavigationState:188:async (page:Page, expect::boolean,):Promise<void>::",
        "clearSession:222:async (page:Page):::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/app/api/dev/__tests__/users-simple.test.ts": [
      "t",
      [
        "setNodeEnv:7:(value:string)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/app/dashboard/_components/__tests__/PrimaryAppBar.test.tsx": [
      "t",
      [
        "MockAuthProvider:48:({ children, user = createMockSupabaseUser()::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/app/machines/components/MachineCard.test.tsx": [
      "t",
      [
        "createMockMachine:36:(overrides:Partial<MachineWithRelations> = {},):::",
        "createMachineWithoutCustomName:120:():MachineWithRelations::"
      ],
      {
        "const": [
          "383",
          []
        ]
      }
    ],
    ".archived-tests-2025-08-23/sr/components/issues/__tests__/MachineSelector.test.tsx": [
      "t",
      [
        "createMockMachine:25:(overrides:Partial<MachineForIssues> = {},):::",
        "createMockMachines:38:(count = 3):MachineForIssues[]::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/components/locations/__tests__/LocationDetailView.test.tsx": [
      "t",
      [
        "createMockLocation:57:(overrides:any = {})::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/components/locations/__tests__/MachineGrid.test.tsx": [
      "t",
      [
        "createMockMachine:16:(overrides:any = {})::",
        "findMachineCard:261:(name:string)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/components/permissions/__tests__/PermissionGate.test.tsx": [
      "t",
      [
        "expectProtectedContentVisible:40:()::",
        "expectProtectedContentHidden:46:()::",
        "expectEditButtonVisible:52:()::",
        "expectAdminPanelHidden:58:()::",
        "expectCreateMachineVisible:64:()::",
        "expectFallbackVisible:70:()::",
        "expectFallbackHidden:76:()::",
        "expectPermissionCalled:82:(mock:ReturnType<typeof vi.fn>, permission:::",
        "expectEmptyBody:91:()::",
        "hasPermission:525:(permission:string)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/components/react-environment.test.tsx": [
      "t",
      [
        "SimpleComponent:13:()::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/hooks/__tests__/usePermissions.test.tsx": [
      "t",
      [
        "createWrapper:28:(options:{ userPermissions?::string; session?:any; injectPermissionDeps?:boolean; queryOptions?:{ isLoading?:boolean; isError?:boolean; error?:any }; } = {},)::",
        "DynamicWrapper:233:({ children, permissions, }:{ children::string[]; })::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/integration-t/comment.integration.test.ts": [
      "t",
      [
        "withCommentBusinessLogicSetup:83:async (workerDb, testFn)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/integration-t/cross-org-isolation.test.ts": [
      "t",
      [
        "integration:15:(PGlite limitation)::",
        "createMinimalTestData:47:async (db:typeof schema, primaryOrgId::string,)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/integration-t/machine.location.integration.test.ts": [
      "t",
      [
        "setupTestData:55:async (db:TestDatabase)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/integration-t/machine.owner.integration.test.ts": [
      "t",
      [
        "withMachineOwnerBusinessLogicSetup:81:async (workerDb, testFn):setupTestData:",
        "setupTestData:95:async (db:TestDatabase)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/integration-t/model.core.integration.test.ts": [
      "t",
      [
        "createTestContext:80:async (db:TestDatabase, organizationId:::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/integration-t/pinballMap.integration.test.ts": [
      "t",
      [
        "getSimpleSeededData:38:async (db:any)::",
        "createPinballMapTestContext:65:(db:TestDatabase, organizationId::string, permissions:string[] = [\"organization:manage\", \"location:edit\"],):TRPCContext:setMockPermissions:",
        "setMockPermissions:171:(permissions:string[])::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/integration-t/schema-migration-validation.integration.test.ts": [
      "t",
      [
        "createTestContext:30:async (_db:TestDatabase)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/lib/common/__tests__/organizationValidation.test.ts": [
      "t",
      [
        "createMockMembership:47:(overrides:Partial<OrganizationMembership> = {},):::",
        "createResourceOwnershipInput:68:(overrides:Partial<ResourceOwnershipInput> = {},):::",
        "createMembershipValidationInput:80:(overrides:Partial<MembershipValidationInput> = {},)::createMockMembership:",
        "createCrossOrganizationAccessInput:91:(overrides:Partial<CrossOrganizationAccessInput> = {},):::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/lib/issues/__tests__/assignmentValidation.test.ts": [
      "t",
      [
        "createTestUser:46:(overrides:Partial<User> = {}):::",
        "createTestMembership:53:(overrides:Partial<Membership> = {},)::createTestUser:",
        "createTestMachine:64:(overrides:Partial<Machine> = {}):::",
        "createTestIssue:73:(overrides:Partial<Issue> = {}):::",
        "createTestIssueStatus:84:(overrides:Partial<IssueStatus> = {},):::",
        "createTestPriority:94:(overrides:Partial<Priority> = {}):::",
        "createTestContext:102:(overrides:Partial<AssignmentValidationContext> = {},):::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/lib/issues/__tests__/creationValidation.test.ts": [
      "t",
      [
        "createMockMachine:27:(overrides:Partial<MachineOwnershipInput[\"machine\"]> = {},):::",
        "createMockDefaults:39:(overrides:Partial<IssueCreationDefaults> = {},):::",
        "createPublicIssueInput:55:(overrides:Partial<PublicIssueCreationInput> = {},):::",
        "createAuthenticatedIssueInput:65:(overrides:Partial<AuthenticatedIssueCreationInput> = {},):::",
        "createContext:75:(overrides:Partial<IssueCreationContext> = {},):::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/lib/issues/__tests__/statusValidation.test.ts": [
      "t",
      [
        "createMockStatus:23:(overrides:Partial<IssueStatus> = {}):::",
        "createStatusSet:32:():::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/lib/users/__tests__/roleManagementValidation.test.ts": [
      "t",
      [
        "createTestUser:43:(overrides:Partial<User> = {}):::",
        "createTestRole:50:(overrides:Partial<Role> = {}):::",
        "createAdminRole:59:(overrides:Partial<Role> = {}):::",
        "createMembership:68:(overrides:Partial<Membership> = {})::createTestRole,createTestUser:",
        "createAdminMembership:78:(overrides:Partial<Membership> = {},)::createAdminRole,createTestUser:",
        "createTestContext:94:(overrides:Partial<RoleManagementContext> = {},):::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/server/api/__tests__/msw.trpc.test.ts": [
      "t",
      [
        "creation:43:(without executing them)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/server/api/__tests__/trpc.permission.test.ts": [
      "t",
      [
        "supabaseUserToSession:18:(user:any)::",
        "createMockTRPCContext:51:(permissions:string[] = [], organizationId::string = SEED_TEST_IDS.USERS.ADMIN,):VitestMockContext & {\n  membership:{ roleId:string | null };\n  userPermissions:string[];\n}::",
        "createCompetitorOrgContext:123:(permissions:string[] = [])::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/server/api/routers/__tests__/collection.test.ts": [
      "t",
      [
        "setupTestData:174:async (db:TestDatabase)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/server/api/routers/__tests__/issue.confirmation.test.ts": [
      "t",
      [
        "createMockTRPCContext:316:(permissions:string[] = [], context?::OrganizationTRPCContext::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/server/api/routers/__tests__/issue.integration.test.ts": [
      "t",
      [
        "createTestContext:37:async (txDb:any, organizationId::string,)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/server/api/routers/__tests__/issue.notification.test.ts": [
      "t",
      [
        "getMockUser:58:(context:TestMockContext)::",
        "getMockMachine:64:(context:TestMockContext)::",
        "getMockIssue:71:(context:TestMockContext)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/server/api/routers/__tests__/issue.test.ts": [
      "t",
      [
        "createTestIssue:84:async (db:TestDatabase, overrides:::",
        "createPublicContext:110:async (db:TestDatabase, organizationId::Promise<TRPCContext>::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/server/api/routers/__tests__/model.core.test.ts": [
      "t",
      [
        "setupTestData:74:async (db:TestDatabase)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/server/api/routers/__tests__/notification.test.ts": [
      "t",
      [
        "setupTestData:66:async (db:TestDatabase)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/server/api/routers/utils/__tests__/commentService.integration.test.ts": [
      "t",
      [
        "createTestContext:72:async (db:TestDatabase, organizationId:::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/server/api/routers/utils/__tests__/commentValidation.test.ts": [
      "t",
      [
        "createValidCommentData:51:(overrides:Partial<CommentData> = {},):::",
        "createValidContext:64:(overrides:Partial<ValidationContext> = {},):::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/server/auth/__tests__/permissions.constants.test.ts": [
      "t",
      [
        "hasCycle:125:(permission:string)::hasCycle:"
      ]
    ],
    ".archived-tests-2025-08-23/sr/server/auth/__tests__/uploadAuth.test.ts": [
      "t",
      [
        "createMockSupabaseUser:58:(overrides:Partial<PinPointSupabaseUser> = {}, organizationId::PinPointSupabaseUser::",
        "createCompetitorOrgUser:88:(overrides:Partial<PinPointSupabaseUser> = {},)::createMockSupabaseUser:",
        "createMockRequest:100:(headers:Record<string, string> = {}):::",
        "createMockDrizzleClient:108:():DrizzleClient::",
        "createMockOrganization:121:(organizationId:string = SEED_TEST_IDS.ORGANIZATIONS.primary,)::",
        "createCompetitorOrganization:138:():createMockOrganization:",
        "createMockMembership:142:(userId:string = SEED_TEST_IDS.USERS.ADMIN, organizationId::string[] = [\"upload:create\", \"file:manage\"],)::",
        "createCompetitorMembership:163:(permissions:string[] = [\"upload::createMockMembership:"
      ]
    ],
    ".archived-tests-2025-08-23/sr/server/db/__tests__/drizzle-singleton.test.ts": [
      "t",
      [
        "importDrizzleModule:94:async ()::",
        "resetSingleton:99:()::",
        "createMockDrizzleInstance:28:()::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/server/db/__tests__/drizzle-test-helpers.ts": [
      "t",
      [
        "configureDevelopmentMocks:54:():void::",
        "configureProductionMocks:81:():void::",
        "configureCIMocks:111:():void::",
        "configureCustomEnvironment:144:(config:EnvironmentConfig):::",
        "createLocalhost5432URL:182:(database = \"postgres\"):string::",
        "createRemoteURL:202:(host:string, database = \"postgres\"):::",
        "create127001URL:221:(database = \"postgres\"):string::",
        "expectSSLConfiguration:243:(sslSetting:SSLSetting):::",
        "expectPoolConfiguration:266:(maxConnections:number):::",
        "expectTimeoutConfiguration:291:(idle:number, connect::void::",
        "expectLoggingConfiguration:318:(enabled:boolean):::",
        "importDrizzleModule:348:async ():Promise<::",
        "setupDrizzleTestEnvironment:449:(customEnvSetup?:()::",
        "validateDrizzleConfiguration:489:(expectedConfig:{ ssl::number; idleTimeout:number; connectTimeout:number; logging:boolean; }):void:expectLoggingConfiguration,expectPoolConfiguration,expectSSLConfiguration,expectTimeoutConfiguration:",
        "testSingletonBehavior:521:async (moduleImporter:()::",
        "createMockPostgresInstance:363:()::",
        "createMockDrizzleInstance:370:()::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/server/services/__tests__/roleService.test.ts": [
      "t",
      [
        "createMockDrizzleClient:64:()::"
      ],
      {
        "covering": [
          "4",
          []
        ]
      }
    ],
    ".archived-tests-2025-08-23/sr/test/VitestTestWrapper.tsx": [
      "t",
      [
        "MockSessionProvider:47:({ children, }:{ children::Session | null; }):React.JSX.Element::",
        "createMockUser:58:(overrides:Partial<User> = {}):::",
        "createMockMembership:76:(overrides:Partial<{ id::string; organizationId:string; role:string; permissions:string[]; createdAt:Date; updatedAt:Date; }> = {},):::",
        "createMockSessionHook:111:(session:Session | null, sessionLoading = false,)::",
        "createMockMembershipQuery:132:(permissions:string[] = [], role = \"Member\", options::boolean; isError?:boolean; error?:Error | null; } = {},)::",
        "createMockSupabaseUser:162:(overrides:Partial<PinPointSupabaseUser> = {},):::",
        "createServerMockContext:218:(overrides:Partial<ServerMockContext> = {},)::createMockSupabaseUser:",
        "VitestTestWrapper:317:({ children, session = { user:createMockUser()::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/constants/seed-test-ids.ts": [
      "t",
      [
        "createMockAdminContext:316:():TestMockContext::",
        "createMockMemberContext:323:(memberNumber:1 | 2 = 1,):::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/context.ts": [
      "t",
      [
        "createTestContext:7:():::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/database-test-helpers.ts": [
      "t",
      [
        "cleanupTestData:82:async (db:DrizzleClient, testIds::Promise<void>::",
        "createTestOrganization:256:async (db:DrizzleClient, orgType::Promise<Organization>::",
        "createTestUser:293:async (db:DrizzleClient, overrides::Promise<User>::",
        "createTestUserWithMembership:343:async (db:DrizzleClient, organizationId::\"admin\" | \"manager\" | \"member\" = \"member\", overrides:Partial<User> = {},):Promise<::",
        "createTestMachine:407:async (db:DrizzleClient, organizationId::Partial<Machine> = {},):Promise<::",
        "createTestIssue:502:async (db:DrizzleClient, machineId::string, overrides:Partial<Issue> = {},):Promise<::",
        "createMultiTenantTestEnvironment:624:async (db:DrizzleClient,):::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/examples/dual-track-testing-examples.test.ts": [
      "t",
      [
        "calculateIssuePriority:370:(params:{ downtime::string; businessImpact:string; }):string::",
        "escalateIssueIfNeeded:385:async (db:any, issueId::{ downtime:number; customerComplaints:number; revenueImpact:number; },)::",
        "getIssuesForMachine:427:async (db:any, machineId:::",
        "calculateMaintenanceSchedule:438:(params:{ machineAge::number; lastMaintenance:Date; })::",
        "generateOrganizationalReport:463:async (db:any)::",
        "calculateAvgResolutionTime:477:(issues:any[])::",
        "getTopMachinesByIssues:490:(issues:any[])::"
      ],
      {
        "ReportingService": [
          "505",
          [
            "constructor:506:(private db:any):groupByPriority:",
            "generateReport:507:async ()::",
            "__init__:506:(private db:any):groupByPriority:"
          ]
        ]
      }
    ],
    ".archived-tests-2025-08-23/sr/test/factories/roleFactory.ts": [
      "t",
      [
        "create:346:(overrides:Partial<TestOrganization> = {},):::",
        "createIssuePermissions:93:():TestPermission[]::",
        "createMachinePermissions:104:():TestPermission[]::",
        "createLocationPermissions:113:():TestPermission[]::",
        "createAttachmentPermissions:122:():TestPermission[]::",
        "createAdminPermissions:130:():TestPermission[]::",
        "createAllPermissions:141:():TestPermission[]::",
        "createUnauthenticatedRole:172:(organizationId = \"org-1\",):TestRole::",
        "createMemberRole:184:(organizationId = \"org-1\"):TestRole::",
        "createTechnicianRole:199:(organizationId = \"org-1\"):TestRole::",
        "createAdminRole:220:(organizationId = \"org-1\"):TestRole::",
        "createCustomRole:230:(name:string, permissions::TestRole:create:",
        "createSystemRoleSet:244:(organizationId = \"org-1\"):TestRole[]::",
        "createWithMemberCount:253:(memberCount:number, overrides::TestRole:create:",
        "createWithRole:526:(roleName:\"Unauthenticated\" | \"User\" | \"Technician\" | \"Admin\", organizationId = \"org-1\",)::",
        "createWithUser:297:(userId:string, userName::string, role:TestRole,):TestMembership:create:",
        "createMultipleForOrganization:316:(organizationId:string, userCount = 3,)::createSystemRoleSet,createWithUser:",
        "createWithRoles:360:(name = \"Test Organization\", subdomain = \"test\",):TestOrganization::",
        "createWithMemberships:375:(name = \"Test Organization\", subdomain = \"test\", memberCount = 3,):TestOrganization::",
        "createMultipleForTesting:396:(count = 2):TestOrganization[]::",
        "createMatrix:419:():Record<string, string[]>::",
        "getRolePermissions:466:(roleName:string)::createMatrix:",
        "hasPermission:471:(roleName:string, permission::boolean:getRolePermissions:",
        "getPermissionDependencies:476:():Record<string, string[]>::",
        "createWithPermissions:497:(permissions:string[], organizationId = \"org-1\",)::",
        "createAdmin:534:(organizationId = \"org-1\"):createWithRole:",
        "createTechnician:538:(organizationId = \"org-1\"):createWithRole:",
        "createUser:542:(organizationId = \"org-1\"):createWithRole:",
        "createUnauthenticated:546:(organizationId = \"org-1\"):createWithRole:"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/helpers/archetype-validator.ts": [
      "t",
      [
        "validateTestArchetype:259:(filePath:string, fileContent?::ValidationResult:detectArchetype,validateArchetypeCompliance,validateErrorHandling,validateImportStructure,validateMemorySafety,validatePerformancePatterns,validateRLSContext:",
        "detectArchetype:307:(content:string, _fileName::number | null::",
        "validateMemorySafety:345:(content:string, filePath::ValidationResult,):void:getLineNumber:",
        "validateRLSContext:413:(content:string, filePath::ValidationResult,):void::",
        "validateArchetypeCompliance:459:(content:string, filePath::ValidationResult,):void::",
        "validateImportStructure:504:(content:string, filePath::ValidationResult,):void:getLineNumber:",
        "validateErrorHandling:554:(content:string, filePath::ValidationResult,):void::",
        "validatePerformancePatterns:593:(content:string, filePath::ValidationResult,):void::",
        "getLineNumber:644:(content:string, index::number::",
        "validateTestFiles:651:(filePaths:string[],)::validateTestArchetype:",
        "generateValidationReport:691:(results:Map<string, ValidationResult>,):::",
        "validateSingleFile:796:(filePath:string)::generateValidationReport,validateTestArchetype:"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/helpers/createSeededAdminTestContext.ts": [
      "t",
      [
        "createSeededAdminTestContext:72:async (txDb:TestDatabase, organizationId::string, options:AdminContextOptions = {},):Promise<SeededAdminTestContext>::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/helpers/createSeededCollectionTestContext.ts": [
      "t",
      [
        "createPublicTestContext:76:async (txDb:TestDatabase, organizationId::Promise<SeededCollectionTestContext>::",
        "createSeededCollectionTestContext:178:async (txDb:TestDatabase, organizationId::string, options:SeededCollectionTestOptions = {},):Promise<SeededCollectionTestContext>::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/helpers/createSeededIssueTestContext.ts": [
      "t",
      [
        "createSeededIssueTestContext:61:async (txDb:TestDatabase, organizationId::string,):Promise<SeededIssueTestContext>::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/helpers/createSeededLocationTestContext.ts": [
      "t",
      [
        "createSeededLocationTestContext:55:async (db:TestDatabase, organizationId::string, options:CreateSeededLocationTestContextOptions = {},):Promise<TRPCContext>::",
        "createPrimaryAdminContext:187:async (db:TestDatabase, options?::Promise<TRPCContext>:createSeededLocationTestContext:",
        "createCompetitorAdminContext:202:async (db:TestDatabase, options?::Promise<TRPCContext>:createSeededLocationTestContext:",
        "createPrimaryMemberContext:217:async (db:TestDatabase, memberNumber::CreateSeededLocationTestContextOptions,):Promise<TRPCContext>:createSeededLocationTestContext:"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/helpers/createSeededMachineTestContext.ts": [
      "t",
      [
        "createSeededMachineTestContext:55:async (db:TestDatabase, organizationId::string, options:CreateSeededMachineTestContextOptions = {},):Promise<TRPCContext>::",
        "createPrimaryAdminContext:182:async (db:TestDatabase, options?::Promise<TRPCContext>:createSeededMachineTestContext:",
        "createCompetitorAdminContext:197:async (db:TestDatabase, options?::Promise<TRPCContext>:createSeededMachineTestContext:",
        "createPrimaryMemberContext:212:async (db:TestDatabase, memberNumber::CreateSeededMachineTestContextOptions,):Promise<TRPCContext>:createSeededMachineTestContext:"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/helpers/createSeededNotificationTestContext.ts": [
      "t",
      [
        "createSeededNotificationTestContext:13:async (txDb:TestDatabase, organizationId::string, options?:CreateSeededNotificationTestContextOptions,):Promise<TRPCContext>::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/helpers/integration-test-seeds.ts": [
      "t",
      [
        "seedProductionInfrastructure:44:async (db:TestDatabase,):::",
        "seedProductionSampleData:60:async (db:TestDatabase, organizationId::Promise<void>::",
        "seedTestInfrastructure:81:async (db:TestDatabase,)::seedProductionInfrastructure:",
        "seedTestSampleData:92:async (db:TestDatabase, organizationId::Promise<void>:seedProductionSampleData:",
        "seedCompleteTestData:104:async (db:TestDatabase,)::seedTestInfrastructure,seedTestSampleData:"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/helpers/multi-tenant-test-helpers.ts": [
      "t",
      [
        "auditMultiTenantSecurity:101:async (db:TestDatabase, options::number; testDataSize?:\"small\" | \"medium\" | \"large\"; includePerformance?:boolean; } = {},):Promise<SecurityAuditResult>:auditTableIsolation,createAuditTestData,getDataSizeConfig,measureRLSPerformance:",
        "testPermissionBoundaries:185:async (db:TestDatabase, userId::string, permissionSet:string[],):Promise<PermissionTestResult[]>::",
        "testCrossOrgAccess:327:async (db:TestDatabase, sourceOrg::OrgTestContext,):Promise<CrossOrgAccessResult[]>::",
        "measureRLSPerformance:411:async (db:TestDatabase, table::string; schema:any }, org:OrgTestContext,):Promise<::",
        "validateRLSPolicies:498:async (db:TestDatabase):::",
        "getDataSizeConfig:568:(size:\"small\" | \"medium\" | \"large\")::",
        "createAuditTestData:582:async (db:TestDatabase, org::{ locations:number; machines:number; issues:number },)::",
        "auditTableIsolation:637:async (db:TestDatabase, table::string; schema:any }, testOrgs:OrgTestContext[],):Promise<SecurityViolation[]>::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/helpers/organization-context.ts": [
      "t",
      [
        "createOrgContext:83:async (db:TestDatabase, orgSuffix:::",
        "setupMultiOrgContext:400:async (db:TestDatabase, count = 2,)::createOrgContext:",
        "createOrgTestData:422:async (db:TestDatabase, orgContext::{ locationCount?:number; machineCount?:number; issueCount?:number; } = {},):Promise<::",
        "verifyOrgIsolation:547:async (db:TestDatabase, org1Id::string,):Promise<::",
        "getUserMembership:632:async (db:TestDatabase, userId::string,)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/helpers/pglite-test-setup.ts": [
      "t",
      [
        "applyDrizzleSchema:47:async (db:TestDatabase):::",
        "verifyMigrationComplete:68:async (db:TestDatabase):::",
        "createTestDatabase:120:async ():Promise<TestDatabase>::",
        "configureForBusinessLogicTesting:150:async (db:TestDatabase,):::",
        "createCleanTestDatabase:221:async ():Promise<::",
        "createInfrastructureOnlyTestDatabase:254:async ():Promise<::",
        "createSeededTestDatabase:279:async ():Promise<::",
        "withTransaction:329:async (db:TestDatabase, testFn::TestDatabase)::",
        "cleanupTestDatabase:358:async (db:TestDatabase):::",
        "isRLSBypassed:388:async (db:TestDatabase):::",
        "getCurrentTestRole:406:async (db:TestDatabase,):::",
        "getCurrentTestMode:425:async (db:TestDatabase,):::",
        "verifyIntegrationTesterMode:447:async (db:TestDatabase):::",
        "getIntegrationTesterDatabaseUrl:501:():string::",
        "verifyIntegrationTesterSetup:524:async ():Promise<boolean>::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/helpers/rls-security-context.ts": [
      "t",
      [
        "withRLSSecurityContext:27:async (db:TestDatabase, context::(db:TestDatabase):esc:",
        "clearRLSSecurityContext:53:async (db:TestDatabase):::",
        "esc:33:(v:string)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/helpers/rls-test-context.ts": [
      "t",
      [
        "createTestUser:149:(userId:string, organizationId::{ email?:string; name?:string; role?:string; } = {},):RLSTestUser::",
        "withTestUser:203:async (userId:string, organizationId::()::",
        "withRLSContext:266:async (db:TestDatabase, userId::string, operation:(db:TestDatabase)::",
        "verifyRLSContext:318:async (db:TestDatabase, expected::string; userId?:string; role?:string; email?:string; },):Promise<void>::",
        "withAdminContext:382:async (db:TestDatabase, operation::TestDatabase)::",
        "withMemberContext:403:async (db:TestDatabase, operation::TestDatabase)::",
        "withFullRLSContext:448:async (db:TestDatabase, userId::string, operation:(db:TestDatabase)::",
        "verifyOrganizationalIsolation:526:async (db:TestDatabase, testFunction::TestDatabase)::",
        "mockNextHeaders:579:():void::"
      ],
      {
        "RLSContextManager": [
          "84",
          [
            "setUser:87:(user:RLSTestUser):void::",
            "clearUser:91:():void::",
            "getCurrentUser:95:():RLSTestUser | null::",
            "getMockSupabaseResponse:99:():MockSupabaseAuthResponse::",
            "getMockSupabaseClient:113:():MockSupabaseClient::",
            "setOriginalCreateClient:128:(original:unknown):void::",
            "getOriginalCreateClient:132:():unknown::"
          ]
        ]
      }
    ],
    ".archived-tests-2025-08-23/sr/test/helpers/roleTestHelpers.ts": [
      "t",
      [
        "getPermissionTestScenarios:18:(requiredPermission:string):::",
        "getRoleTestScenarios:51:(requiredPermission:string):::",
        "getMultiTenantTestScenarios:71:():::",
        "createPermissionTestContexts:102:(permission:string):::",
        "createMultiTenantTestContexts:127:():::",
        "validatePermissionInheritance:156:(role:TestRole, expectedPermissions::boolean::",
        "validatePermissionDependencies:169:(permissions:string[]):::",
        "generatePermissionCombinations:194:():::",
        "getPermissionEscalationScenarios:270:():::",
        "validateRoleSystemIntegrity:317:(roles:TestRole[]):::",
        "createTestSuiteData:366:():::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/helpers/session-context.ts": [
      "t",
      [
        "setTestSession:26:async (db:TestDatabase, orgId::string, role?:string, additionalContext?:Record<string, string>,):Promise<void>::",
        "getCurrentSession:63:async (db:TestDatabase):::",
        "clearTestSession:107:async (db:TestDatabase):::",
        "escalate:531:async (to:\"member\" | \"admin\")::"
      ],
      {
        "MultiContextManager": [
          "284",
          [
            "constructor:292:(private db:TestDatabase)::",
            "switchTo:319:async (contextId:string):Promise<void>::",
            "getContextIds:341:():string[]::",
            "clearContexts:348:():void::",
            "__init__:292:(private db:TestDatabase)::"
          ]
        ]
      }
    ],
    ".archived-tests-2025-08-23/sr/test/helpers/supabase-test-setup.ts": [
      "t",
      [
        "ensureTestBucket:32:async ():Promise<void>::",
        "clearTestStorage:56:async ():Promise<void>::",
        "getAllFilePaths:98:async (bucketName:string, folder::Promise<string[]>:getAllFilePaths:",
        "createTestBucket:132:async (bucketName:string, options::boolean; fileSizeLimit?:number; allowedMimeTypes?:string[]; } = {},):Promise<void>::",
        "deleteTestBucket:160:async (bucketName:string)::clearStorageBucket:",
        "clearStorageBucket:175:async (bucketName:string)::getAllFilePaths:",
        "uploadTestFile:192:async (bucketName:string, filePath::File | Blob,):Promise<string>::",
        "verifyFileExists:218:async (bucketName:string, filePath::Promise<boolean>::",
        "getTestFileUrl:235:(bucketName:string, filePath::string::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/helpers/test-id-generator.ts": [
      "t",
      [
        "generateTestId:38:(prefix = \"test\"):never::",
        "generateTestEmail:45:(prefix = \"test\"):never::",
        "generateTestSubdomain:52:(prefix = \"test\"):never::",
        "generateTestIds:59:(count:number, prefix = \"test\"):::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/helpers/worker-scoped-db.ts": [
      "t",
      [
        "withIsolatedTest:84:async (db:TestDatabase, testFn::TestDatabase)::",
        "withExplicitRollback:161:async (db:TestDatabase, testFn::TestDatabase)::",
        "_cleanupAllTestData:207:async (_db:TestDatabase):::",
        "setTestSession:264:async (db:TestDatabase, orgId::string, role?:string,):Promise<void>::",
        "withRLSTest:329:async (db:TestDatabase, orgId::(tx:TestDatabase):withIsolatedTest:",
        "withMultiOrgTest:348:async (db:TestDatabase, contexts::string; role?:string; userId?:string }[], testFn:( setContext:(contextIndex:number):setContext,setTestSession,withIsolatedTest:",
        "withBusinessLogicTest:401:async (db:TestDatabase, testFn::TestDatabase):withIsolatedTest:",
        "withRLSAwareTest:430:async (db:TestDatabase, orgId::(tx:TestDatabase):withRLSTest:",
        "withCrossOrgTest:454:async (db:TestDatabase, contexts::string; role?:string; userId?:string }[], testFn:( setContext:(contextIndex:number):withMultiOrgTest:",
        "withRLSEnabledTest:475:async (db:TestDatabase, testFn::TestDatabase):withIsolatedTest:",
        "setContext:357:async (contextIndex:number)::setTestSession:"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/mockContext.ts": [
      "t",
      [
        "createMockContext:94:():MockContext::",
        "resetMockContext:153:(ctx:MockContext):::",
        "createMockServiceFactory:47:():DeepMockProxy<ServiceFactory>::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/mockUtils.ts": [
      "t",
      [
        "createMockUser:147:(overrides:Partial<MockUser> = {}):::",
        "createMockStatus:160:(overrides:Partial<MockIssueStatus> = {},):::",
        "createMockPriority:176:(overrides:Partial<MockPriority> = {},):::",
        "createMockModel:192:(overrides:Partial<MockModel> = {}):::",
        "createMockLocation:205:(overrides:Partial<MockLocation> = {},):::",
        "createMockMachine:219:(overrides:Partial<MockMachine> = {},)::createMockLocation,createMockModel:",
        "createMockIssue:244:(overrides:Partial<MockIssue> = {})::createMockMachine,createMockPriority,createMockStatus,createMockUser:",
        "createMockIssuesList:282:(options:MockFactoryOptions<MockIssue> = {},)::createMockIssue:",
        "createMockLocations:380:(options:MockFactoryOptions<MockLocation> = {},)::createMockLocation:",
        "createMockStatuses:403:(options:MockFactoryOptions<MockIssueStatus> = {},)::createMockStatus:",
        "createMockMachines:428:(options:MockFactoryOptions<MockMachine> = {},)::createMockMachine,createMockModel:",
        "createMockUsers:451:(options:MockFactoryOptions<MockUser> = {},)::createMockUser:",
        "createMockTRPCQueryResult:476:(data:T, options::MockTRPCQueryResult<T>::",
        "createMockTRPCLoadingResult:495:():MockTRPCQueryResult<\n  T | undefined\n>::",
        "createMockTRPCErrorResult:510:(error:Error = new Error(\"Mock error\")::",
        "createIssueListTRPCMocks:526:():::",
        "createPermissionScenario:624:(permissions:string[], role = \"Custom\",):::",
        "createRealisticIssueDataSet:649:():::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/msw/handlers.ts": [
      "t",
      [
        "createMockUser:31:(overrides:Partial<User> = {}):::",
        "createMockOrganization:47:(overrides:Partial<Organization> = {},):::",
        "createMockMembership:59:(overrides:{ userId?::string; organizationId?:string; permissions?:string[]; } = {},)::",
        "mockUserProfile:77:(user:Partial<User> = {})::",
        "mockCurrentMembership:104:(membership:Parameters<typeof createMockMembership>[0] = {},)::",
        "mockCurrentOrganization:115:(org:Partial<Organization> = {})::",
        "mockUserWithPermissions:121:(permissions:string[])::",
        "mockAdminUser:125:()::",
        "mockUserWithoutPermissions:148:()::",
        "mockUnauthorizedError:155:()::",
        "mockForbiddenError:161:(permission:string)::",
        "mockNotFoundError:167:(resource:string)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/msw/setup.ts": [
      "t",
      [
        "getTestBaseUrl:8:():string::",
        "ensureListening:41:()::",
        "ensureClosed:51:()::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/permissionTestHelpers.ts": [
      "t",
      [
        "createAuthenticatedContext:101:(permissions:readonly string[] = PERMISSION_SCENARIOS.MEMBER.permissions,):::",
        "createPublicContext:189:():VitestMockContext &::",
        "createCrossOrgContext:209:(organizationId = \"other-org\", permissions:readonly string[] = PERMISSION_SCENARIOS.MEMBER.permissions,):::",
        "createPermissionTestCases:243:(requiredPermission:string, additionalCases::PermissionTestCase[]::",
        "expectAuthenticationRequired:281:async (routerCall:(caller::createPublicContext:",
        "expectOrganizationRequired:295:async (routerCall:(caller::createAuthenticatedContext:",
        "expectPermissionRequired:312:async (routerCall:(caller::createAuthenticatedContext:",
        "expectOrganizationIsolation:333:async (routerCall:(caller:::",
        "createPermissionTestSuite:358:(name:string, options::createAuthenticatedContext,createPermissionTestCases,expectAuthenticationRequired,expectOrganizationIsolation,expectOrganizationRequired,expectPermissionRequired:",
        "setupPermissionMocks:485:(context:VitestMockContext, mockData::any; machine?:any; location?:any; membership?:any; [key:string]:any; },)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/routerTestPatterns.ts": [
      "t",
      [
        "createRouterTestContext:41:(router:AppRouter):::",
        "testAuthenticatedProcedure:66:(testName:string, procedureCall::RouterTestContext)::",
        "testPublicProcedure:106:(testName:string, procedureCall::RouterTestContext)::",
        "testAdminOnlyProcedure:135:(testName:string, procedureCall::RouterTestContext)::",
        "testServiceIntegration:174:(serviceName:keyof VitestMockContext[\"services\"], methodName::{ mockReturnValue?:any; expectedCallArgs?:any[]; mockSetup?:(mockService:any)::",
        "testInputValidation:220:(procedureCall:(input::RouterTestContext):createRouterTestContext:",
        "testOrganizationScoping:250:(procedureCall:(context:::",
        "createRouterTestSuite:397:(options:RouterTestSuiteOptions<TInput, TOutput>,)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/seed-data-helpers.ts": [
      "t",
      [
        "getCachedSeedData:55:async (cacheKey:string, fetchFn:::",
        "clearSeedDataCache:71:():void::",
        "getUserWithRoles:82:async (email:string):::",
        "getSeededAdmin:152:async ():Promise<SeededUser>::",
        "getSeededMember:162:async ():Promise<SeededUser>::",
        "getSeededPlayer:172:async ():Promise<SeededUser>::",
        "getSeededUserByEmail:181:async (email:string)::getCachedSeedData,getUserWithRoles:",
        "getSeededOrganization:208:async ():Promise<SeededOrganization>::",
        "getSeededIssue:260:async (titleContains:string,)::getCachedSeedData:",
        "getSeededIssues:329:async (limit = 10):Promise<SeededIssue[]>::",
        "getSeededOrganizationId:392:async ():Promise<string>::",
        "getSeededIssueStatuses:400:async ():Promise<IssueStatus[]>::",
        "getSeededPriorities:413:async ():Promise<Priority[]>::",
        "createSupabaseUserFromSeeded:456:(user:SeededUser):::",
        "getSeededAdminSupabaseUser:500:async ():Promise<SupabaseUser>::",
        "getSeededMemberSupabaseUser:508:async ():Promise<SupabaseUser>::",
        "getSeededPlayerSupabaseUser:516:async ():Promise<SupabaseUser>::",
        "setupAuthTestData:529:async ():createSupabaseUserFromSeeded,getSeededAdmin,getSeededMember,getSeededOrganization,getSeededPlayer:",
        "cleanupSeedDataHelpers:560:():void::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/setup/issueListTestSetup.ts": [
      "t",
      [
        "createIssueListMocks:49:():IssueListMocks::",
        "setupIssueListTest:191:(scenario:IssueListTestScenario, mocks::::",
        "createWorkflowIssues:308:():ReturnType<\n  typeof createMockIssuesList\n>::",
        "createDefaultMachineData:110:():{\n  id::string;\n  organizationId:string;\n  modelId:string;\n  locationId:string;\n  ownerId:null;\n  model:{\n    id:string;\n    name:string;\n    manufacturer:string;\n    year:number;\n  };\n  location:{\n    id:string;\n    name:string;\n    organizationId:string;\n  };\n}[]::",
        "setupDefaultResponses:230:():void::",
        "resetMocks:271:():void::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/setup/viTestMocks.ts": [
      "t",
      [
        "setupNavigationMocks:24:(mocks:IssueListMocks):::",
        "setupTRPCMocks:37:(mocks:IssueListMocks):::",
        "setupPermissionMocks:105:(mocks:IssueListMocks):::",
        "setupAllIssueListMocks:115:(mocks:IssueListMocks)::setupNavigationMocks,setupPermissionMocks,setupTRPCMocks:"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/templates/02-service-business-logic-test.template.ts": [
      "t",
      [
        "createTestData:316:async (db:any):::"
      ],
      {
        "name": [
          "348",
          []
        ]
      }
    ],
    ".archived-tests-2025-08-23/sr/test/templates/03-pglite-integration-test.template.ts": [
      "t",
      [
        "createBasicTestData:393:async (db:any):::",
        "createComplexTestDataset:418:async (db:any)::createBasicTestData:"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/templates/04-react-component-unit-test.template.tsx": [
      "t",
      [
        "ThrowingComponent:391:():JSX.Element::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/testDataFactories.ts": [
      "t",
      [
        "createIssueFactory:18:(options:FactoryOptions = {})::",
        "createSingleIssue:21:(customOverrides:Record<string, any> = {})::",
        "createCommentFactory:117:(options:FactoryOptions = {})::",
        "createSingleComment:120:(customOverrides:Record<string, any> = {})::",
        "createUserFactory:179:(options:FactoryOptions = {})::",
        "createMachineFactory:262:(options:FactoryOptions = {})::",
        "createModelFactory:305:(options:FactoryOptions = {})::",
        "createLocationFactory:331:(options:FactoryOptions = {})::",
        "createStatusFactory:363:(options:FactoryOptions = {})::",
        "createPriorityFactory:386:(options:FactoryOptions = {})::",
        "createRoleFactory:404:(options:FactoryOptions = {})::",
        "createOrganizationFactory:427:(options:FactoryOptions = {})::",
        "createSessionFactory:443:(options:FactoryOptions = {})::",
        "createAttachmentFactory:455:(options:FactoryOptions = {})::",
        "createSingleAttachment:458:(customOverrides:Record<string, any> = {},)::",
        "createActivityFactory:486:(options:FactoryOptions = {})::",
        "createSingleActivity:489:(customOverrides:Record<string, any> = {})::",
        "getSingleIssue:519:(overrides:Record<string, any> = {})::",
        "createComplexIssueFactory:526:(options:FactoryOptions = {})::",
        "createIssueWithMixedComments:542:(options:FactoryOptions = {})::",
        "createIssueRouterContext:605:(options:{ userId?::string; permissions?:string[]; role?:string; } = {},):createUserFactory:",
        "createMockServices:779:():any::",
        "createTRPCCallerForIssues:807:(options:{ permissions?::string; organizationId?:string; role?:string; mockContext?:any; } = {},):createIssueRouterContext,createMockServices:",
        "createIssueDbMocks:856:(context:any)::"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/utils/mock-ids.ts": [
      "t",
      [
        "createNumberedId:13:(pattern:string, number::string::",
        "createAdminId:70:(base:string, suffix::string::",
        "createNumberedVariation:77:(pattern:string, number::string:createNumberedId:"
      ]
    ],
    ".archived-tests-2025-08-23/sr/test/vitestMockContext.ts": [
      "t",
      [
        "createVitestMockContext:112:():VitestMockContext::"
      ]
    ],
    "e2e/auth-login-flow.e2e.test.ts": [
      "t",
      [
        "testing:20:(Archetype 1)::",
        "authenticateAsTestAdmin:469:async (page:Page)::",
        "authenticateAsTestMember:502:async (page:Page)::"
      ]
    ],
    "e2e/helpers/unified-dashboard.ts": [
      "t",
      [
        "logout:6:async (page:Page)::"
      ]
    ],
    "middleware.ts": [
      "t",
      [
        "middleware:8:async (request:NextRequest)::createServerClient,getBaseDomain,getSubdomain,setAll:",
        "getSubdomain:89:(host:string):::",
        "getBaseDomain:114:(host:string):::"
      ]
    ],
    "s/convert-snake-case.ts": [
      "t",
      [
        "parseArgs:47:():Options::",
        "log:72:(...m:any[])::",
        "collectSchemaColumns:77:async ():Promise<Set<string>>::",
        "snakeToCamel:99:(s:string):::",
        "buildMapping:114:async ():Promise<MappingEntry[]>::",
        "listSourceFiles:138:():string[]::",
        "includeFilter:159:(path:string):::",
        "applyMappingAll:173:(content:string, mapping::::",
        "applyMappingProperties:201:(content:string, mapping::::",
        "applyMappingToContent:248:(content:string, mapping::Mode,):::",
        "processFiles:258:async ():applyMappingToContent,buildMapping,listSourceFiles,log:"
      ]
    ],
    "s/generate-sql-constants.ts": [
      "t",
      [
        "generateSQLConstants:22:()::",
        "main:191:():generateSQLConstants:"
      ]
    ],
    "s/safe-curl.sh": [
      "s",
      [
        "show_usage:0:()::",
        "normalize_url:0:()::",
        "extract_host:0:()::",
        "extract_port:0:()::",
        "extract_protocol:0:()::",
        "is_host_allowed:0:()::",
        "is_protocol_allowed:0:()::",
        "is_port_allowed:0:()::"
      ]
    ],
    "s/safe-psql.sh": [
      "s",
      [
        "show_usage:0:()::",
        "is_host_allowed:0:()::",
        "is_database_allowed:0:()::"
      ]
    ],
    "s/setup-pgtap.sh": [
      "s",
      [
        "print_status:0:()::",
        "print_warning:0:()::",
        "print_error:0:()::",
        "detect_os:0:()::",
        "install_pgtap:0:()::",
        "install_pg_prove:0:()::",
        "setup_test_database:0:():print_error:",
        "create_test_runner:0:()::",
        "update_package_json:0:()::",
        "create_ci_config:0:()::",
        "verify_installation:0:()::",
        "main:0:()::"
      ]
    ],
    "s/validate-drizzle-crud.ts": [
      "t",
      [
        "main:848:async ()::"
      ],
      {
        "DrizzleCRUDValidator": [
          "39",
          [
            "constructor:46:(minimalMode = false)::",
            "testConnection:60:async ():Promise<boolean>::",
            "testInsertOperations:132:async ():Promise<void>::",
            "testSelectOperations:244:async ():Promise<void>::",
            "testUpdateOperations:348:async ():Promise<void>::",
            "testDeleteOperations:443:async ():Promise<void>::",
            "testTransactionOperations:550:async ():Promise<void>::",
            "generateReport:668:():void::",
            "runMinimalTests:739:async ():Promise<void>::",
            "runAllTests:815:async ():Promise<void>::",
            "__init__:46:(minimalMode = false)::"
          ]
        ]
      }
    ],
    "sr/app/_components/DevLoginCompact.tsx": [
      "t",
      [
        "DevLoginCompact:33:({ onLogin:_onLogin, }::React.ReactNode::",
        "handleLogin:67:async (email:string):::",
        "getRoleColor:123:(role:string | null,):::",
        "fetchUsers:43:async ():Promise<void>::"
      ]
    ],
    "sr/app/_components/LoginModal.tsx": [
      "t",
      [
        "LoginModal:9:({ onLogin }:LoginModalProps):::"
      ]
    ],
    "sr/app/api/dev/users/route.ts": [
      "t",
      [
        "GET:11:async ():Promise<NextResponse>::"
      ]
    ],
    "sr/app/api/health/route.ts": [
      "t",
      [
        "GET:7:async ():Promise<NextResponse>::"
      ]
    ],
    "sr/app/api/qr/[qrCodeId]/route.ts": [
      "t",
      [
        "GET:8:async (_request:NextRequest, { params }::Promise<{ qrCodeId:string }> },):Promise<NextResponse>::",
        "HEAD:56:async (_request:NextRequest, { params }::Promise<{ qrCodeId:string }> },):Promise<NextResponse>::"
      ]
    ],
    "sr/app/api/trpc/[trpc]/route.ts": [
      "t",
      [
        "createContext:14:async (req:NextRequest):::",
        "handler:20:(req:NextRequest)::createContext:"
      ]
    ],
    "sr/app/auth-provider.tsx": [
      "t",
      [
        "AuthProvider:24:({ children, }:{ children::JSX.Element:getInitialSession,signOut:",
        "useAuth:71:():AuthContextType::",
        "getInitialSession:35:async ():Promise<void>::",
        "signOut:58:async ():Promise<void>::"
      ]
    ],
    "sr/app/auth/auth-code-error/page.tsx": [
      "t",
      [
        "AuthCodeErrorPage:31:async ({ searchParams, }:AuthCodeErrorPageProps)::",
        "ErrorDetails:90:({ error, description, }:{ error?::string | undefined; }):getErrorMessage:",
        "ErrorDetailsSkeleton:196:()::",
        "getErrorMessage:97:(errorCode?:string,)::string; message:string; suggestions:string[] }::"
      ]
    ],
    "sr/app/auth/callback/route.ts": [
      "t",
      [
        "GET:6:async (request:NextRequest):::"
      ]
    ],
    "sr/app/auth/sign-in/components/SignInForm.tsx": [
      "t",
      [
        "SignInForm:35:()::",
        "handleOAuthSignIn:47:async (provider:\"google\")::",
        "handleDevAuth:57:async (email:string, role:::"
      ]
    ],
    "sr/app/auth/sign-in/page.tsx": [
      "t",
      [
        "SignInPage:17:async ()::",
        "SignInFormSkeleton:42:()::"
      ]
    ],
    "sr/app/auth/sign-up/components/SignUpForm.tsx": [
      "t",
      [
        "SignUpForm:29:()::",
        "handleOAuthSignUp:37:async (provider:\"google\")::"
      ]
    ],
    "sr/app/auth/sign-up/page.tsx": [
      "t",
      [
        "SignUpPage:17:async ()::",
        "SignUpFormSkeleton:44:()::"
      ]
    ],
    "sr/app/client-providers.tsx": [
      "t",
      [
        "ClientProviders:6:({ children }:{ children:::"
      ]
    ],
    "sr/app/dal-test/page.tsx": [
      "t",
      [
        "DALTestPage:12:async ()::"
      ]
    ],
    "sr/app/dashboard/loading.tsx": [
      "t",
      [
        "DashboardLoading:3:()::"
      ]
    ],
    "sr/app/dashboard/page.tsx": [
      "t",
      [
        "generateMetadata:17:async ()::",
        "DashboardPage:27:async ()::",
        "OrganizationName:94:async ({ organizationId, }:{ organizationId:::",
        "DashboardStatsWithData:106:async ({ organizationId, }:{ organizationId:::",
        "RecentIssuesWithData:126:async ({ organizationId, }:{ organizationId:::",
        "OrgNameSkeleton:170:()::",
        "StatsLoadingSkeleton:174:()::",
        "RecentIssuesLoadingSkeleton:191:()::"
      ]
    ],
    "sr/app/demo-server-actions/page.tsx": [
      "t",
      [
        "DemoServerActionsPage:7:async ():Promise<JSX.Element>::"
      ]
    ],
    "sr/app/games/[id]/page.tsx": [
      "t",
      [
        "GamePage:9:async ({ params, }:GamePageProps):::"
      ]
    ],
    "sr/app/games/page.tsx": [
      "t",
      [
        "GamesPage:3:():never::"
      ]
    ],
    "sr/app/issues/[issueId]/loading.tsx": [
      "t",
      [
        "IssueDetailLoading:4:()::"
      ]
    ],
    "sr/app/issues/[issueId]/page.tsx": [
      "t",
      [
        "generateMetadata:15:async ({ params, }:IssuePageProps):::",
        "IssuePage:41:async ({ params, }:IssuePageProps):::"
      ]
    ],
    "sr/app/issues/create/page.tsx": [
      "t",
      [
        "getMachinesForCreateForm:10:async (organizationId:string)::",
        "getUsersForAssignment:19:async (organizationId:string)::",
        "CreateIssuePage:46:async ({ searchParams, }:CreateIssuePageProps)::getMachinesForCreateForm,getUsersForAssignment:"
      ]
    ],
    "sr/app/issues/loading.tsx": [
      "t",
      [
        "IssuesLoading:4:()::"
      ]
    ],
    "sr/app/issues/page.tsx": [
      "t",
      [
        "generateMetadata:30:async ({ searchParams }:IssuesPageProps)::",
        "IssuesWithData:87:async ({ searchParams, }:{ searchParams:::",
        "IssuesPage:187:async ({ searchParams, }:IssuesPageProps):::"
      ]
    ],
    "sr/app/layout.tsx": [
      "t",
      [
        "RootLayout:15:async ({ children, }:{ children:::"
      ]
    ],
    "sr/app/locations/[id]/page.tsx": [
      "t",
      [
        "generateMetadata:15:async ({ params, }:LocationPageProps):::",
        "LocationPage:39:async ({ params, }:LocationPageProps):::"
      ]
    ],
    "sr/app/locations/page.tsx": [
      "t",
      [
        "LocationsPage:21:async ():Promise<React.JSX.Element>::"
      ]
    ],
    "sr/app/machines/[id]/page.tsx": [
      "t",
      [
        "generateMetadata:21:async ({ params, }:MachinePageProps):::",
        "MachinePage:47:async ({ params }:MachinePageProps)::"
      ]
    ],
    "sr/app/machines/page.tsx": [
      "t",
      [
        "generateMetadata:32:async ({ searchParams }:MachinesPageProps)::",
        "MachinesPage:92:async ({ searchParams, }:MachinesPageProps)::"
      ]
    ],
    "sr/app/page.tsx": [
      "t",
      [
        "HomePage:4:async ()::"
      ]
    ],
    "sr/app/phase1d-test/page.tsx": [
      "t",
      [
        "Phase1DTestPage:6:async ():Promise<JSX.Element>::"
      ]
    ],
    "sr/app/profile/page.tsx": [
      "t",
      [
        "SignOutButton:45:():JSX.Element::",
        "ProfilePage:69:():JSX.Element::",
        "handleSignOut:48:async ():Promise<void>::",
        "handleEditProfile:110:():void::",
        "handleSaveProfile:118:():void::",
        "handleUploadSuccess:125:():void::"
      ]
    ],
    "sr/app/providers.tsx": [
      "t",
      [
        "Providers:9:({ children, }:{ children::JSX.Element::"
      ]
    ],
    "sr/app/sign-in/page.tsx": [
      "t",
      [
        "SignInPage:31:():React.ReactElement | null::",
        "fetchTestUsers:49:async ():Promise<void>::",
        "handleGoogleSignIn:74:async ():Promise<void>::",
        "handleDevLogin:94:async (email:string):::",
        "getRoleColor:132:(role:Role | null,):::"
      ]
    ],
    "sr/components/dashboard/dashboard-stats.tsx": [
      "t",
      [
        "DashboardStats:19:({ stats }:DashboardStatsProps)::",
        "StatCard:80:({ title, value, icon, description, trend }:StatCardProps)::"
      ]
    ],
    "sr/components/dashboard/quick-actions.tsx": [
      "t",
      [
        "QuickActions:13:()::"
      ]
    ],
    "sr/components/hooks/use-mobile.ts": [
      "t",
      [
        "useIsMobile:5:():boolean::",
        "onChange:10:():void::"
      ]
    ],
    "sr/components/issues/ActiveFilters.tsx": [
      "t",
      [
        "ActiveFilters:26:({ filters, onFiltersChange, onClearAll, }:ActiveFiltersProps)::getLocationName,getMachineName,getStatusNames,getUserName:",
        "getLocationName:38:(id:string):::",
        "getMachineName:45:(id:string):::",
        "getStatusNames:55:(ids:string[]):::",
        "getUserName:67:(id:string):::"
      ]
    ],
    "sr/components/issues/AdvancedFiltersDropdown.tsx": [
      "t",
      [
        "AdvancedFiltersDropdown:29:({ assigneeId, reporterId, ownerId, onAssigneeChange, onReporterChange, onOwnerChange, }:AdvancedFiltersDropdownProps):::",
        "handleClick:42:(event:React.MouseEvent<HTMLButtonElement>):::",
        "handleClose:46:():void::",
        "handleAssigneeChange:50:(event:SelectChangeEvent):::",
        "handleReporterChange:54:(event:SelectChangeEvent):::",
        "handleOwnerChange:58:(event:SelectChangeEvent):::"
      ]
    ],
    "sr/components/issues/FilterToolbar.tsx": [
      "t",
      [
        "FilterToolbar:43:({ filters, onFiltersChange, isLoading = false, }:FilterToolbarProps):::",
        "handleSortOrderToggle:53:():void::"
      ]
    ],
    "sr/components/issues/SearchTextField.tsx": [
      "t",
      [
        "SearchTextField:15:({ value, onChange, placeholder = \"Search issues...\", label = \"Search\", debounceMs = 300, }:SearchTextFieldProps):::"
      ]
    ],
    "sr/components/issues/StatusCategoryMultiSelect.tsx": [
      "t",
      [
        "StatusCategoryMultiSelect:35:({ value, onChange, label = \"Status & Category\", }:StatusCategoryMultiSelectProps)::getGroupLabel:",
        "getGroupLabel:22:(category:string):::"
      ]
    ],
    "sr/components/issues/StatusTogglePills.tsx": [
      "t",
      [
        "StatusTogglePills:58:({ value, onChange, showCounts = true, parentLoading = false, }:StatusTogglePillsProps):::",
        "getStatusColor:28:(category:\"NEW\" | \"IN_PROGRESS\" | \"RESOLVED\",)::string;\n  color:string;\n}::",
        "getCategoryLabel:45:(category:\"NEW\" | \"IN_PROGRESS\" | \"RESOLVED\",):::",
        "handleCategoryToggle:112:(category:\"NEW\" | \"IN_PROGRESS\" | \"RESOLVED\",):::",
        "isCategoryActive:136:(category:\"NEW\" | \"IN_PROGRESS\" | \"RESOLVED\",):::",
        "isCategoryFullySelected:148:(category:\"NEW\" | \"IN_PROGRESS\" | \"RESOLVED\",):::"
      ]
    ],
    "sr/components/issues/comment-form-client.tsx": [
      "t",
      [
        "CommentFormClient:13:({ issueId }:CommentFormClientProps)::"
      ]
    ],
    "sr/components/issues/issue-active-filters.tsx": [
      "t",
      [
        "IssueActiveFilters:23:({ filters, searchParams, }:IssueActiveFiltersProps)::"
      ]
    ],
    "sr/components/issues/issue-assignment-client.tsx": [
      "t",
      [
        "IssueAssignmentClient:41:({ issueId, currentAssigneeId, currentAssigneeName, availableUsers, }:IssueAssignmentClientProps)::"
      ]
    ],
    "sr/components/issues/issue-detail-server.tsx": [
      "t",
      [
        "IssueDetailServer:18:async ({ issueId }:IssueDetailServerProps)::"
      ]
    ],
    "sr/components/issues/issue-status-update-client.tsx": [
      "t",
      [
        "updateIssueStatusAction:47:async (issueId:string, _prevState::FormData,)::",
        "IssueStatusUpdateClient:74:({ issueId, currentStatusId, currentStatusName, availableStatuses, }:IssueStatusUpdateClientProps)::"
      ]
    ],
    "sr/components/issues/issues-list-server.tsx": [
      "t",
      [
        "IssueCard:86:({ issue }:{ issue:::",
        "IssuesListWithData:172:async ({ limit }:{ limit?:::",
        "PaginationControls:201:({ pagination, filters, sorting, }:{ pagination::IssueFilters; sorting:IssueSorting; }):buildUrl:",
        "IssuesListServer:266:({ issues, pagination, filters, sorting, limit, }:IssuesListServerProps)::",
        "IssuesListSkeleton:320:()::",
        "buildUrl:213:(page:number)::"
      ]
    ],
    "sr/components/layout/NavigationSkeleton.tsx": [
      "t",
      [
        "NavigationSkeleton:4:()::"
      ]
    ],
    "sr/components/layout/ServerNavigation.tsx": [
      "t",
      [
        "NavigationContent:31:({ authContext }:NavigationContentProps)::",
        "NavigationLink:86:({ item }:{ item:::",
        "ServerNavigation:101:({ authContext = null, }:ServerNavigationProps)::"
      ]
    ],
    "sr/components/layout/client/MobileNavToggle.tsx": [
      "t",
      [
        "MobileNavToggle:14:()::"
      ]
    ],
    "sr/components/layout/client/UserMenuClient.tsx": [
      "t",
      [
        "UserMenuClient:27:({ user }:UserMenuClientProps)::",
        "handleSignOut:30:async ()::"
      ]
    ],
    "sr/components/layout/navigation.tsx": [
      "t",
      [
        "Navigation:19:({ authContext }:NavigationProps)::"
      ]
    ],
    "sr/components/layout/user-menu-client.tsx": [
      "t",
      [
        "UserMenuClient:29:({ user }:UserMenuClientProps)::"
      ]
    ],
    "sr/components/machines/client/machine-filters-client.tsx": [
      "t",
      [
        "MachineFiltersClient:43:({ locations, initialFilters, viewMode, }:MachineFiltersClientProps)::",
        "updateFilters:56:(updates:Partial<{ locations::boolean | undefined; view:\"table\" | \"grid\"; }>,)::",
        "toggleLocation:98:(locationId:string)::",
        "clearAllFilters:106:()::"
      ]
    ],
    "sr/components/machines/client/machine-qr-code-client.tsx": [
      "t",
      [
        "MachineQRCodeClient:38:({ machineId, qrCodeUrl, qrCodeGeneratedAt, machineName, showBulkActions:_showBulkActions = false, }:::",
        "handleRegenerate:53:()::",
        "handleDownload:82:()::",
        "handlePrint:103:()::"
      ]
    ],
    "sr/components/machines/client/machine-search-client.tsx": [
      "t",
      [
        "MachineSearchClient:20:({ initialSearch = \"\", }:MachineSearchClientProps)::",
        "clearSearch:47:()::"
      ]
    ],
    "sr/components/machines/machine-inventory-server.tsx": [
      "t",
      [
        "MachineInventoryServer:74:async ({ machines, locations, viewMode, filters, pagination:_pagination, sorting::MachineInventoryServerProps)::"
      ]
    ],
    "sr/components/machines/machine-stats-server.tsx": [
      "t",
      [
        "MachineStatsServer:15:async ({ stats }:MachineStatsServerProps)::"
      ]
    ],
    "sr/components/nav-documents.tsx": [
      "t",
      [
        "NavDocuments:28:({ items, }:{ items::string; url:string; icon:Icon; }[]; })::"
      ]
    ],
    "sr/components/nav-main.tsx": [
      "t",
      [
        "NavMain:14:({ items, }:{ items::string; url:string; icon?:Icon; }[]; })::"
      ]
    ],
    "sr/components/nav-secondary.tsx": [
      "t",
      [
        "NavSecondary:14:({ items, ...props }:{ items::string; url:string; icon:Icon; }[]; } & React.ComponentPropsWithoutRef<typeof SidebarGroup>)::"
      ]
    ],
    "sr/components/nav-user.tsx": [
      "t",
      [
        "NavUser:28:({ user, }:{ user::string; email:string; avatar:string; }; })::"
      ]
    ],
    "sr/components/permissions/PermissionButton.tsx": [
      "t",
      [
        "getDefaultTooltipText:36:(permission:string):::",
        "PermissionButton:92:({ permission, hasPermission, tooltipText, showWhenDenied = true, disabled:customDisabled = false, children, ...buttonProps }, ref,)::"
      ]
    ],
    "sr/components/permissions/PermissionGate.tsx": [
      "t",
      [
        "PermissionGate:52:({ permission, hasPermission, fallback, children, showFallback = false, }:PermissionGateProps):::"
      ]
    ],
    "sr/components/site-header.tsx": [
      "t",
      [
        "SiteHeader:5:()::"
      ]
    ],
    "sr/components/ui/Breadcrumbs.tsx": [
      "t",
      [
        "Breadcrumbs:11:():ReactElement::"
      ]
    ],
    "sr/components/ui/UserAvatar.tsx": [
      "t",
      [
        "UserAvatar:26:({ user, size = \"medium\", clickable = false, showTooltip = true, onClick, }:UserAvatarProps):::"
      ]
    ],
    "sr/components/ui/alert.tsx": [
      "t",
      [
        "Alert:22:({ className, variant, ...props }:React.ComponentProps<\"div\"> & VariantProps<typeof alertVariants>)::",
        "AlertTitle:37:({ className, ...props }:React.ComponentProps<\"div\">)::",
        "AlertDescription:50:({ className, ...props }:React.ComponentProps<\"div\">)::"
      ]
    ],
    "sr/components/ui/badge.tsx": [
      "t",
      [
        "Badge:28:({ className, variant, asChild = false, ...props }:React.ComponentProps<\"span\"> & VariantProps<typeof badgeVariants> & { asChild?:::"
      ]
    ],
    "sr/components/ui/dropdown-menu.tsx": [
      "t",
      [
        "DropdownMenu:9:({ ...props }:React.ComponentProps<typeof DropdownMenuPrimitive.Root>)::",
        "DropdownMenuPortal:15:({ ...props }:React.ComponentProps<typeof DropdownMenuPrimitive.Portal>)::",
        "DropdownMenuTrigger:23:({ ...props }:React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>)::",
        "DropdownMenuContent:34:({ className, sideOffset = 4, ...props }:React.ComponentProps<typeof DropdownMenuPrimitive.Content>)::",
        "DropdownMenuGroup:54:({ ...props }:React.ComponentProps<typeof DropdownMenuPrimitive.Group>)::",
        "DropdownMenuItem:62:({ className, inset, variant = \"default\", ...props }:React.ComponentProps<typeof DropdownMenuPrimitive.Item> & { inset?::\"default\" | \"destructive\"; })::",
        "DropdownMenuCheckboxItem:85:({ className, children, checked, ...props }:React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>)::",
        "DropdownMenuRadioGroup:111:({ ...props }:React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>)::",
        "DropdownMenuRadioItem:122:({ className, children, ...props }:React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>)::",
        "DropdownMenuLabel:146:({ className, inset, ...props }:React.ComponentProps<typeof DropdownMenuPrimitive.Label> & { inset?:::",
        "DropdownMenuSeparator:166:({ className, ...props }:React.ComponentProps<typeof DropdownMenuPrimitive.Separator>)::",
        "DropdownMenuShortcut:179:({ className, ...props }:React.ComponentProps<\"span\">)::",
        "DropdownMenuSub:195:({ ...props }:React.ComponentProps<typeof DropdownMenuPrimitive.Sub>)::",
        "DropdownMenuSubTrigger:201:({ className, inset, children, ...props }:React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & { inset?:::",
        "DropdownMenuSubContent:225:({ className, ...props }:React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>)::"
      ]
    ],
    "sr/components/ui/filters-server.tsx": [
      "t",
      [
        "FiltersServer:51:({ currentFilters, searchPlaceholder = \"Search...\", filterOptions, activeFilters, actionUrl, clearAllUrl, children, }:FiltersServerProps)::",
        "ActiveFilterBadge:160:({ filter }:{ filter:::",
        "FilterBarServer:189:({ currentFilters, quickFilters, searchUrl, clearUrl, }:FilterBarServerProps)::",
        "createFilterAction:255:(basePath:string, urlBuilder::string, params:any, currentParams?:any):handleFilterSubmit:",
        "handleFilterSubmit:259:async (formData:FormData)::",
        "CheckboxFilter:290:({ name, label, options, selectedValues, }:CheckboxFilterProps)::"
      ]
    ],
    "sr/components/ui/label.tsx": [
      "t",
      [
        "Label:8:({ className, ...props }:React.ComponentProps<typeof LabelPrimitive.Root>)::"
      ]
    ],
    "sr/components/ui/migration-bridge.tsx": [
      "t",
      [
        "MigrationBridge:12:({ children, useTailwind = false, className, muiProps = {}, }:MigrationBridgeProps):::",
        "TailwindButton:27:({ children, variant = \"default\", size = \"default\", className, ...props }:{ children::| \"default\" | \"destructive\" | \"outline\" | \"secondary\" | \"ghost\" | \"link\"; size?:\"default\" | \"sm\" | \"lg\" | \"icon\"; className?:string; [key:string]:unknown; }):React.JSX.Element::",
        "TailwindCard:67:({ children, className, ...props }:{ children::string; [key:string]:unknown; }):React.JSX.Element::"
      ]
    ],
    "sr/components/ui/pagination-server.tsx": [
      "t",
      [
        "PaginationServer:23:({ currentPage, totalPages, totalItems, basePath, searchParams, itemsPerPage = 20, showSummary = true, }:PaginationServerProps)::",
        "PaginationServerCompact:188:({ currentPage, totalPages, basePath, searchParams, }:Omit<PaginationServerProps, \"totalItems\" | \"itemsPerPage\" | \"showSummary\">)::",
        "buildPageUrl:196:(page:number)::",
        "generatePageNumbers:64:()::"
      ]
    ],
    "sr/components/ui/search-client.tsx": [
      "t",
      [
        "SearchClient:34:({ initialSearch = \"\", placeholder = \"Search...\", basePath, urlBuilder, className, autoFocus = false, }:SearchClientProps)::",
        "SearchClientCompact:141:({ initialSearch = \"\", placeholder = \"Search...\", basePath, urlBuilder, }:Omit<SearchClientProps, \"className\" | \"autoFocus\">)::",
        "SearchClientWithSuggestions:173:({ suggestions = [], onSuggestionSelect, showSuggestions = false, ...searchProps }:SearchWithSuggestionsProps)::",
        "useSearchState:188:(initialSearch = \"\", basePath:string, urlBuilder:::",
        "clearSearch:203:()::",
        "handleSubmit:82:(e:React.FormEvent)::",
        "updateSearch:199:(newValue:string)::",
        "commitSearch:207:(value?:string)::"
      ]
    ],
    "sr/components/ui/select.tsx": [
      "t",
      [
        "Select:9:({ ...props }:React.ComponentProps<typeof SelectPrimitive.Root>)::",
        "SelectGroup:15:({ ...props }:React.ComponentProps<typeof SelectPrimitive.Group>)::",
        "SelectValue:21:({ ...props }:React.ComponentProps<typeof SelectPrimitive.Value>)::",
        "SelectTrigger:27:({ className, size = \"default\", children, ...props }:React.ComponentProps<typeof SelectPrimitive.Trigger> & { size?:::",
        "SelectContent:53:({ className, children, position = \"popper\", ...props }:React.ComponentProps<typeof SelectPrimitive.Content>)::",
        "SelectLabel:88:({ className, ...props }:React.ComponentProps<typeof SelectPrimitive.Label>)::",
        "SelectItem:101:({ className, children, ...props }:React.ComponentProps<typeof SelectPrimitive.Item>)::",
        "SelectSeparator:125:({ className, ...props }:React.ComponentProps<typeof SelectPrimitive.Separator>)::",
        "SelectScrollUpButton:138:({ className, ...props }:React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>)::",
        "SelectScrollDownButton:156:({ className, ...props }:React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>)::"
      ]
    ],
    "sr/components/ui/sheet.tsx": [
      "t",
      [
        "Sheet:9:({ ...props }:React.ComponentProps<typeof SheetPrimitive.Root>)::",
        "SheetTrigger:13:({ ...props }:React.ComponentProps<typeof SheetPrimitive.Trigger>)::",
        "SheetClose:19:({ ...props }:React.ComponentProps<typeof SheetPrimitive.Close>)::",
        "SheetPortal:25:({ ...props }:React.ComponentProps<typeof SheetPrimitive.Portal>)::",
        "SheetOverlay:31:({ className, ...props }:React.ComponentProps<typeof SheetPrimitive.Overlay>)::",
        "SheetContent:47:({ className, children, side = \"right\", ...props }:React.ComponentProps<typeof SheetPrimitive.Content> & { side?:::",
        "SheetHeader:84:({ className, ...props }:React.ComponentProps<\"div\">)::",
        "SheetFooter:94:({ className, ...props }:React.ComponentProps<\"div\">)::",
        "SheetTitle:104:({ className, ...props }:React.ComponentProps<typeof SheetPrimitive.Title>)::",
        "SheetDescription:117:({ className, ...props }:React.ComponentProps<typeof SheetPrimitive.Description>)::"
      ]
    ],
    "sr/components/ui/sidebar.tsx": [
      "t",
      [
        "useSidebar:47:()::",
        "SidebarProvider:56:({ defaultOpen = true, open:openProp, onOpenChange::React.ComponentProps<\"div\"> & { defaultOpen?:boolean; open?:boolean; onOpenChange?:(open:boolean)::",
        "Sidebar:156:({ side = \"left\", variant = \"sidebar\", collapsible = \"offcanvas\", className, children, ...props }:React.ComponentProps<\"div\"> & { side?::\"sidebar\" | \"floating\" | \"inset\"; collapsible?:\"offcanvas\" | \"icon\" | \"none\"; }):useSidebar:",
        "SidebarTrigger:258:({ className, onClick, ...props }:React.ComponentProps<typeof Button>)::",
        "SidebarRail:284:({ className, ...props }:React.ComponentProps<\"button\">)::",
        "SidebarInset:309:({ className, ...props }:React.ComponentProps<\"main\">)::",
        "SidebarInput:323:({ className, ...props }:React.ComponentProps<typeof Input>)::",
        "SidebarHeader:337:({ className, ...props }:React.ComponentProps<\"div\">)::",
        "SidebarFooter:348:({ className, ...props }:React.ComponentProps<\"div\">)::",
        "SidebarSeparator:359:({ className, ...props }:React.ComponentProps<typeof Separator>)::",
        "SidebarContent:373:({ className, ...props }:React.ComponentProps<\"div\">)::",
        "SidebarGroup:387:({ className, ...props }:React.ComponentProps<\"div\">)::",
        "SidebarGroupLabel:398:({ className, asChild = false, ...props }:React.ComponentProps<\"div\"> & { asChild?:::",
        "SidebarGroupAction:419:({ className, asChild = false, ...props }:React.ComponentProps<\"button\"> & { asChild?:::",
        "SidebarGroupContent:442:({ className, ...props }:React.ComponentProps<\"div\">)::",
        "SidebarMenu:456:({ className, ...props }:React.ComponentProps<\"ul\">)::",
        "SidebarMenuItem:467:({ className, ...props }:React.ComponentProps<\"li\">)::",
        "SidebarMenuButton:500:({ asChild = false, isActive = false, variant = \"default\", size = \"default\", tooltip, className, ...props }:React.ComponentProps<\"button\"> & { asChild?::boolean; tooltip?:string | React.ComponentProps<typeof TooltipContent>; } & VariantProps<typeof sidebarMenuButtonVariants>):useSidebar:",
        "SidebarMenuAction:550:({ className, asChild = false, showOnHover = false, ...props }:React.ComponentProps<\"button\"> & { asChild?::boolean; })::",
        "SidebarMenuBadge:582:({ className, ...props }:React.ComponentProps<\"div\">)::",
        "SidebarMenuSkeleton:604:({ className, showIcon = false, ...props }:React.ComponentProps<\"div\"> & { showIcon?:::",
        "SidebarMenuSub:642:({ className, ...props }:React.ComponentProps<\"ul\">)::",
        "SidebarMenuSubItem:657:({ className, ...props }:React.ComponentProps<\"li\">)::",
        "SidebarMenuSubButton:671:({ asChild = false, size = \"md\", isActive = false, className, ...props }:React.ComponentProps<\"a\"> & { asChild?::\"sm\" | \"md\"; isActive?:boolean; })::",
        "handleKeyDown:98:(event:KeyboardEvent)::"
      ]
    ],
    "sr/components/ui/skeleton.tsx": [
      "t",
      [
        "Skeleton:3:({ className, ...props }:React.ComponentProps<\"div\">)::"
      ]
    ],
    "sr/components/ui/tooltip.tsx": [
      "t",
      [
        "TooltipProvider:8:({ delayDuration = 0, ...props }:React.ComponentProps<typeof TooltipPrimitive.Provider>)::",
        "Tooltip:21:({ ...props }:React.ComponentProps<typeof TooltipPrimitive.Root>)::",
        "TooltipTrigger:31:({ ...props }:React.ComponentProps<typeof TooltipPrimitive.Trigger>)::",
        "TooltipContent:37:({ className, sideOffset = 0, children, ...props }:React.ComponentProps<typeof TooltipPrimitive.Content>)::"
      ]
    ],
    "sr/contexts/PermissionDepsContext.tsx": [
      "t",
      [
        "usePermissionDependencies:35:():PermissionDependencies::",
        "PermissionDepsProvider:65:({ children, authHook, membershipQuery, }:{ children::typeof useAuth; membershipQuery:typeof api.user.getCurrentMembership.useQuery; }):ReactElement::",
        "mockSessionHook:57:()::",
        "mockMembershipQuery:58:()::"
      ]
    ],
    "sr/hooks/usePermissions.ts": [
      "t",
      [
        "MyComponent:45:():usePermissions:",
        "IssueActions:61:({ issue }):usePermissions:",
        "usePermissions:89:():UsePermissionsReturn::",
        "AdminPanel:155:():useRequiredPermission:",
        "useRequiredPermission:164:(permission:string, redirectTo = \"/\",):::",
        "ActionButton:199:():usePermissionTooltip,usePermissions:",
        "usePermissionTooltip:213:(permission:string):::"
      ]
    ],
    "sr/lib/actions/auth-actions.ts": [
      "t",
      [
        "sendMagicLink:38:async (_prevState:ActionResult<{ message::FormData,):Promise<ActionResult<::",
        "signInWithOAuth:95:async (provider:\"google\", redirectTo?::Promise<never>:signInWithOAuth:",
        "devSignIn:137:async (email:string, _userData?::string; role?:string },):Promise<ActionResult<::",
        "signOut:187:async ():Promise<void>::"
      ]
    ],
    "sr/lib/actions/issue-actions.ts": [
      "t",
      [
        "createIssueAction:94:async (_prevState:ActionResult<{ id::FormData,):Promise<ActionResult<::",
        "updateIssueStatusAction:177:async (issueId:string, _prevState::string }> | null, formData:FormData,):Promise<ActionResult<::",
        "addCommentAction:251:async (issueId:string, _prevState::string }> | null, formData:FormData,):Promise<ActionResult<::",
        "updateIssueAssignmentAction:313:async (issueId:string, _prevState::string | null }> | null, formData:FormData,):Promise<ActionResult<::",
        "bulkUpdateIssuesAction:392:async (_prevState:ActionResult<{ updatedCount::FormData,):Promise<ActionResult<::"
      ]
    ],
    "sr/lib/actions/machine-actions.ts": [
      "t",
      [
        "createMachineAction:60:async (formData:FormData,):::",
        "updateMachineAction:111:async (formData:FormData,):::",
        "deleteMachineAction:179:async (machineId:string,):::",
        "bulkUpdateMachinesAction:229:async (formData:FormData,):::",
        "generateQRCodeAction:292:async (formData:FormData,):::",
        "regenerateQRCodeAction:361:async (machineId:string,):::",
        "bulkGenerateQRCodesAction:425:async (formData:FormData,):::"
      ]
    ],
    "sr/lib/actions/shared.ts": [
      "t",
      [
        "getFormField:54:(formData:FormData, field::string | null::",
        "validateRequiredFields:74:(formData:FormData, requiredFields::Record<string, string>:getFormField:",
        "actionSuccess:93:(data:T, message?::ActionResult<T>::",
        "actionError:101:(error:string, fieldErrors?::ActionResult<never>::",
        "validateFormData:115:(formData:FormData, schema::ActionResult<T>:actionError,actionSuccess:",
        "runAfterResponse:154:(task:()::",
        "revalidateIssues:164:():void::",
        "revalidateMachines:169:():void::",
        "revalidateDashboard:174:():void::",
        "withActionErrorHandling:182:async (action:()::"
      ]
    ],
    "sr/lib/actions/shared.unit.test.ts": [
      "t",
      [
        "successAction:212:async ()::",
        "failingAction:238:async ()::"
      ]
    ],
    "sr/lib/auth/dev-auth.ts": [
      "t",
      [
        "isValidDevEmail:59:(email:string):::",
        "signInDevUser:68:async (clientSupabase:SupabaseClient, email::Promise<DevAuthResult>::",
        "authenticateDevUser:139:async (clientSupabase:SupabaseClient, userData::Promise<DevAuthResult>:isValidDevEmail,signInDevUser:",
        "getAuthResultMessage:205:(result:DevAuthResult):::",
        "isDevAuthAvailable:223:():boolean::",
        "getDevAuthStrategy:230:():\"immediate\" | \"unavailable\"::"
      ]
    ],
    "sr/lib/auth/server-auth.ts": [
      "t",
      [
        "createServerSupabaseClient:29:async ()::",
        "getDevAuthContext:77:async ():Promise<ServerAuthContext>::",
        "validateOrganizationAccess:99:async (userId:string, organizationId::Promise<boolean>:createServerSupabaseClient:"
      ]
    ],
    "sr/lib/auth/server-context.ts": [
      "t",
      [
        "requireServerAuth:37:async ()::",
        "requireServerOrgContext:46:async ():requireServerAuth:"
      ]
    ],
    "sr/lib/comments/accessValidation.ts": [
      "t",
      [
        "validateCommentContent:74:(content:string):::",
        "validateCommentCreationInput:96:(input:CommentCreationInput,)::validateCommentContent:",
        "validateCommentEditInput:120:(input:CommentEditInput,)::validateCommentContent:",
        "validateCommentAccess:144:(issue:IssueReference | null, context::ValidationResult<IssueReference>::",
        "validateCommentEditPermissions:181:(comment:CommentWithIssue | null, context::ValidationResult<CommentWithIssue>::",
        "validateCommentDeletePermissions:234:(comment:CommentWithIssue | null, context::ValidationResult<CommentWithIssue>::",
        "buildCommentCreationData:291:(input:CommentCreationInput, context::ValidationResult<::",
        "buildCommentEditData:313:(input:CommentEditInput,):::",
        "validateCompleteCommentCreation:330:(input:CommentCreationInput, issue::CommentAccessContext,):ValidationResult<::",
        "validateCompleteCommentEdit:398:(input:CommentEditInput, comment::CommentAccessContext,):ValidationResult<::",
        "isCommentAuthor:468:(comment:CommentWithIssue, userId::boolean::",
        "isCommentDeleted:479:(comment:CommentWithIssue):::",
        "getCommentAgeInMinutes:487:(comment:CommentWithIssue):::",
        "canEditCommentByTime:497:(comment:CommentWithIssue, maxEditMinutes = DEFAULT_COMMENT_EDIT_MINUTES,)::getCommentAgeInMinutes:",
        "validateCommentEditWithTimeLimit:508:(comment:CommentWithIssue | null, context::ValidationResult<CommentWithIssue>:canEditCommentByTime,validateCommentEditPermissions:"
      ]
    ],
    "sr/lib/common/__tests__/inputValidation.test.ts": [
      "t",
      [
        "expectZodError:75:(result:any, expectedMessage?::void::",
        "expectZodSuccess:82:(result:any, expectedData?::void::"
      ]
    ],
    "sr/lib/common/inputValidation.ts": [
      "t",
      [
        "createEntityIdSchema:376:(entityName:string,):::",
        "createNamedEntityCreationSchema:389:(requireName = true,):z.ZodObject<::",
        "createNamedEntityUpdateSchema:403:():z.ZodObject<::",
        "validateNonEmptyStringArray:417:(array:unknown, fieldName::string[]::",
        "validateAndNormalizeSearchQuery:444:(query:unknown,):::",
        "validateOptionalString:472:(value:unknown, fieldName::string | undefined::"
      ]
    ],
    "sr/lib/common/organizationValidation.ts": [
      "t",
      [
        "validateResourceOrganizationBoundary:61:(input:ResourceOwnershipInput,):::",
        "validateOrganizationMembership:85:(input:MembershipValidationInput,):::",
        "validateCrossOrganizationAccess:119:(input:CrossOrganizationAccessInput,):::",
        "validateOrganizationId:136:(organizationId:string,):::",
        "validateUserId:177:(userId:string):::",
        "validateCompleteOrganizationBoundary:206:(resourceId:string, resourceOrganizationId::OrganizationMembership | null, userId:string, expectedOrganizationId:string, resourceType:string,):ValidationResult<::",
        "validateIssueOrganizationBoundary:295:(issueId:string, issueOrganizationId::string,):ValidationResult:validateResourceOrganizationBoundary:",
        "validateMachineOrganizationBoundary:312:(machineId:string, machineOrganizationId::string,):ValidationResult:validateResourceOrganizationBoundary:",
        "validateLocationOrganizationBoundary:329:(locationId:string, locationOrganizationId::string,):ValidationResult:validateResourceOrganizationBoundary:",
        "validateCommentOrganizationBoundary:346:(commentId:string, parentIssueOrganizationId::string,):ValidationResult:validateResourceOrganizationBoundary:",
        "isSameOrganization:367:(orgId1:string, orgId2::boolean::",
        "extractOrganizationId:375:(resource:| { readonly organizationId::{ readonly organizationId:string } } | { readonly issue:{ readonly organizationId:string } } | null,):string | null::",
        "createOrganizationBoundaryError:405:(resourceType:string, includeSecurityContext = false,):::",
        "validatePublicOrganizationContext:451:(organization:OrganizationContextPublic | null | undefined,):::",
        "createOrganizationScope:469:(organizationId:string):::",
        "validateRouterEntityOwnership:494:(entity:EntityWithOrganizationId | null | undefined, expectedOrganizationId::string, customErrorMessage?:string,):RouterValidationResult::",
        "createEntityQuery:523:(entityId:string, organizationId::::",
        "createEntityUpdateQuery:544:(entityId:string, organizationId::::",
        "createEntityDeleteQuery:565:(entityId:string, organizationId::::",
        "validateEntityExistsAndOwned:594:(entity:T | null | undefined, organizationId::string, customErrorMessage?:string,):T:validateRouterEntityOwnership:",
        "validatePublicOrganizationContextRequired:630:(organization:OrganizationContextPublic | null | undefined,)::validatePublicOrganizationContext:",
        "validateRelatedEntitiesOwnership:661:(entities:readonly RelatedEntityCheck[], expectedOrganizationId::RouterValidationResult::",
        "validateMultipleEntityOwnership:686:(entities:readonly (EntityWithOrganizationId | null | undefined)::"
      ]
    ],
    "sr/lib/dal/index.ts": [
      "t",
      [
        "getDashboardData:82:async ()::",
        "getUserContextData:107:async ()::",
        "getOrganizationOverviewData:127:async ()::"
      ]
    ],
    "sr/lib/environment-client.ts": [
      "t",
      [
        "getClientEnvironment:17:():| \"development\"\n  | \"production\"\n  | \"preview\"\n  | \"test\"::",
        "isDevelopment:54:():boolean::",
        "isProduction:61:():boolean::",
        "isTest:69:():boolean::",
        "isPreview:88:():boolean::",
        "isDevelopmentOrTest:96:():boolean::",
        "isDevelopmentOrPreview:104:():boolean::",
        "getEnvironmentName:111:():string::",
        "shouldEnableDevFeatures:120:():boolean::",
        "isDevAuthAvailable:128:():boolean::"
      ]
    ],
    "sr/lib/environment.ts": [
      "t",
      [
        "isDevelopment:17:():boolean::",
        "isPreview:25:():boolean::",
        "isProduction:32:():boolean::",
        "isDevelopmentOrPreview:40:():boolean::",
        "getEnvironmentName:47:():string::",
        "shouldEnableDevFeatures:59:():boolean::",
        "shouldEnableCredentialsProvider:73:():boolean::",
        "shouldEnableTestLogin:86:():boolean::",
        "shouldEnableDemoLogin:94:():boolean::",
        "shouldRequireGoogleOAuth:102:():boolean::"
      ]
    ],
    "sr/lib/external/pinballmapTransformer.ts": [
      "t",
      [
        "transformPinballMapMachineToModel:48:(pmMachine:PinballMapMachine,):::",
        "getModelLookupStrategy:83:(pmMachine:PinballMapMachine,):::",
        "validatePinballMapMachine:105:(pmMachine:unknown):::",
        "findMatchingMachine:171:(modelId:string, currentMachines::string; modelId:string }[],):MachineMatchResult::",
        "calculateSyncOperations:188:(pinballMapMachines:PinballMapMachine[], currentMachines::string; modelId:string }[], foundModels:Map<string, { id:string; name:string }>, // pmMachine.opdb_id>model):::",
        "generateMachineName:239:(modelName:string, instanceNumber?::string::",
        "isValidUrl:253:(urlString:string):::",
        "prepareMachineCreateData:266:(modelId:string, organizationId::string, modelName:string,):::"
      ]
    ],
    "sr/lib/issues/assignmentValidation.ts": [
      "t",
      [
        "validateIssueAssignment:132:(input:IssueAssignmentInput, issue::Membership | null, context:AssignmentValidationContext,):AssignmentValidationResult:validateAssigneeMembership,validateAssignmentRules,validateIssueOrganizationBoundary:",
        "validateIssueCreation:204:(input:IssueCreationInput, machine::IssueStatus | null, defaultPriority:Priority | null, context:AssignmentValidationContext,):AssignmentValidationResult:validateDefaultPriority,validateDefaultStatus,validateIssueCreationRules,validateMachineOrganizationBoundary:",
        "validateIssueOrganizationBoundary:275:(issue:Issue | null, expectedOrganizationId::IssueValidationResult::",
        "validateMachineOrganizationBoundary:306:(machine:Machine | null, expectedOrganizationId::MachineValidationResult::",
        "validateAssigneeMembership:337:(membership:Membership | null, expectedUserId::string,):AssignmentValidationResult::",
        "validateAssignmentRules:375:(issue:Issue, assigneeMembership::AssignmentValidationContext,):AssignmentValidationResult::",
        "validateIssueCreationRules:396:(input:IssueCreationInput, _machine::AssignmentValidationContext,):AssignmentValidationResult::",
        "validateDefaultStatus:433:(status:IssueStatus | null, organizationId::DefaultResourceValidationResult::",
        "validateDefaultPriority:470:(priority:Priority | null, organizationId::DefaultResourceValidationResult::",
        "isAssignmentChange:511:(currentAssigneeId:string | null, newAssigneeId::::",
        "getAssignmentChangeEffects:537:(currentAssigneeId:string | null, newAssigneeId::::",
        "validateBatchAssignments:576:(operations:readonly { readonly type::string; readonly userId?:string; }[], issues:readonly Issue[], memberships:readonly Membership[], context:AssignmentValidationContext,):AssignmentValidationResult:validateAssigneeMembership,validateIssueOrganizationBoundary:"
      ]
    ],
    "sr/lib/issues/creationValidation.ts": [
      "t",
      [
        "validateMachineOwnership:65:(input:MachineOwnershipInput,):::",
        "validateIssueCreationInput:89:(input:PublicIssueCreationInput | AuthenticatedIssueCreationInput,):::",
        "buildIssueCreationData:138:(input:PublicIssueCreationInput | AuthenticatedIssueCreationInput, defaults::IssueCreationContext,):ValidationResult<::",
        "validateIssueCreationDefaults:193:(status:{ readonly id::string } | null, priority:{ readonly id:string; readonly name:string } | null,):ValidationResult<IssueCreationDefaults>::",
        "validateCompleteIssueCreation:224:(input:PublicIssueCreationInput | AuthenticatedIssueCreationInput, machine::{ readonly id:string; readonly name:string } | null, priority:{ readonly id:string; readonly name:string } | null, context:IssueCreationContext,):ValidationResult<::",
        "getIssueCreationNotificationEffects:315:(issueType:\"public\" | \"authenticated\", machineId::::"
      ]
    ],
    "sr/lib/issues/filterUtils.ts": [
      "t",
      [
        "getDefaultFilters:21:():IssueFilters::",
        "mergeFilters:32:(currentFilters:IssueFilters, updates::IssueFilters::",
        "validateFilters:74:(filters:Partial<IssueFilters>)::getDefaultFilters,isValidSortField,isValidSortOrder:",
        "hasActiveFilters:99:(filters:IssueFilters):::",
        "clearAllFilters:114:():IssueFilters::",
        "isValidSortField:121:(value:unknown):::",
        "isValidSortOrder:128:(value:unknown):::",
        "getFilterSummary:135:(filters:IssueFilters):::"
      ]
    ],
    "sr/lib/issues/selectionUtils.ts": [
      "t",
      [
        "toggleSelection:10:(currentSelection:string[], itemId::boolean,):string[]::",
        "selectAll:29:(itemIds:string[]):::",
        "selectNone:36:():string[]::",
        "isSelected:43:(selection:string[], itemId::boolean::",
        "isAllSelected:50:(selection:string[], availableIds::boolean::",
        "isSomeSelected:61:(selection:string[], availableIds::boolean::",
        "getSelectedCount:75:(selection:string[], availableIds::number::",
        "getSelectionSummary:85:(selection:string[], availableIds::string:getSelectedCount:",
        "filterValidSelection:104:(selection:string[], availableIds::string[]::",
        "toggleSelectAll:115:(currentSelection:string[], availableIds::string[]:isAllSelected,selectAll,selectNone:",
        "getStaleSelections:127:(selection:string[], availableIds::string[]::",
        "batchToggleSelection:137:(currentSelection:string[], operations::string; selected:boolean }[],):string[]:toggleSelection:"
      ]
    ],
    "sr/lib/issues/statusValidation.ts": [
      "t",
      [
        "validateStatusTransition:46:(input:StatusTransitionInput, newStatus::StatusValidationContext,):StatusValidationResult:validateOrganizationBoundary,validateTransitionRules,validateUserPermissions:",
        "validateOrganizationBoundary:93:(currentStatus:IssueStatus, newStatus::string,):StatusValidationResult::",
        "validateUserPermissions:122:(currentStatus:IssueStatus, newStatus::readonly string[],):StatusValidationResult:getTransitionType:",
        "validateTransitionRules:158:(currentStatus:IssueStatus, newStatus::StatusValidationResult:getTransitionType:",
        "getTransitionType:193:(currentStatus:IssueStatus, newStatus::\"progress\" | \"regress\" | \"reopen\" | \"same_category\"::",
        "validateStatusLookup:232:(_statusId:string, _organizationId::IssueStatus | null,):StatusLookupResult::",
        "getValidStatusTransitions:258:(currentStatus:IssueStatus, availableStatuses::StatusValidationContext,):readonly IssueStatus[]:validateStatusTransition:",
        "getStatusChangeEffects:281:(currentStatus:IssueStatus, newStatus::::"
      ]
    ],
    "sr/lib/issues/urlUtils.ts": [
      "t",
      [
        "filtersToUrlParams:12:(filters:IssueFilters):::",
        "urlParamsToFilters:37:(params:URLSearchParams,)::isValidSortBy,isValidSortOrder:",
        "createFilteredUrl:85:(basePath:string, filters::string::",
        "hasValidFilterParams:115:(params:URLSearchParams):::",
        "sanitizeUrlParams:140:(params:URLSearchParams):::",
        "isValidSortBy:167:(value:string | null,):::",
        "isValidSortOrder:176:(value:string | null):::",
        "urlParamsEqual:183:(params1:URLSearchParams, params2::boolean::"
      ]
    ],
    "sr/lib/logger.ts": [
      "t",
      [
        "isErrorObject:11:(obj:unknown,):::",
        "hasCodeAndMessage:17:(error:Record<string, unknown>,):::",
        "createLogger:33:():pino.Logger | LoggerInterface::",
        "createFallbackLogger:118:(context:object = {})::createFallbackLogger,mergeContext:",
        "mergeContext:120:(obj:object):::",
        "createDualChildLogger:144:(mainChild:LoggerInterface, fileChild?::LoggerInterface:createDualChildLogger:"
      ]
    ],
    "sr/lib/opdb/utils.ts": [
      "t",
      [
        "parseOPDBId:15:(opdbId:string):::",
        "isValidOPDBId:32:(opdbId:string)::parseOPDBId:",
        "getGroupIdFromOPDBId:39:(opdbId:string)::parseOPDBId:",
        "buildOPDBId:47:(groupId:string, machineId?::string,):string::",
        "getPreferredImageUrl:66:(machine:OPDBMachine):::",
        "formatMachineName:93:(machine:OPDBMachine)::getManufacturerName,getYearValue:",
        "normalizeDescription:141:(description?:string):::",
        "generateCacheKey:151:(endpoint:string, params::string::",
        "isDataStale:167:(lastSynced:Date | null, maxAgeHours = 24,):::",
        "getManufacturerName:97:(manufacturer:unknown):::",
        "getYearValue:107:(machine:OPDBMachine):::"
      ]
    ],
    "sr/lib/pinballmap/client.ts": [
      "t",
      [
        "fetchLocationDetails:95:(locationId:number,):::",
        "fetchLocationMachineDetails:100:(locationId:number,):::"
      ],
      {
        "PinballMapError": [
          "13",
          [
            "__init__:14:(message:string, public statusCode?:number, public response?:unknown,)::"
          ]
        ],
        "PinballMapClient": [
          "24",
          [
            "constructor:26:(baseUrl:string = API_BASE_URL)::",
            "fetchLocationDetails:34:async (locationId:number):Promise<PinballMapLocation>::",
            "__init__:26:(baseUrl:string = API_BASE_URL)::"
          ]
        ]
      }
    ],
    "sr/lib/search-params/issue-search-params.ts": [
      "t",
      [
        "parseIssueSearchParams:75:(searchParams:Record<string, string | string[] | undefined>,):::",
        "buildIssueUrl:93:(basePath:string, params::Record<string, string | string[] | undefined>,):string::",
        "cleanIssueUrl:147:(url:string)::buildIssueUrl,parseIssueSearchParams:",
        "getIssueFilterDescription:158:(filters:IssueSearchParams,):::",
        "getIssueCanonicalUrl:193:(basePath:string, params::string:buildIssueUrl,cleanIssueUrl:"
      ]
    ],
    "sr/lib/search-params/machine-search-params.ts": [
      "t",
      [
        "parseMachineSearchParams:95:(searchParams:Record<string, string | string[] | undefined>,):::",
        "buildMachineUrl:113:(basePath:string, params::Record<string, string | string[] | undefined>,):string::",
        "cleanMachineUrl:167:(url:string)::buildMachineUrl,parseMachineSearchParams:",
        "getMachineFilterDescription:178:(filters:MachineSearchParams,):::",
        "getMachineCanonicalUrl:220:(basePath:string, params::string:buildMachineUrl,cleanMachineUrl:"
      ]
    ],
    "sr/lib/search-params/shared.ts": [
      "t",
      [
        "buildMetadataDescription:83:(baseDescription:string, filterDescriptions::number,):string::",
        "extractSearchParamErrors:126:(error:z.ZodError,):::",
        "safeParseSearchParams:139:(searchParams:Record<string, string | string[] | undefined>, schema::string,):T:extractSearchParamErrors:"
      ]
    ],
    "sr/lib/supabase/client.ts": [
      "t",
      [
        "createClient:18:()::",
        "getClient:44:():SupabaseClient::"
      ]
    ],
    "sr/lib/supabase/error-handler.ts": [
      "t",
      [
        "handleResponse:87:(response:unknown, context::(data:unknown)::",
        "createStructuredError:125:(error:unknown, context::SupabaseErrorResult:classifyGenericError,isAuthError:",
        "throwStructuredError:180:(result:SupabaseFailureResult):::",
        "isAuthError:238:(error:unknown):::",
        "classifyGenericError:250:(message:string):::",
        "handleListUsersResponse:288:(response:unknown, context::SupabaseOperationResult<::",
        "handleCreateUserResponse:306:(response:unknown, context::SupabaseOperationResult<::",
        "handleDeleteUserResponse:324:(response:unknown, context::SupabaseOperationResult<Record<string, never>>:handleResponse:",
        "handleGetUserResponse:337:(response:unknown, context::SupabaseOperationResult<::",
        "safeSupabaseOperation:359:async (operation:()::",
        "safeSupabaseOperationOrThrow:386:async (operation:()::",
        "logSupabaseError:407:(error:SupabaseErrorResult, logger::(msg:string, meta?:Record<string, unknown>)::"
      ]
    ],
    "sr/lib/supabase/errors.ts": [
      "t",
      [
        "createAuthenticationError:134:(reason?:string, originalError?::AuthenticationError::",
        "createSessionError:148:(context:string, details?::Error,):InvalidSessionError::",
        "createOrganizationError:163:(context:string, originalError?::MissingOrganizationError::",
        "createJWTError:174:(operation:string, details?::Error,):InvalidJWTError::",
        "createNetworkError:189:(operation:string, originalError?::NetworkError::",
        "createConfigurationError:200:(component:string, issue::Error,):ConfigurationError::",
        "isSupabaseError:215:(error:unknown):::",
        "isAuthenticationError:219:(error:unknown,):::",
        "isSessionExpiredError:225:(error:unknown,):::",
        "isInvalidSessionError:231:(error:unknown,):::",
        "isMissingOrganizationError:237:(error:unknown,):::",
        "isInvalidJWTError:243:(error:unknown):::",
        "isNetworkError:247:(error:unknown):::",
        "isConfigurationError:251:(error:unknown,):::"
      ],
      {
        "with": [
          "12",
          [
            "constructor:21:(type:AuthErrorType, message:string, originalError?:Error)::",
            "__init__:21:(type:AuthErrorType, message:string, originalError?:Error)::"
          ]
        ],
        "to": [
          "14",
          [
            "constructor:21:(type:AuthErrorType, message:string, originalError?:Error)::",
            "__init__:21:(type:AuthErrorType, message:string, originalError?:Error)::"
          ]
        ],
        "SupabaseError": [
          "18",
          [
            "constructor:21:(type:AuthErrorType, message:string, originalError?:Error)::",
            "__init__:21:(type:AuthErrorType, message:string, originalError?:Error)::"
          ]
        ],
        "AuthenticationError": [
          "72",
          [
            "constructor:73:(message:string, originalError?:Error)::",
            "__init__:73:(message:string, originalError?:Error)::"
          ]
        ],
        "SessionExpiredError": [
          "79",
          [
            "constructor:80:(message = \"Session has expired\", originalError?:Error)::",
            "__init__:80:(message = \"Session has expired\", originalError?:Error)::"
          ]
        ],
        "InvalidSessionError": [
          "86",
          [
            "constructor:87:(message:string, originalError?:Error)::",
            "__init__:87:(message:string, originalError?:Error)::"
          ]
        ],
        "MissingOrganizationError": [
          "93",
          [
            "__init__:94:(message = \"Organization context is missing or invalid\", originalError?:Error,)::"
          ]
        ],
        "InvalidJWTError": [
          "103",
          [
            "constructor:104:(message:string, originalError?:Error)::",
            "__init__:104:(message:string, originalError?:Error)::"
          ]
        ],
        "NetworkError": [
          "110",
          [
            "constructor:111:(message:string, originalError?:Error)::",
            "__init__:111:(message:string, originalError?:Error)::"
          ]
        ],
        "ConfigurationError": [
          "117",
          [
            "constructor:118:(message:string, originalError?:Error)::",
            "__init__:118:(message:string, originalError?:Error)::"
          ]
        ]
      }
    ],
    "sr/lib/supabase/multi-tenant-client.ts": [
      "t",
      [
        "createOrganizationAwareClient:63:async ():Promise<OrganizationAwareClient>::",
        "createOptionalOrganizationClient:95:async ():Promise<::",
        "hasOrganizationContext:118:(client:Awaited<ReturnType<typeof createOptionalOrganizationClient>>,):::",
        "withOrganizationClient:152:(action:(client::T):createOrganizationAwareClient:"
      ]
    ],
    "sr/lib/supabase/rls-helpers.ts": [
      "t",
      [
        "updateUserOrganization:41:async (userId:string, organizationId::Promise<void>::",
        "getUserOrganizationId:80:async (supabase?:SupabaseClient,):::",
        "getUserWithOrganization:118:async (supabase?:SupabaseClient,):::",
        "removeUserOrganization:156:async (userId:string):::",
        "hasOrganizationContext:180:(user:Awaited<ReturnType<SupabaseClient[\"auth\"][\"getUser\"]>>[\"data\"][\"user\"],):::",
        "validateOrganizationContext:198:async (supabase?:SupabaseClient,)::getUserWithOrganization:"
      ],
      {
        "OrganizationContextError": [
          "20",
          [
            "constructor:21:(message = \"User does not have organization context\")::",
            "__init__:21:(message = \"User does not have organization context\")::"
          ]
        ]
      }
    ],
    "sr/lib/supabase/server.ts": [
      "t",
      [
        "createClient:23:async ():createServerClient,setAll:",
        "createAdminClient:83:async ():createServerClient,setAll:",
        "getCurrentUser:143:async ():Promise<\n  Awaited<ReturnType<SupabaseClient[\"auth\"][\"getUser\"]>>[\"data\"][\"user\"]\n>::",
        "getCurrentUserOrganizationId:174:async ():Promise<string | null>::",
        "requireOrganizationContext:193:async ():Promise<::"
      ]
    ],
    "sr/lib/supabase/type-guards.ts": [
      "t",
      [
        "isSupabaseUser:28:(value:unknown):::",
        "isPinPointSupabaseUser:42:(value:unknown,)::isSupabaseUser:",
        "isSupabaseAuthError:54:(value:unknown):::",
        "isSuccessfulUserResponse:66:(response:UserResponse,):::",
        "isSuccessfulAuthResponse:79:(response:AuthResponse,):::",
        "isSuccessfulListUsersResponse:96:(response:unknown,):::",
        "isSuccessfulCreateUserResponse:114:(response:unknown,):::",
        "isSuccessfulDeleteUserResponse:130:(response:any,):::",
        "classifySupabaseError:143:(error:AuthError):::",
        "hasValidResponseStructure:181:(response:unknown,):::",
        "extractUserFromResponse:195:(response:unknown)::hasValidResponseStructure,isSupabaseUser:",
        "extractErrorFromResponse:216:(response:unknown):::",
        "hasValidPinPointMetadata:242:(user:User,):::",
        "extractOrganizationId:255:(user:User)::hasValidPinPointMetadata:",
        "extractUserRole:263:(user:User)::hasValidPinPointMetadata:",
        "validateSupabaseResponse:288:(response:unknown, expectedDataValidator?::unknown):extractErrorFromResponse,hasValidResponseStructure:"
      ]
    ],
    "sr/lib/supabase/types.ts": [
      "t",
      [
        "isPinPointSupabaseUser:123:(user:SupabaseUser,):::",
        "isPinPointSupabaseSession:129:(session:SupabaseSession,)::isPinPointSupabaseUser:",
        "isValidOrganizationContext:135:(context:unknown,):::"
      ]
    ],
    "sr/lib/temp-production-overrides.ts": [
      "t",
      [
        "shouldForcePreviewBehavior:21:():boolean::",
        "shouldEnablePreviewAuthInProduction:29:():boolean::"
      ]
    ],
    "sr/lib/tracing.ts": [
      "t",
      [
        "generateTraceId:14:():string::",
        "generateRequestId:18:():string::",
        "getTraceContext:22:():TraceContext | undefined::",
        "createTraceContext:26:():TraceContext::"
      ]
    ],
    "sr/lib/users/roleManagementValidation.ts": [
      "t",
      [
        "validateRoleAssignment:100:(input:RoleAssignmentInput, targetRole::Membership | null, allMemberships:readonly Membership[], context:RoleManagementContext,):RoleValidationResult:validateAdminCountPreservation,validateOrganizationBoundary,validateRoleAssignmentRules,validateUserMembership:",
        "validateUserRemoval:163:(membership:Membership, allMemberships::RoleManagementContext,):RoleValidationResult:validateAdminCountForRemoval,validateUserMembership,validateUserRemovalRules:",
        "validateRoleReassignment:202:(input:RoleReassignmentInput, roleToDelete::Role | null, memberships:readonly Membership[], context:RoleManagementContext,):RoleReassignmentValidationResult:validateReassignmentRole,validateRoleDeletion:",
        "validateOrganizationBoundary:263:(role:Role, expectedOrganizationId::RoleValidationResult::",
        "validateUserMembership:280:(membership:Membership | null, organizationId::RoleValidationResult::",
        "validateAdminCountPreservation:305:(currentMembership:Membership, newRole::readonly Membership[],):AdminCountValidationResult:countAdmins:",
        "validateAdminCountForRemoval:342:(membership:Membership, allMemberships::AdminCountValidationResult:countAdmins:",
        "validateRoleAssignmentRules:370:(currentMembership:Membership, newRole::RoleManagementContext,):RoleValidationResult::",
        "validateUserRemovalRules:391:(_membership:Membership, _context::RoleValidationResult::",
        "validateRoleDeletion:403:(role:Role, _context::RoleValidationResult::",
        "validateReassignmentRole:421:(reassignRole:Role, roleToDelete::RoleManagementContext,):RoleValidationResult:validateOrganizationBoundary:",
        "countAdmins:456:(memberships:readonly Membership[]):::",
        "getAdminMembers:464:(memberships:readonly Membership[],):::",
        "isAdminRoleChange:473:(currentRole:Role, newRole::::",
        "getRoleAssignmentEffects:495:(currentMembership:Membership, newRole::readonly Membership[],):::",
        "validateBatchRoleOperations:525:(operations:readonly { readonly type::Membership; readonly newRole?:Role; }[], allMemberships:readonly Membership[], _context:RoleManagementContext,):RoleValidationResult:countAdmins:"
      ]
    ],
    "sr/lib/utils.ts": [
      "t",
      [
        "cn:4:(...inputs:ClassValue[])::",
        "muiToTailwind:9:(_muiStyles:Record<string, any>)::"
      ]
    ],
    "sr/lib/utils/api-response-transformers.ts": [
      "t",
      [
        "transformIssueResponse:43:(issue:Record<string, unknown>,):::",
        "transformCommentResponse:68:(comment:Record<string, unknown>,):::",
        "transformAttachmentResponse:80:(attachment:Record<string, unknown>,):::",
        "transformIssuesResponse:100:(issues:Record<string, unknown>[],)::transformIssueResponse:",
        "transformCommentsResponse:113:(comments:Record<string, unknown>[],)::transformCommentResponse:",
        "transformAttachmentsResponse:126:(attachments:Record<string, unknown>[],)::transformAttachmentResponse:",
        "transformIssueWithRelationsResponse:142:(issueWithRelations:Record<string, unknown>,):::",
        "transformCommentWithAuthorResponse:157:(commentWithAuthor:Record<string, unknown>,):::",
        "transformForDatabaseInsert:172:(data:Record<string, unknown>,):::",
        "safeTransformRelation:186:(relation:Record<string, unknown> | null | undefined, transformer::Record<string, unknown>)::"
      ]
    ],
    "sr/lib/utils/auth-response-transformers.ts": [
      "t",
      [
        "transformUserResponse:71:(user:unknown):::",
        "transformOrganizationResponse:87:(org:unknown,):::",
        "transformMembershipResponse:110:(membership:unknown,)::transformUserResponse:",
        "transformUploadAuthContextResponse:170:(ctx:unknown,)::transformMembershipResponse,transformOrganizationResponse:",
        "transformAuthUserProfile:212:(profile:unknown):::",
        "transformAuthArray:228:(items:unknown[], transformer::unknown)::",
        "transformUserArray:242:(users:unknown[])::transformAuthArray:",
        "transformMembershipArray:249:(memberships:unknown[],)::transformAuthArray:",
        "transformOrganizationArray:258:(organizations:unknown[],)::transformAuthArray:"
      ]
    ],
    "sr/lib/utils/case-transformers.ts": [
      "t",
      [
        "toCamelCase:50:(str:string):::",
        "toSnakeCase:82:(str:string):::",
        "isPlainObject:110:(obj:unknown):::",
        "transformKeysToCamelCase:176:(obj:unknown)::isPlainObject,toCamelCase,transformKeysToCamelCase:",
        "transformKeysToSnakeCase:228:(obj:unknown)::isPlainObject,toSnakeCase,transformKeysToSnakeCase:"
      ]
    ],
    "sr/lib/utils/id-generation.ts": [
      "t",
      [
        "generateId:7:():string::",
        "generatePrefixedId:25:(prefix:string)::generateId:"
      ]
    ],
    "sr/lib/utils/image-processing.ts": [
      "t",
      [
        "processImageFile:12:async (file:File,)::calculateDimensions:",
        "calculateDimensions:104:(originalWidth:number, originalHeight::number, maxHeight:number,):::",
        "processIssueImageFile:130:async (file:File,)::calculateDimensions:",
        "getDefaultAvatarUrl:222:():string::"
      ]
    ],
    "sr/lib/utils/machine-response-transformers.ts": [
      "t",
      [
        "transformMachineResponse:89:(machine:unknown):::",
        "transformMachinesResponse:115:(machines:unknown,)::transformMachineResponse:",
        "transformLocationResponse:144:(location:unknown)::transformMachinesResponse:",
        "transformLocationsResponse:182:(locations:unknown,)::transformLocationResponse:",
        "transformMachineForIssuesResponse:209:(machine:Record<string, unknown>,):::",
        "transformMachinesForIssuesResponse:222:(machines:unknown,)::transformMachineForIssuesResponse:",
        "transformApiRequestToDb:257:(data:Record<string, unknown>,):::",
        "transformDbResultToApiResponse:273:(data:unknown):::"
      ]
    ],
    "sr/lib/utils/membership-transformers.ts": [
      "t",
      [
        "transformMembershipForValidation:20:(membership:unknown,):::",
        "transformMembershipsForValidation:56:(memberships:unknown[],):::",
        "transformRoleForValidation:70:(role:unknown):::"
      ]
    ],
    "sr/server/api/routers/issue.status.ts": [
      "t",
      [
        "generateId:21:():string::",
        "isValidCategory:146:(category:string,):::"
      ]
    ],
    "sr/server/api/routers/utils/commentValidation.ts": [
      "t",
      [
        "validateCommentExists:30:(comment:CommentData | null | undefined, organizationId::ValidationResult::",
        "validateCommentDeletionPermissions:54:(comment:CommentData, context::ValidationResult::",
        "validateCommentEditPermissions:76:(comment:CommentData, context::ValidationResult::",
        "validateCommentDeletionState:94:(comment:CommentData, shouldBeDeleted::ValidationResult::",
        "validateAdminPermissions:120:(userPermissions:string[], requiredPermission = \"issue::ValidationResult::",
        "validateOrganizationMembership:137:(membership:{ id::string; organizationId:string } | null, context:ValidationContext,):ValidationResult::",
        "validateCommentDeletion:164:(comment:CommentData | null | undefined, membership::string; userId:string; organizationId:string } | null, context:ValidationContext,):ValidationResult:validateCommentDeletionPermissions,validateCommentDeletionState,validateCommentExists,validateOrganizationMembership:",
        "validateCommentRestoration:217:(comment:CommentData | null | undefined, context::ValidationResult:validateAdminPermissions,validateCommentDeletionState,validateCommentExists:",
        "validateCommentEdit:257:(comment:CommentData | null | undefined, context::ValidationResult:validateCommentDeletionState,validateCommentEditPermissions,validateCommentExists:"
      ]
    ],
    "sr/server/auth/permissions.ts": [
      "t",
      [
        "hasPermission:29:async (membership:{ roleId::string, db:DrizzleClient,):Promise<boolean>::",
        "requirePermission:76:async (membership:{ roleId::string, db:DrizzleClient,):Promise<void>:hasPermission:",
        "getUserPermissions:96:async (membership:{ roleId::DrizzleClient,):Promise<string[]>::",
        "hasPermissionForSession:143:async (session:Session | null, permission::DrizzleClient,):Promise<boolean>:hasPermission:",
        "requirePermissionForSession:162:async (session:Session | null, permission::DrizzleClient,):Promise<void>:requirePermission:",
        "getUserPermissionsForSession:180:async (session:Session | null, db::Promise<string[]>:getUserPermissions:",
        "getUserPermissionsForSupabaseUser:197:async (user:PinPointSupabaseUser | null, db::Promise<string[]>:getUserPermissionsForSupabaseUser:"
      ]
    ],
    "sr/server/auth/types.ts": [
      "t",
      [
        "isValidUser:60:(user:unknown):::",
        "isValidOrganization:68:(org:unknown):::",
        "isValidMembership:76:(membership:unknown,):::"
      ]
    ],
    "sr/server/auth/uploadAuth.ts": [
      "t",
      [
        "transformUploadAuthContext:41:(ctx:unknown):::",
        "getUploadAuthContext:50:async (req:NextRequest, drizzle::Promise<UploadAuthContext>:transformUploadAuthContext:",
        "requireUploadPermission:120:(ctx:UploadAuthContext, permission::void::",
        "validateUploadAuth:132:(_drizzle:DrizzleClient, _sessionId?::string,):void::"
      ]
    ],
    "sr/server/auth/validation.ts": [
      "t",
      [
        "validateGoogleOAuth:20:():OAuthValidationResult::",
        "validateAllOAuthProviders:76:():OAuthValidationResult[]::",
        "validateAndLogOAuthConfig:92:():boolean::",
        "assertOAuthConfigValid:149:():void::"
      ]
    ],
    "sr/server/db/drizzle.ts": [
      "t",
      [
        "getDatabaseConfig:19:():DatabaseConfig::",
        "createDrizzleClientInternal:52:():DrizzleClient::",
        "createDrizzleClient:171:():DrizzleClient::",
        "closeDrizzleConnection:185:async ():Promise<void>::"
      ],
      {
        "DatabaseSingleton": [
          "93",
          [
            "getClient:106:():DrizzleClient::",
            "cleanup:146:async ():Promise<void>::",
            "reset:159:():void::"
          ]
        ]
      }
    ],
    "sr/server/db/provider.ts": [
      "t",
      [
        "getGlobalDatabaseProvider:31:():DatabaseProvider::"
      ],
      {
        "DatabaseProvider": [
          "7",
          [
            "getClient:11:():DrizzleClient::",
            "disconnect:17:async ():Promise<void>::",
            "reset:23:():void::"
          ]
        ]
      }
    ],
    "sr/server/db/queries/audit-queries.ts": [
      "t",
      [
        "getMembershipsWithUserAndRole:29:async (organizationId:string,):::",
        "getMachineByQrCode:67:async (qrCodeId:string):::",
        "getIssuesByStatus:98:async (organizationId:string, statusName::Promise<::",
        "getIssuesByStatus_INCORRECT:140:async (organizationId:string)::"
      ]
    ],
    "sr/server/db/seed/auth-users.ts": [
      "t",
      [
        "getUsersForOrganization:123:(organizationId:string):::",
        "getUserIdForEmail:137:(email:string):::",
        "createServiceRoleClient:155:():SupabaseClient::",
        "getExistingAuthUsers:171:async ():Promise<Map<string, User>>::",
        "upsertSupabaseAuthUser:207:async (params:CreateUserParams, existingUsers::Promise<::",
        "waitForUserRecord:286:async (user_id:string, email::Promise<boolean>::",
        "processBatchUsers:328:async (userList:UserData[], organization_id::Promise<BatchProcessResult>:getExistingAuthUsers,upsertSupabaseAuthUser,waitForUserRecord:",
        "deleteExistingDevUsers:503:async (userList:UserData[])::createServiceRoleClient:",
        "createUsersDirectly:565:async (userList:UserData[], organization_id::Promise<void>:getUserIdForEmail:",
        "seedAuthUsers:630:async (organization_id:string, target::Promise<SeedResult<UserData[]>>:createUsersDirectly,deleteExistingDevUsers,getUsersForOrganization,processBatchUsers:"
      ]
    ],
    "sr/server/db/seed/constants.ts": [
      "t",
      [
        "createMockAdminContext:316:():TestMockContext::",
        "createMockMemberContext:323:(memberNumber:1 | 2 = 1,):::"
      ],
      {
        "for": [
          "357",
          []
        ]
      }
    ],
    "sr/server/db/seed/full-issues.ts": [
      "t",
      [
        "mapSeverityToPriority:5:(severity?:string):::",
        "mapStatusToStatusId:15:(status?:string):::",
        "mapReporterToUserId:31:(email?:string):::",
        "knownMachineByTitle:51:(title?:string, opdb?::string | undefined::",
        "isMinimalIssue:347:(obj:unknown):::"
      ]
    ],
    "sr/server/db/seed/infrastructure.ts": [
      "t",
      [
        "getDefaultLocationId:100:(orgId:string):::",
        "createGlobalPermissions:114:async ():Promise<void>::",
        "createOrganizationWithRoles:150:async (orgData:{ id?::string; subdomain:string; logoUrl?:string; }):Promise<Organization>:createSystemRoles,createTemplateRole:",
        "createDefaultPriorities:208:async (organization_id:string):::",
        "createDefaultCollectionTypes:246:async (organization_id:string,):::",
        "createDefaultIssueStatuses:285:async (organization_id:string,):::",
        "createSystemRoles:367:async (organization_id:string):::",
        "createTemplateRole:434:async (organization_id:string, templateName::Promise<void>::",
        "createDefaultLocation:489:async (organization_id:string)::getDefaultLocationId:",
        "seedInfrastructure:508:async ():Promise<\n  SeedResult<DualOrganizationSetup>\n>::"
      ]
    ],
    "sr/server/db/seed/mapping-validator.ts": [
      "t",
      [
        "isDualOrgMapping:49:(value:unknown):::",
        "isValidOrganizationType:63:(value:unknown,):::",
        "getOrganizationType:72:(organizationId:string):::",
        "isValidEmailKey:85:(email:string,):::",
        "getMembershipIdSafe:94:(email:string, organizationId::MappingValidationResult<string>:getOrganizationType,isDualOrgMapping,isValidEmailKey:",
        "isValidPriorityName:138:(name:string,):::",
        "getPriorityIdSafe:147:(priorityName:string, organizationId::MappingValidationResult<string>:getOrganizationType,isDualOrgMapping,isValidPriorityName:",
        "isValidStatusName:191:(name:string,):::",
        "getStatusIdSafe:200:(statusName:string, organizationId::MappingValidationResult<string>:getOrganizationType,isDualOrgMapping,isValidStatusName:",
        "isValidRoleName:244:(name:string,):::",
        "getRoleIdSafe:253:(roleName:string, organizationId::MappingValidationResult<string>:getOrganizationType,isDualOrgMapping,isValidRoleName:",
        "isValidCollectionTypeName:297:(name:string,):::",
        "getCollectionTypeIdSafe:306:(typeName:string, organizationId::MappingValidationResult<string>:getOrganizationType,isDualOrgMapping,isValidCollectionTypeName:",
        "throwIfMappingFailed:427:(result:MappingValidationResult<T>, context?::string },):T::",
        "getMembershipIdOrThrow:444:(email:string, organizationId::string:getMembershipIdSafe,throwIfMappingFailed:",
        "getPriorityIdOrThrow:455:(priorityName:string, organizationId::string:getPriorityIdSafe,throwIfMappingFailed:",
        "getStatusIdOrThrow:466:(statusName:string, organizationId::string:getStatusIdSafe,throwIfMappingFailed:",
        "getRoleIdOrThrow:477:(roleName:string, organizationId::string:getRoleIdSafe,throwIfMappingFailed:",
        "getCollectionTypeIdOrThrow:488:(typeName:string, organizationId::string:getCollectionTypeIdSafe,throwIfMappingFailed:"
      ],
      {
        "for": [
          "391",
          [
            "__init__:400:(result:MappingValidationResult<any>, context?:{ operation?:string },)::"
          ]
        ],
        "MappingValidationError": [
          "393",
          [
            "__init__:400:(result:MappingValidationResult<any>, context?:{ operation?:string },)::"
          ]
        ]
      }
    ],
    "sr/server/db/seed/sample-data.ts": [
      "t",
      [
        "extractUniqueGames:61:(dataAmount:DataAmount):::",
        "createModels:105:async (games:UniqueGame[]):::",
        "createMachines:161:async (organization_id:string, games::Promise<void>::",
        "createCompetitorMachine:254:async ():Promise<void>::",
        "createSampleIssues:311:async (organization_id:string, dataAmount::Promise<void>::",
        "seedSampleData:382:async (organization_id:string, dataAmount::Promise<SeedResult<SampleDataResult>>:createCompetitorMachine,createMachines,createModels,createSampleIssues,extractUniqueGames:",
        "seedSampleDataWithDb:449:async (organization_id:string, dataAmount::Promise<void>:seedSampleData:"
      ]
    ],
    "sr/server/db/seed/seed-utilities.ts": [
      "t",
      [
        "seedLoggerInfo:55:(message:string):::",
        "seedLoggerSuccess:64:(message:string):::",
        "seedLoggerError:73:(context:string, error::void::",
        "seedLoggerWarn:80:(message:string):::",
        "seedValidatorValidateTarget:104:(target:string):::",
        "seedValidatorValidateDataAmount:111:(dataAmount:string,):::",
        "seedValidatorValidateEnvironment:120:(target:SeedTarget, supabaseUrl?::ValidationResult::",
        "seedValidatorValidateAll:144:(params:{ target::string; environment:string; supabaseUrl?:string; }):ValidationResult:seedValidatorValidateDataAmount,seedValidatorValidateEnvironment,seedValidatorValidateTarget:",
        "seedValidatorShowUsage:190:():void::",
        "seedMapperGetMembershipId:226:async (email:string, organization_id::Promise<string>::",
        "seedMapperGetPriorityId:244:async (priorityName:string, organization_id::Promise<string>::",
        "seedMapperGetStatusId:262:async (statusName:string, organization_id::Promise<string>::",
        "seedMapperGetRoleId:280:async (roleName:string, organization_id::Promise<string>::",
        "seedMapperGetCollectionTypeId:298:async (typeName:string, organization_id::Promise<string>::",
        "withErrorContext:336:async (context:string, operation::()::",
        "createSeedResult:351:(data:T, recordsCreated::number,):SeedResult<T>::",
        "createFailedSeedResult:367:(error:unknown, startTime::SeedResult<T>::",
        "confirmDestructiveOperation:441:async (target:SeedTarget,):::"
      ],
      {
        "SeedError": [
          "325",
          [
            "constructor:326:(context:string, operation:string, cause?:unknown)::",
            "__init__:326:(context:string, operation:string, cause?:unknown)::"
          ]
        ],
        "SeedConfigBuilder": [
          "384",
          [
            "withDataAmount:392:(dataAmount:DataAmount):this::",
            "withEnvironment:397:(environment:string):this::",
            "withSupabaseUrl:402:(supabaseUrl:string):this::",
            "build:407:():SeedConfig::"
          ]
        ]
      }
    ],
    "sr/server/db/setup-rls.ts": [
      "t",
      [
        "createDatabaseConnection:42:():postgres.Sql::",
        "setupRLS:63:async ():Promise<void>::",
        "main:208:async ():Promise<void>::"
      ],
      {
        "c": [
          "105",
          []
        ]
      }
    ],
    "sr/server/db/utils/common-queries.ts": [
      "t",
      [
        "withOrganizationScope:19:(column:PgColumn, organizationId::SQL::",
        "excludeSoftDeleted:30:(deletedAtColumn:PgColumn):::",
        "withOrgScopeAndNotDeleted:40:(orgColumn:PgColumn, organizationId::PgColumn,):SQL:excludeSoftDeleted,withOrganizationScope:",
        "getSingleRecord:62:async (query:Promise<T[]>,):::",
        "getSingleRecordWithLimit:74:async (baseQuery:T,):::",
        "validateQueryFields:103:(tableName:Parameters<typeof devValidateFields>[0], fields::void::"
      ]
    ],
    "sr/server/db/utils/field-validation.ts": [
      "t",
      [
        "getFieldMapping:123:(camelCaseField:string):::",
        "isCamelCase:133:(fieldName:string):::",
        "validateFieldExists:145:(_tableName:TableName, fieldName::::",
        "convertToSnakeCase:174:(camelCase:string):::",
        "validateFieldAccess:185:(tableName:TableName, fields::::",
        "devValidateFields:202:(tableName:TableName, fields::void:validateFieldAccess:",
        "validateCommonPattern:244:(tableName:TableName, pattern::ReturnType<typeof validateFieldAccess>:validateFieldAccess:"
      ]
    ],
    "sr/server/services/pinballmapService.ts": [
      "t",
      [
        "syncLocationGames:451:async (db:DrizzleClient, locationId::Promise<SyncResult>::",
        "processFixtureData:459:async (db:DrizzleClient, fixtureData::string,):Promise<::"
      ],
      {
        "PinballMapService": [
          "33",
          [
            "constructor:34:(private db:DrizzleClient)::",
            "enableIntegration:39:async (organizationId:string):Promise<void>::",
            "syncLocation:93:async (locationId:string):Promise<SyncResult>::",
            "getOrganizationSyncStatus:409:async (organizationId:string):Promise<::",
            "__init__:34:(private db:DrizzleClient)::"
          ]
        ]
      }
    ],
    "sr/server/services/validation-helper.ts": [
      "t",
      [
        "validateDrizzleFieldAccess:38:(fieldName:string):::",
        "validateQueryFields:56:(query:object, expectedFields?::void:validateDrizzleFieldAccess:",
        "isSnakeCaseResult:83:(result:object):::",
        "auditDatabaseQuery:95:(queryObject:object)::validateQueryFields:"
      ]
    ],
    "sr/test/helpers/anonymous-test-helpers.ts": [
      "t",
      [
        "createAnonymousTestContext:46:(options:{ /** Organization to use for testing (defaults to primary)::",
        "createCrossOrgTestContext:120:():::",
        "mockSessionVariableSetup:143:(mockDb:MockProxy<DrizzleClient>, _organizationId::void::",
        "expectSessionVariableSet:170:(mockDb:MockProxy<DrizzleClient>, expectedOrgId::void::",
        "createCrossOrgAccessScenario:187:():::"
      ]
    ],
    "sr/test/helpers/service-test-helpers.ts": [
      "t",
      [
        "createMockDatabase:21:():MockProxy<DrizzleClient>::",
        "createServiceTestContext:103:():ServiceTestContext::",
        "expectOrganizationScoping:117:(mockCall:unknown, expectedOrgId::void::"
      ]
    ],
    "sr/test/integration/archetype-integration-example.test.ts": [
      "t",
      [
        "mockAction:65:async ()::",
        "getIssuesForOrg:99:async ()::",
        "getIssueById:131:async (issueId:string)::",
        "createIssueFlow:213:async (formData:FormData)::"
      ]
    ],
    "sr/test/rsc-helpers/dal-test-helpers.ts": [
      "t",
      [
        "createMockAuthContext:12:(userId?:string, orgId?:::",
        "mockSupabaseAuth:33:(mockContext = createMockAuthContext()::",
        "testDALFunction:53:async (dalFunction:()::",
        "assertOrganizationScoping:65:async (dalFunction:()::"
      ]
    ],
    "sr/test/rsc-helpers/server-action-test-helpers.ts": [
      "t",
      [
        "createTestFormData:12:(fields:Record<string, string | File>,):::",
        "mockServerActionAuth:28:(mockContext = createMockAuthContext()::",
        "testServerAction:57:async (serverAction:(formData:::",
        "expectDatabaseChange:72:async (options:{ table::Record<string, any>; toExist:boolean; changes?:Record<string, any>; })::"
      ]
    ],
    "sr/test/templates/e2e.template.ts": [
      "t",
      [
        "authenticateTestUser:356:async (page:Page)::",
        "setOrganizationContext:364:async (page:Page, orgId:::",
        "clearAuthentication:370:async (page:Page)::",
        "expireSession:378:async (page:Page)::"
      ]
    ],
    "sr/trpc/react.tsx": [
      "t",
      [
        "TRPCReactProvider:53:(props:{ children::React.JSX.Element:getBaseUrl,getQueryClient,isClientDevelopment:",
        "getBaseUrl:90:():string::",
        "isClientDevelopment:17:():boolean::",
        "getQueryClient:26:():QueryClient::"
      ]
    ],
    "supabase/t/run-tests.sh": [
      "s",
      [
        "log_info:0:()::",
        "log_success:0:()::",
        "log_warning:0:()::",
        "log_error:0:()::",
        "check_psql:0:()::",
        "check_pg_prove:0:()::",
        "test_connection:0:()::",
        "setup_pgtap:0:()::",
        "setup_test_environment:0:()::",
        "run_tests_with_pg_prove:0:()::",
        "run_tests_with_psql:0:()::",
        "run_tests:0:()::",
        "main:0:()::"
      ]
    ]
  },
  "g": [
    [
      "isDevelopmentOrTest",
      "isDevelopment"
    ],
    [
      "createWithRoles",
      "create"
    ],
    [
      "deleteTestBucket",
      "clearStorageBucket"
    ],
    [
      "main",
      "setupRLS"
    ],
    [
      "transformLocationResponse",
      "transformMachinesResponse"
    ],
    [
      "ActionButton",
      "usePermissions"
    ],
    [
      "validateMachineOrganizationBoundary",
      "validateResourceOrganizationBoundary"
    ],
    [
      "createTraceContext",
      "generateTraceId"
    ],
    [
      "withOrgScopeAndNotDeleted",
      "withOrganizationScope"
    ],
    [
      "validateDrizzleConfiguration",
      "expectPoolConfiguration"
    ],
    [
      "processFiles",
      "listSourceFiles"
    ],
    [
      "getCurrentUserOrganizationId",
      "getCurrentUser"
    ],
    [
      "getFilterField",
      "getFilterFieldsForEntity"
    ],
    [
      "createTRPCCallerForIssues",
      "createIssueRouterContext"
    ],
    [
      "getUserPermissionsForSession",
      "getUserPermissions"
    ],
    [
      "handleSubmit",
      "saveRecentSearch"
    ],
    [
      "processBatchUsers",
      "upsertSupabaseAuthUser"
    ],
    [
      "validateMemorySafety",
      "getLineNumber"
    ],
    [
      "createSystemRoleSet",
      "createUnauthenticatedRole"
    ],
    [
      "withMultiOrgTest",
      "setTestSession"
    ],
    [
      "createRouterTestSuite",
      "testAdminOnlyProcedure"
    ],
    [
      "getStatusIdSafe",
      "getOrganizationType"
    ],
    [
      "createRouterTestSuite",
      "testPublicProcedure"
    ],
    [
      "loginAsUser",
      "waitForAuthentication"
    ],
    [
      "getSeededIssue",
      "getCachedSeedData"
    ],
    [
      "createComplexIssueFactory",
      "getSingleIssue"
    ],
    [
      "validateFormData",
      "actionError"
    ],
    [
      "createSingleComment",
      "createUserFactory"
    ],
    [
      "updateSession",
      "createServerClient"
    ],
    [
      "getRoleIdOrThrow",
      "getRoleIdSafe"
    ],
    [
      "setupRLS",
      "createDatabaseConnection"
    ],
    [
      "createMachinePermissions",
      "create"
    ],
    [
      "hasCycle",
      "hasCycle"
    ],
    [
      "validateTestArchetype",
      "validateMemorySafety"
    ],
    [
      "createMockMachine",
      "createMockModel"
    ],
    [
      "getRoleIdSafe",
      "isValidRoleName"
    ],
    [
      "transformAttachmentsResponse",
      "transformAttachmentResponse"
    ],
    [
      "PermissionButton",
      "getDefaultTooltipText"
    ],
    [
      "getEnvironmentName",
      "isPreview"
    ],
    [
      "createMultipleForTesting",
      "createWithMemberships"
    ],
    [
      "createAllPermissions",
      "createAdminPermissions"
    ],
    [
      "getSeededMemberSupabaseUser",
      "getSeededMember"
    ],
    [
      "PaginationServer",
      "generatePageNumbers"
    ],
    [
      "getClient",
      "createClient"
    ],
    [
      "TRPCReactProvider",
      "getQueryClient"
    ],
    [
      "validateCommentRestoration",
      "validateAdminPermissions"
    ],
    [
      "testDALFunction",
      "mockSupabaseAuth"
    ],
    [
      "handleSubmit",
      "forEach"
    ],
    [
      "validateRoleAssignment",
      "validateAdminCountPreservation"
    ],
    [
      "assertOrganizationScoping",
      "testDALFunction"
    ],
    [
      "validateOrganizationAccess",
      "createServerSupabaseClient"
    ],
    [
      "getEnvironmentName",
      "isDevelopment"
    ],
    [
      "validateBatchRoleOperations",
      "countAdmins"
    ],
    [
      "validateCommentRestoration",
      "validateCommentDeletionState"
    ],
    [
      "createFallbackLogger",
      "createFallbackLogger"
    ],
    [
      "validateTestArchetype",
      "validateArchetypeCompliance"
    ],
    [
      "validateLocationOrganizationBoundary",
      "validateResourceOrganizationBoundary"
    ],
    [
      "shouldEnableTestLogin",
      "isDevelopment"
    ],
    [
      "validateFormData",
      "actionSuccess"
    ],
    [
      "withMachineOwnerBusinessLogicSetup",
      "setupTestData"
    ],
    [
      "devValidateFields",
      "validateFieldAccess"
    ],
    [
      "shouldRequireGoogleOAuth",
      "isProduction"
    ],
    [
      "createAdminMembership",
      "createTestUser"
    ],
    [
      "toggleSelectAll",
      "isAllSelected"
    ],
    [
      "createSingleActivity",
      "createUserFactory"
    ],
    [
      "createIssueFactory",
      "createSingleIssue"
    ],
    [
      "generateIssueCreationNotifications",
      "createNotificationForUser"
    ],
    [
      "createWithPermissions",
      "createWithRole"
    ],
    [
      "createAdmin",
      "createWithRole"
    ],
    [
      "setupAuthTestData",
      "getSeededPlayer"
    ],
    [
      "createWithMemberships",
      "createSystemRoleSet"
    ],
    [
      "validateSingleFile",
      "validateTestArchetype"
    ],
    [
      "createPermissionTestSuite",
      "expectPermissionRequired"
    ],
    [
      "validateUserPermissions",
      "getTransitionType"
    ],
    [
      "getPriorityIdOrThrow",
      "getPriorityIdSafe"
    ],
    [
      "validateStatusTransition",
      "validateUserPermissions"
    ],
    [
      "cleanMachineUrl",
      "parseMachineSearchParams"
    ],
    [
      "validatePublicOrganizationContextRequired",
      "validatePublicOrganizationContext"
    ],
    [
      "configureCIMocks",
      "createRemoteURL"
    ],
    [
      "transformKeysToCamelCase",
      "toCamelCase"
    ],
    [
      "LazyClientIsland",
      "loadComponent"
    ],
    [
      "log",
      "log"
    ],
    [
      "withMultiOrgTest",
      "setContext"
    ],
    [
      "SignOutButton",
      "handleSignOut"
    ],
    [
      "getPriorityIdSafe",
      "getOrganizationType"
    ],
    [
      "seedInfrastructure",
      "createDefaultPriorities"
    ],
    [
      "SidebarRail",
      "useSidebar"
    ],
    [
      "validateCommentEditWithTimeLimit",
      "validateCommentEditPermissions"
    ],
    [
      "validateTestArchetype",
      "validateImportStructure"
    ],
    [
      "withOrgScopeAndNotDeleted",
      "excludeSoftDeleted"
    ],
    [
      "getRolePermissions",
      "createMatrix"
    ],
    [
      "validateCommentEdit",
      "validateCommentEditPermissions"
    ],
    [
      "createClient",
      "setAll"
    ],
    [
      "createWithPermissions",
      "createCustomRole"
    ],
    [
      "createDrizzleClient",
      "createDrizzleClientInternal"
    ],
    [
      "seedInfrastructure",
      "createDefaultLocation"
    ],
    [
      "validateAdminCountPreservation",
      "countAdmins"
    ],
    [
      "generateOrganizationalReport",
      "getTopMachinesByIssues"
    ],
    [
      "getMembershipIdOrThrow",
      "throwIfMappingFailed"
    ],
    [
      "canEditCommentByTime",
      "getCommentAgeInMinutes"
    ],
    [
      "getUserPermissionsForSupabaseUser",
      "getUserPermissionsForSupabaseUser"
    ],
    [
      "validateRoleAssignment",
      "validateOrganizationBoundary"
    ],
    [
      "expectPermissionRequired",
      "createAuthenticatedContext"
    ],
    [
      "createStructuredError",
      "classifyGenericError"
    ],
    [
      "getUploadAuthContext",
      "transformUploadAuthContext"
    ],
    [
      "setupMultiOrgContext",
      "createOrgContext"
    ],
    [
      "ReportingService.__init__",
      "groupByPriority"
    ],
    [
      "setupAuthTestData",
      "createSupabaseUserFromSeeded"
    ],
    [
      "NotificationsListServer",
      "getNotificationColor"
    ],
    [
      "getSeededPlayer",
      "getCachedSeedData"
    ],
    [
      "logout",
      "clearSession"
    ],
    [
      "hasPermission",
      "getRolePermissions"
    ],
    [
      "createOrganizationWithRoles",
      "createTemplateRole"
    ],
    [
      "buildMapping",
      "collectSchemaColumns"
    ],
    [
      "getSeededUserByEmail",
      "getUserWithRoles"
    ],
    [
      "seedValidatorValidateAll",
      "seedValidatorValidateEnvironment"
    ],
    [
      "createPrimaryAdminContext",
      "createSeededMachineTestContext"
    ],
    [
      "createMembership",
      "createTestRole"
    ],
    [
      "createWithPermissions",
      "create"
    ],
    [
      "setupAllIssueListMocks",
      "setupTRPCMocks"
    ],
    [
      "validateRoleAssignment",
      "validateRoleAssignmentRules"
    ],
    [
      "createServerMockContext",
      "createMockSupabaseUser"
    ],
    [
      "StatusCategoryMultiSelect",
      "getGroupLabel"
    ],
    [
      "validateIssueAssignment",
      "validateAssigneeMembership"
    ],
    [
      "createClient",
      "createServerClient"
    ],
    [
      "urlParamsToFilters",
      "isValidSortOrder"
    ],
    [
      "createSessionFactory",
      "createUserFactory"
    ],
    [
      "createMockMachine",
      "createMockLocation"
    ],
    [
      "validateIssueCreation",
      "validateIssueCreationRules"
    ],
    [
      "validateCommentDeletion",
      "validateCommentDeletionState"
    ],
    [
      "deleteExistingDevUsers",
      "createServiceRoleClient"
    ],
    [
      "getCurrentUser",
      "createClient"
    ],
    [
      "createNumberedVariation",
      "createNumberedId"
    ],
    [
      "cleanIssueUrl",
      "buildIssueUrl"
    ],
    [
      "validateMultipleEntityOwnership",
      "validateRouterEntityOwnership"
    ],
    [
      "mockCurrentMembership",
      "createMockMembership"
    ],
    [
      "createCustomRole",
      "create"
    ],
    [
      "createTestDatabase",
      "verifyMigrationComplete"
    ],
    [
      "createCompetitorOrgContext",
      "createMockTRPCContext"
    ],
    [
      "getEnvironmentName",
      "getClientEnvironment"
    ],
    [
      "getEnvironmentName",
      "isProduction"
    ],
    [
      "createTestDatabase",
      "configureForBusinessLogicTesting"
    ],
    [
      "OrganizationLogoForm",
      "handleUrlChange"
    ],
    [
      "CreateIssuePage",
      "getUsersForAssignment"
    ],
    [
      "shouldEnableDemoLogin",
      "isPreview"
    ],
    [
      "getStatusIdOrThrow",
      "throwIfMappingFailed"
    ],
    [
      "validateCommentDeletion",
      "validateCommentExists"
    ],
    [
      "validateIssueAssignment",
      "validateAssignmentRules"
    ],
    [
      "withBusinessLogicTest",
      "withIsolatedTest"
    ],
    [
      "transformUploadAuthContextResponse",
      "transformMembershipResponse"
    ],
    [
      "shouldEnableCredentialsProvider",
      "isPreview"
    ],
    [
      "expectOrganizationRequired",
      "createAuthenticatedContext"
    ],
    [
      "isPinPointSupabaseUser",
      "isSupabaseUser"
    ],
    [
      "transformUserArray",
      "transformAuthArray"
    ],
    [
      "getMembershipIdSafe",
      "getOrganizationType"
    ],
    [
      "createMockIssue",
      "createMockUser"
    ],
    [
      "hasPermissionForSession",
      "hasPermission"
    ],
    [
      "TRPCReactProvider",
      "isClientDevelopment"
    ],
    [
      "configureDevelopmentMocks",
      "createLocalhost5432URL"
    ],
    [
      "getIssueCanonicalUrl",
      "buildIssueUrl"
    ],
    [
      "setupAllIssueListMocks",
      "setupNavigationMocks"
    ],
    [
      "createPrimaryMemberContext",
      "createSeededLocationTestContext"
    ],
    [
      "validateSingleFile",
      "generateValidationReport"
    ],
    [
      "shouldEnableCredentialsProvider",
      "isDevelopment"
    ],
    [
      "setup_test_database",
      "print_error"
    ],
    [
      "seedAuthUsers",
      "deleteExistingDevUsers"
    ],
    [
      "NotificationsListServer",
      "getNotificationIcon"
    ],
    [
      "generateOrganizationalReport",
      "calculateAvgResolutionTime"
    ],
    [
      "loginAsTechnician",
      "loginAsUserWithPermissions"
    ],
    [
      "getAllFilePaths",
      "getAllFilePaths"
    ],
    [
      "transformLocationsResponse",
      "transformLocationResponse"
    ],
    [
      "seedCompleteTestData",
      "seedTestInfrastructure"
    ],
    [
      "createIssueRouterContext",
      "createUserFactory"
    ],
    [
      "requirePermission",
      "hasPermission"
    ],
    [
      "validateCommentDeletion",
      "validateOrganizationMembership"
    ],
    [
      "createLocationPermissions",
      "create"
    ],
    [
      "getGroupIdFromOPDBId",
      "parseOPDBId"
    ],
    [
      "validateOrganizationContext",
      "getUserWithOrganization"
    ],
    [
      "getSelectionSummary",
      "getSelectedCount"
    ],
    [
      "createSingleAttachment",
      "createUserFactory"
    ],
    [
      "validateReassignmentRole",
      "validateOrganizationBoundary"
    ],
    [
      "ActiveFilters",
      "getMachineName"
    ],
    [
      "validateRoleReassignment",
      "validateReassignmentRole"
    ],
    [
      "validateRequiredFields",
      "getFormField"
    ],
    [
      "validateCommentDeletion",
      "validateCommentDeletionPermissions"
    ],
    [
      "createUnauthenticated",
      "createWithRole"
    ],
    [
      "verifyPublicOnlyContent",
      "verifyPublicContent"
    ],
    [
      "createIssueFactory",
      "createUserFactory"
    ],
    [
      "generatePrefixedId",
      "generateId"
    ],
    [
      "withCrossOrgTest",
      "withMultiOrgTest"
    ],
    [
      "createTraceContext",
      "generateRequestId"
    ],
    [
      "validateFilters",
      "getDefaultFilters"
    ],
    [
      "createWithMemberships",
      "createMultipleForOrganization"
    ],
    [
      "createTestDatabase",
      "applyDrizzleSchema"
    ],
    [
      "processBatchUsers",
      "waitForUserRecord"
    ],
    [
      "buildMapping",
      "snakeToCamel"
    ],
    [
      "createMockIssue",
      "createMockMachine"
    ],
    [
      "main",
      "generateSQLConstants"
    ],
    [
      "auditMultiTenantSecurity",
      "measureRLSPerformance"
    ],
    [
      "cleanIssueUrl",
      "parseIssueSearchParams"
    ],
    [
      "validateTestArchetype",
      "detectArchetype"
    ],
    [
      "validateDrizzleConfiguration",
      "expectLoggingConfiguration"
    ],
    [
      "processBatchUsers",
      "getExistingAuthUsers"
    ],
    [
      "validateIssueAssignment",
      "validateIssueOrganizationBoundary"
    ],
    [
      "transformMembershipResponse",
      "transformUserResponse"
    ],
    [
      "createSingleIssue",
      "createUserFactory"
    ],
    [
      "loadOnIdle",
      "loadComponent"
    ],
    [
      "Sidebar",
      "useSidebar"
    ],
    [
      "formatMachineName",
      "getYearValue"
    ],
    [
      "seedInfrastructure",
      "createDefaultCollectionTypes"
    ],
    [
      "PaginationUniversal",
      "buildPaginationUrl"
    ],
    [
      "getSeededAdminSupabaseUser",
      "createSupabaseUserFromSeeded"
    ],
    [
      "createCommentFactory",
      "createSingleComment"
    ],
    [
      "generateCommentNotifications",
      "createNotificationForUser"
    ],
    [
      "SidebarMenuButton",
      "useSidebar"
    ],
    [
      "createCompetitorAdminContext",
      "createSeededMachineTestContext"
    ],
    [
      "validateUserRemoval",
      "validateUserRemovalRules"
    ],
    [
      "authenticateDevUser",
      "isValidDevEmail"
    ],
    [
      "validateEntityExistsAndOwned",
      "validateRouterEntityOwnership"
    ],
    [
      "seedSampleData",
      "createSampleIssues"
    ],
    [
      "validateAdminCountForRemoval",
      "countAdmins"
    ],
    [
      "createPrimaryAdminContext",
      "createSeededLocationTestContext"
    ],
    [
      "createFilterAction",
      "handleFilterSubmit"
    ],
    [
      "createMockLocations",
      "createMockLocation"
    ],
    [
      "createRoleService",
      "createRoleService"
    ],
    [
      "createCompetitorOrgUser",
      "createMockSupabaseUser"
    ],
    [
      "createPermissionTestSuite",
      "createAuthenticatedContext"
    ],
    [
      "seedSampleDataWithDb",
      "seedSampleData"
    ],
    [
      "auditMultiTenantSecurity",
      "auditTableIsolation"
    ],
    [
      "clearAllFilters",
      "getDefaultFilters"
    ],
    [
      "extractUserRole",
      "hasValidPinPointMetadata"
    ],
    [
      "validateAndLogOAuthConfig",
      "validateAllOAuthProviders"
    ],
    [
      "getSeededMemberSupabaseUser",
      "createSupabaseUserFromSeeded"
    ],
    [
      "extractOrganizationId",
      "hasValidPinPointMetadata"
    ],
    [
      "handleIssueUpdate",
      "addNotification"
    ],
    [
      "seedTestSampleData",
      "seedProductionSampleData"
    ],
    [
      "createIssueFactory",
      "createStatusFactory"
    ],
    [
      "withRLSEnabledTest",
      "withIsolatedTest"
    ],
    [
      "urlParamsToFilters",
      "isValidSortBy"
    ],
    [
      "handleDeleteUserResponse",
      "handleResponse"
    ],
    [
      "createWithMemberCount",
      "create"
    ],
    [
      "PaginationServer",
      "buildPageUrl"
    ],
    [
      "SidebarTrigger",
      "useSidebar"
    ],
    [
      "transformMachinesResponse",
      "transformMachineResponse"
    ],
    [
      "createAdminMembership",
      "createAdminRole"
    ],
    [
      "createAttachmentFactory",
      "createUserFactory"
    ],
    [
      "seedSampleData",
      "createMachines"
    ],
    [
      "transformKeysToSnakeCase",
      "transformKeysToSnakeCase"
    ],
    [
      "transformCommentsResponse",
      "transformCommentResponse"
    ],
    [
      "validateRoleAssignment",
      "validateUserMembership"
    ],
    [
      "generateCommentNotifications",
      "getIssueStakeholders"
    ],
    [
      "handleMachineUpdate",
      "addNotification"
    ],
    [
      "createMockMachines",
      "createMockModel"
    ],
    [
      "getCollectionTypeIdOrThrow",
      "throwIfMappingFailed"
    ],
    [
      "getSeededPriorities",
      "getSeededOrganizationId"
    ],
    [
      "validateBatchAssignments",
      "validateAssigneeMembership"
    ],
    [
      "generateStatusChangeNotifications",
      "createNotificationForUser"
    ],
    [
      "setupAllIssueListMocks",
      "setupPermissionMocks"
    ],
    [
      "getCollectionTypeIdSafe",
      "isValidCollectionTypeName"
    ],
    [
      "createWithRoles",
      "createSystemRoleSet"
    ],
    [
      "validateIssueCreation",
      "validateDefaultStatus"
    ],
    [
      "logout",
      "waitForLogout"
    ],
    [
      "validateQueryFields",
      "validateDrizzleFieldAccess"
    ],
    [
      "testInputValidation",
      "createRouterTestContext"
    ],
    [
      "createSingleIssue",
      "createStatusFactory"
    ],
    [
      "getSeededOrganization",
      "getCachedSeedData"
    ],
    [
      "CreateIssuePage",
      "getMachinesForCreateForm"
    ],
    [
      "createPermissionTestSuite",
      "expectOrganizationIsolation"
    ],
    [
      "setupAuthTestData",
      "getSeededAdmin"
    ],
    [
      "ActionButton",
      "usePermissionTooltip"
    ],
    [
      "createUnauthenticatedRole",
      "create"
    ],
    [
      "createAllPermissions",
      "createIssuePermissions"
    ],
    [
      "AuthProvider",
      "getInitialSession"
    ],
    [
      "formatMachineName",
      "getManufacturerName"
    ],
    [
      "createIssueFactory",
      "createMachineFactory"
    ],
    [
      "validateIssueCreation",
      "validateDefaultPriority"
    ],
    [
      "getCurrentUserOrganizationId",
      "RLSContextManager.getCurrentUser"
    ],
    [
      "getSeededPlayerSupabaseUser",
      "createSupabaseUserFromSeeded"
    ],
    [
      "createServiceTestContext",
      "createMockDatabase"
    ],
    [
      "validateFilters",
      "isValidSortField"
    ],
    [
      "createMachineFactory",
      "createModelFactory"
    ],
    [
      "middleware",
      "setAll"
    ],
    [
      "createComplexIssueFactory",
      "createAttachmentFactory"
    ],
    [
      "signOut",
      "signOut"
    ],
    [
      "createMultipleForOrganization",
      "createSystemRoleSet"
    ],
    [
      "createLogger",
      "createFallbackLogger"
    ],
    [
      "processImageFile",
      "calculateDimensions"
    ],
    [
      "createSingleIssue",
      "createMachineFactory"
    ],
    [
      "createMockUsers",
      "createMockUser"
    ],
    [
      "isDevAuthAvailable",
      "shouldEnableDevFeatures"
    ],
    [
      "setupAuthTestData",
      "getSeededMember"
    ],
    [
      "generateStatusChangeNotifications",
      "getIssueStakeholders"
    ],
    [
      "batchToggleSelection",
      "toggleSelection"
    ],
    [
      "middleware",
      "getBaseDomain"
    ],
    [
      "getSeededAdmin",
      "getUserWithRoles"
    ],
    [
      "isValidOPDBId",
      "parseOPDBId"
    ],
    [
      "cleanMachineUrl",
      "buildMachineUrl"
    ],
    [
      "processFiles",
      "buildMapping"
    ],
    [
      "validateImportStructure",
      "getLineNumber"
    ],
    [
      "validateIssueCreation",
      "validateMachineOrganizationBoundary"
    ],
    [
      "createComplexIssueFactory",
      "createCommentFactory"
    ],
    [
      "getSeededIssues",
      "getCachedSeedData"
    ],
    [
      "validateSupabaseResponse",
      "extractErrorFromResponse"
    ],
    [
      "requireServerOrgContext",
      "requireServerAuth"
    ],
    [
      "validateDrizzleConfiguration",
      "expectTimeoutConfiguration"
    ],
    [
      "ActiveFilters",
      "getLocationName"
    ],
    [
      "clearStorageBucket",
      "getAllFilePaths"
    ],
    [
      "createAttachmentFactory",
      "createSingleAttachment"
    ],
    [
      "createAllPermissions",
      "createMachinePermissions"
    ],
    [
      "extractUserFromResponse",
      "isSupabaseUser"
    ],
    [
      "auditMultiTenantSecurity",
      "getDataSizeConfig"
    ],
    [
      "middleware",
      "createServerClient"
    ],
    [
      "createComplexIssueFactory",
      "createActivityFactory"
    ],
    [
      "validateCommentEditInput",
      "validateCommentContent"
    ],
    [
      "withActionErrorHandling",
      "actionError"
    ],
    [
      "getRoleIdSafe",
      "isDualOrgMapping"
    ],
    [
      "createAdminRole",
      "create"
    ],
    [
      "createCompetitorAdminContext",
      "createSeededLocationTestContext"
    ],
    [
      "handleFormSubmission",
      "addNotification"
    ],
    [
      "getMachineCanonicalUrl",
      "buildMachineUrl"
    ],
    [
      "getSeededIssueStatuses",
      "getSeededOrganizationId"
    ],
    [
      "createUsersDirectly",
      "getUserIdForEmail"
    ],
    [
      "createRoleService",
      "ServiceFactory.createRoleService"
    ],
    [
      "esc",
      "esc"
    ],
    [
      "seedInfrastructure",
      "createGlobalPermissions"
    ],
    [
      "createOrganizationWithRoles",
      "RoleService.createSystemRoles"
    ],
    [
      "seedInfrastructure",
      "createOrganizationWithRoles"
    ],
    [
      "isPinPointSupabaseSession",
      "isPinPointSupabaseUser"
    ],
    [
      "createSystemRoleSet",
      "createAdminRole"
    ],
    [
      "validateSupabaseResponse",
      "hasValidResponseStructure"
    ],
    [
      "MyComponent",
      "usePermissions"
    ],
    [
      "createAttachmentPermissions",
      "create"
    ],
    [
      "loginAsUser",
      "clearSession"
    ],
    [
      "safeParseSearchParams",
      "extractSearchParamErrors"
    ],
    [
      "validateBatchAssignments",
      "validateIssueOrganizationBoundary"
    ],
    [
      "createMockContext",
      "createMockServiceFactory"
    ],
    [
      "generateAssignmentNotifications",
      "createNotificationForUser"
    ],
    [
      "validateUserRemoval",
      "validateUserMembership"
    ],
    [
      "validateTestArchetype",
      "validatePerformancePatterns"
    ],
    [
      "transformKeysToCamelCase",
      "isPlainObject"
    ],
    [
      "createStructuredError",
      "isAuthError"
    ],
    [
      "withActionErrorHandling",
      "actionSuccess"
    ],
    [
      "createIssuePermissions",
      "create"
    ],
    [
      "createRoleService",
      "ensures.createRoleService"
    ],
    [
      "isDevelopmentOrTest",
      "isTest"
    ],
    [
      "getStatusIdSafe",
      "isValidStatusName"
    ],
    [
      "seedCompleteTestData",
      "seedTestSampleData"
    ],
    [
      "initializeNotificationStream",
      "addNotification"
    ],
    [
      "createIssueFactory",
      "createPriorityFactory"
    ],
    [
      "createTechnicianRole",
      "create"
    ],
    [
      "getSeededAdmin",
      "getCachedSeedData"
    ],
    [
      "withRLSSecurityContext",
      "esc"
    ],
    [
      "getSeededUserByEmail",
      "getCachedSeedData"
    ],
    [
      "auditDatabaseQuery",
      "validateQueryFields"
    ],
    [
      "isDevelopmentOrPreview",
      "isPreview"
    ],
    [
      "createOrganizationWithRoles",
      "createSystemRoles"
    ],
    [
      "createFallbackLogger",
      "mergeContext"
    ],
    [
      "createMemberRole",
      "create"
    ],
    [
      "transformOrganizationArray",
      "transformAuthArray"
    ],
    [
      "createMembership",
      "createTestUser"
    ],
    [
      "toggleLocation",
      "updateFilters"
    ],
    [
      "createSingleIssue",
      "createPriorityFactory"
    ],
    [
      "isDevelopmentOrPreview",
      "isDevelopment"
    ],
    [
      "createAllPermissions",
      "createLocationPermissions"
    ],
    [
      "createWithMemberships",
      "create"
    ],
    [
      "ReportingService.constructor",
      "groupByPriority"
    ],
    [
      "createActivityFactory",
      "createUserFactory"
    ],
    [
      "getSeededOrganizationId",
      "getSeededOrganization"
    ],
    [
      "seedInfrastructure",
      "createDefaultIssueStatuses"
    ],
    [
      "handler",
      "createContext"
    ],
    [
      "requirePermissionForSession",
      "requirePermission"
    ],
    [
      "auditMultiTenantSecurity",
      "createAuditTestData"
    ],
    [
      "createAdminClient",
      "setAll"
    ],
    [
      "createSystemRoleSet",
      "createTechnicianRole"
    ],
    [
      "getExistingAuthUsers",
      "createServiceRoleClient"
    ],
    [
      "getUserPermissionsForSession",
      "PermissionService.getUserPermissions"
    ],
    [
      "addNotification",
      "removeNotification"
    ],
    [
      "getMachineCanonicalUrl",
      "cleanMachineUrl"
    ],
    [
      "validateTestArchetype",
      "validateErrorHandling"
    ],
    [
      "validateStatusTransition",
      "validateOrganizationBoundary"
    ],
    [
      "getStatusIdSafe",
      "isDualOrgMapping"
    ],
    [
      "validateCommentCreationInput",
      "validateCommentContent"
    ],
    [
      "validateAllOAuthProviders",
      "validateGoogleOAuth"
    ],
    [
      "createSystemRoleSet",
      "createMemberRole"
    ],
    [
      "createCompetitorOrganization",
      "createMockOrganization"
    ],
    [
      "createMembershipValidationInput",
      "createMockMembership"
    ],
    [
      "createRouterTestSuite",
      "testAuthenticatedProcedure"
    ],
    [
      "createCompetitorMembership",
      "createMockMembership"
    ],
    [
      "createComplexTestDataset",
      "createBasicTestData"
    ],
    [
      "toggleSelectAll",
      "selectAll"
    ],
    [
      "getSeededPlayerSupabaseUser",
      "getSeededPlayer"
    ],
    [
      "isProduction",
      "getClientEnvironment"
    ],
    [
      "validateUserRemoval",
      "validateAdminCountForRemoval"
    ],
    [
      "createCommentFactory",
      "createUserFactory"
    ],
    [
      "seedSampleData",
      "createModels"
    ],
    [
      "IssueActions",
      "usePermissions"
    ],
    [
      "createAdminClient",
      "createServerClient"
    ],
    [
      "validateTransitionRules",
      "getTransitionType"
    ],
    [
      "createMockMachines",
      "createMockMachine"
    ],
    [
      "validateIssueOrganizationBoundary",
      "validateResourceOrganizationBoundary"
    ],
    [
      "createTechnician",
      "createWithRole"
    ],
    [
      "isDevelopment",
      "getClientEnvironment"
    ],
    [
      "createWithRole",
      "createWithPermissions"
    ],
    [
      "createMockIssue",
      "createMockStatus"
    ],
    [
      "seedAuthUsers",
      "processBatchUsers"
    ],
    [
      "createWithUser",
      "create"
    ],
    [
      "validateStatusTransition",
      "validateTransitionRules"
    ],
    [
      "seedAuthUsers",
      "createUsersDirectly"
    ],
    [
      "createRouterTestSuite",
      "testInputValidation"
    ],
    [
      "LazyClientIsland",
      "loadOnIdle"
    ],
    [
      "withOrganizationClient",
      "createOrganizationAwareClient"
    ],
    [
      "getSeededPlayer",
      "getUserWithRoles"
    ],
    [
      "getSeededPriorities",
      "getCachedSeedData"
    ],
    [
      "assertOAuthConfigValid",
      "validateAndLogOAuthConfig"
    ],
    [
      "middleware",
      "getSubdomain"
    ],
    [
      "extractUserFromResponse",
      "hasValidResponseStructure"
    ],
    [
      "createUser",
      "createWithRole"
    ],
    [
      "setupAuthTestData",
      "getSeededOrganization"
    ],
    [
      "withMultiOrgTest",
      "withIsolatedTest"
    ],
    [
      "toggleSelectAll",
      "selectNone"
    ],
    [
      "createMachineFactory",
      "createLocationFactory"
    ],
    [
      "authenticateDevUser",
      "signInDevUser"
    ],
    [
      "getStatusIdOrThrow",
      "getStatusIdSafe"
    ],
    [
      "createPrimaryMemberContext",
      "createSeededMachineTestContext"
    ],
    [
      "processIssueImageFile",
      "calculateDimensions"
    ],
    [
      "TRPCReactProvider",
      "getBaseUrl"
    ],
    [
      "processFiles",
      "log"
    ],
    [
      "signInWithOAuth",
      "signInWithOAuth"
    ],
    [
      "getPriorityIdSafe",
      "isDualOrgMapping"
    ],
    [
      "getSeededMember",
      "getUserWithRoles"
    ],
    [
      "getSingleIssue",
      "createIssueFactory"
    ],
    [
      "ErrorDetails",
      "getErrorMessage"
    ],
    [
      "cleanupSeedDataHelpers",
      "clearSeedDataCache"
    ],
    [
      "createDualChildLogger",
      "createDualChildLogger"
    ],
    [
      "createDrizzleClientInternal",
      "getDatabaseConfig"
    ],
    [
      "validateCommentRestoration",
      "validateCommentExists"
    ],
    [
      "handleClearFilters",
      "forEach"
    ],
    [
      "seedTestInfrastructure",
      "seedProductionInfrastructure"
    ],
    [
      "createWithRole",
      "getRolePermissions"
    ],
    [
      "getCollectionTypeIdSafe",
      "isDualOrgMapping"
    ],
    [
      "SystemNotificationSettings",
      "handleToggle"
    ],
    [
      "createAdminRole",
      "createAllPermissions"
    ],
    [
      "createTRPCCallerForIssues",
      "createMockServices"
    ],
    [
      "transformIssuesResponse",
      "transformIssueResponse"
    ],
    [
      "getDevAuthContext",
      "createServerSupabaseClient"
    ],
    [
      "createPermissionTestSuite",
      "expectAuthenticationRequired"
    ],
    [
      "AdminPanel",
      "useRequiredPermission"
    ],
    [
      "resetMocks",
      "setupDefaultResponses"
    ],
    [
      "getMembershipIdOrThrow",
      "getMembershipIdSafe"
    ],
    [
      "PaginationUniversal",
      "calculateVisiblePages"
    ],
    [
      "ActiveFilters",
      "getUserName"
    ],
    [
      "seedValidatorValidateAll",
      "seedValidatorValidateTarget"
    ],
    [
      "validateCommentOrganizationBoundary",
      "validateResourceOrganizationBoundary"
    ],
    [
      "getCollectionTypeIdSafe",
      "getOrganizationType"
    ],
    [
      "createMockStatuses",
      "createMockStatus"
    ],
    [
      "createMockIssuesList",
      "createMockIssue"
    ],
    [
      "validateCommentEditWithTimeLimit",
      "canEditCommentByTime"
    ],
    [
      "createLogger",
      "isErrorObject"
    ],
    [
      "validateCommonPattern",
      "validateFieldAccess"
    ],
    [
      "validateTestArchetype",
      "validateRLSContext"
    ],
    [
      "configureProductionMocks",
      "createRemoteURL"
    ],
    [
      "createAdminPermissions",
      "create"
    ],
    [
      "PaginationControls",
      "buildUrl"
    ],
    [
      "createIssueWithMixedComments",
      "getSingleIssue"
    ],
    [
      "seedAuthUsers",
      "getUsersForOrganization"
    ],
    [
      "getPriorityIdSafe",
      "isValidPriorityName"
    ],
    [
      "createActivityFactory",
      "createSingleActivity"
    ],
    [
      "transformKeysToSnakeCase",
      "toSnakeCase"
    ],
    [
      "transformMembershipArray",
      "transformAuthArray"
    ],
    [
      "seedSampleData",
      "extractUniqueGames"
    ],
    [
      "setContext",
      "setTestSession"
    ],
    [
      "getSeededIssueStatuses",
      "getCachedSeedData"
    ],
    [
      "seedSampleData",
      "createCompetitorMachine"
    ],
    [
      "verifyIntegrationTesterSetup",
      "getIntegrationTesterDatabaseUrl"
    ],
    [
      "getRoleIdSafe",
      "getOrganizationType"
    ],
    [
      "getRoleIdOrThrow",
      "throwIfMappingFailed"
    ],
    [
      "getMembershipIdSafe",
      "isValidEmailKey"
    ],
    [
      "validateCommentEdit",
      "validateCommentDeletionState"
    ],
    [
      "transformUploadAuthContextResponse",
      "transformOrganizationResponse"
    ],
    [
      "getCollectionTypeIdOrThrow",
      "getCollectionTypeIdSafe"
    ],
    [
      "createMultipleForOrganization",
      "createWithUser"
    ],
    [
      "getPriorityIdOrThrow",
      "throwIfMappingFailed"
    ],
    [
      "getSeededMember",
      "getCachedSeedData"
    ],
    [
      "createLogger",
      "hasCodeAndMessage"
    ],
    [
      "processFiles",
      "applyMappingToContent"
    ],
    [
      "createPermissionTestSuite",
      "createPermissionTestCases"
    ],
    [
      "shouldRequireGoogleOAuth",
      "isPreview"
    ],
    [
      "createRouterTestSuite",
      "testOrganizationScoping"
    ],
    [
      "seedValidatorValidateAll",
      "seedValidatorValidateDataAmount"
    ],
    [
      "transformKeysToCamelCase",
      "transformKeysToCamelCase"
    ],
    [
      "ActiveFilters",
      "getStatusNames"
    ],
    [
      "createDefaultLocation",
      "getDefaultLocationId"
    ],
    [
      "getMembershipIdSafe",
      "isDualOrgMapping"
    ],
    [
      "selectSuggestion",
      "saveRecentSearch"
    ],
    [
      "createPermissionTestSuite",
      "expectOrganizationRequired"
    ],
    [
      "isPreview",
      "getClientEnvironment"
    ],
    [
      "getValidStatusTransitions",
      "validateStatusTransition"
    ],
    [
      "validateCommentEdit",
      "validateCommentExists"
    ],
    [
      "createTestMembership",
      "createTestUser"
    ],
    [
      "transformKeysToSnakeCase",
      "isPlainObject"
    ],
    [
      "getIssueCanonicalUrl",
      "cleanIssueUrl"
    ],
    [
      "validateRoleReassignment",
      "validateRoleDeletion"
    ],
    [
      "createPinballMapTestContext",
      "setMockPermissions"
    ],
    [
      "getSeededAdminSupabaseUser",
      "getSeededAdmin"
    ],
    [
      "PaginationServerCompact",
      "buildPageUrl"
    ],
    [
      "withRLSTest",
      "withIsolatedTest"
    ],
    [
      "createMachineWithoutCustomName",
      "createMockMachine"
    ],
    [
      "transformMachinesForIssuesResponse",
      "transformMachineForIssuesResponse"
    ],
    [
      "createAllPermissions",
      "createAttachmentPermissions"
    ],
    [
      "validateFilters",
      "isValidSortOrder"
    ],
    [
      "shouldEnablePreviewAuthInProduction",
      "shouldForcePreviewBehavior"
    ],
    [
      "validateTestFiles",
      "validateTestArchetype"
    ],
    [
      "clearTestStorage",
      "getAllFilePaths"
    ],
    [
      "validateDrizzleConfiguration",
      "expectSSLConfiguration"
    ],
    [
      "withRLSAwareTest",
      "withRLSTest"
    ],
    [
      "updateSession",
      "setAll"
    ],
    [
      "createMockIssue",
      "createMockPriority"
    ],
    [
      "expectAuthenticationRequired",
      "createPublicContext"
    ],
    [
      "AuthProvider",
      "signOut"
    ]
  ],
  "deps": {
    "e2e/dashboard-auth-flow.e2e.test.ts": [
      "@playwright/test",
      "~/test/constants/seed-test-ids"
    ],
    "src/app/api/search/suggestions/route.ts": [
      "next/server",
      "zod",
      "~/lib/services/search-service",
      "~/lib/auth/server-auth"
    ],
    "src/app/api/search/universal/route.ts": [
      "next/server",
      "zod",
      "~/lib/services/search-service",
      "~/lib/auth/server-auth"
    ],
    "src/app/machines/new/page.tsx": [
      "next/link",
      "lucide-react",
      "~/components/ui/button",
      "~/lib/auth/server-auth",
      "~/lib/dal/machines",
      "~/lib/actions/machine-actions",
      "~/components/machines/client/create-machine-form-client"
    ],
    "src/app/search/page.tsx": [
      "react",
      "~/lib/services/search-service",
      "~/components/search/universal-search-results",
      "~/components/search/universal-search-input",
      "~/lib/auth/server-auth"
    ],
    "src/app/settings/activity/components/ActivityLogFilter.tsx": [
      "react",
      "next/navigation",
      "~/components/ui/button",
      "~/components/ui/input",
      "~/components/ui/label",
      "~/components/ui/select",
      "~/components/ui/separator",
      "~/components/ui/calendar",
      "~/components/ui/popover",
      "lucide-react",
      "date-fns",
      "~/lib/utils"
    ],
    "src/app/settings/activity/page.tsx": [
      "~/components/ui/card",
      "~/components/ui/badge",
      "~/components/ui/button",
      "~/components/ui/input",
      "lucide-react",
      "~/lib/dal/shared",
      "src/app/settings/activity/components/ActivityLogFilter.tsx",
      "date-fns"
    ],
    "src/app/settings/layout.tsx": [
      "next/link",
      "next/navigation",
      "~/components/ui/button",
      "~/components/ui/separator",
      "lucide-react",
      "~/lib/dal/shared"
    ],
    "src/app/settings/organization/components/OrganizationLogoForm.tsx": [
      "react",
      "~/components/ui/button",
      "~/components/ui/input",
      "~/components/ui/label",
      "~/components/ui/card",
      "lucide-react",
      "sonner",
      "~/lib/actions/organization-actions",
      "react"
    ],
    "src/app/settings/organization/components/OrganizationProfileForm.tsx": [
      "react",
      "~/components/ui/button",
      "~/components/ui/input",
      "~/components/ui/label",
      "~/components/ui/textarea",
      "lucide-react",
      "sonner",
      "~/lib/actions/organization-actions",
      "react"
    ],
    "src/app/settings/organization/page.tsx": [
      "~/components/ui/card",
      "~/components/ui/separator",
      "~/components/ui/badge",
      "lucide-react",
      "~/lib/dal/shared",
      "~/lib/dal/organizations",
      "src/app/settings/organization/components/OrganizationProfileForm.tsx",
      "src/app/settings/organization/components/OrganizationLogoForm.tsx",
      "date-fns"
    ],
    "src/app/settings/page.tsx": [
      "next/link",
      "~/components/ui/card",
      "~/components/ui/button",
      "lucide-react",
      "~/lib/dal/shared",
      "~/lib/dal/organizations"
    ],
    "src/app/settings/roles/page.tsx": [
      "~/components/ui/card",
      "~/components/ui/badge",
      "~/components/ui/button",
      "~/components/ui/separator",
      "lucide-react",
      "~/lib/dal/shared",
      "~/server/api/server-client"
    ],
    "src/app/settings/system/components/SystemNotificationSettings.tsx": [
      "react",
      "~/components/ui/button",
      "~/components/ui/label",
      "~/components/ui/switch",
      "~/components/ui/separator",
      "lucide-react",
      "sonner",
      "~/lib/actions/admin-actions"
    ],
    "src/app/settings/system/components/SystemPreferences.tsx": [
      "react",
      "~/components/ui/button",
      "~/components/ui/label",
      "~/components/ui/select",
      "~/components/ui/separator",
      "lucide-react",
      "sonner",
      "~/lib/actions/admin-actions"
    ],
    "src/app/settings/system/components/SystemSecuritySettings.tsx": [
      "react",
      "~/components/ui/button",
      "~/components/ui/label",
      "~/components/ui/input",
      "~/components/ui/switch",
      "~/components/ui/select",
      "~/components/ui/separator",
      "~/components/ui/badge",
      "lucide-react",
      "sonner",
      "~/lib/actions/admin-actions"
    ],
    "src/app/settings/system/page.tsx": [
      "~/components/ui/card",
      "~/components/ui/badge",
      "~/components/ui/separator",
      "lucide-react",
      "~/lib/dal/shared",
      "src/app/settings/system/components/SystemNotificationSettings.tsx",
      "src/app/settings/system/components/SystemSecuritySettings.tsx",
      "src/app/settings/system/components/SystemPreferences.tsx"
    ],
    "src/app/settings/users/components/InviteUserDialog.tsx": [
      "react",
      "~/components/ui/button",
      "~/components/ui/dialog",
      "~/components/ui/input",
      "~/components/ui/label",
      "~/components/ui/select",
      "~/components/ui/textarea",
      "lucide-react",
      "sonner",
      "~/lib/actions/admin-actions"
    ],
    "src/app/settings/users/components/RoleChangeDialog.tsx": [
      "react",
      "~/components/ui/button",
      "~/components/ui/dialog",
      "~/components/ui/label",
      "~/components/ui/select",
      "lucide-react",
      "sonner",
      "~/lib/actions/admin-actions"
    ],
    "src/app/settings/users/components/UserTableActions.tsx": [
      "react",
      "~/components/ui/button",
      "~/components/ui/dropdown-menu",
      "lucide-react",
      "sonner",
      "src/app/settings/users/components/RoleChangeDialog.tsx"
    ],
    "src/app/settings/users/page.tsx": [
      "~/components/ui/card",
      "~/components/ui/badge",
      "~/components/ui/button",
      "~/components/ui/separator",
      "lucide-react",
      "~/lib/dal/shared",
      "~/server/api/server-client",
      "src/app/settings/users/components/UserTableActions.tsx",
      "src/app/settings/users/components/InviteUserDialog.tsx",
      "date-fns"
    ],
    "src/components/forms/CreateIssueFormServer.tsx": [
      "react",
      "~/components/ui/card",
      "~/components/ui/button",
      "~/components/ui/input",
      "~/components/ui/textarea",
      "~/components/ui/label",
      "~/components/ui/select"
    ],
    "src/components/forms/form-enhancement-client.tsx": [
      "react",
      "react-dom",
      "~/components/ui/alert",
      "~/components/ui/button",
      "~/lib/actions/issue-actions",
      "react"
    ],
    "src/components/issues/realtime-comments-client.tsx": [
      "react",
      "~/components/ui/alert",
      "~/components/ui/badge",
      "~/components/ui/avatar",
      "date-fns",
      "lucide-react"
    ],
    "src/components/layout/notification-bell-client.tsx": [
      "react",
      "~/components/ui/button",
      "~/components/ui/popover",
      "~/components/ui/badge",
      "lucide-react"
    ],
    "src/components/layout/notification-bell-wrapper.tsx": [
      "react",
      "src/components/layout/notification-bell-client.tsx",
      "~/lib/dal/notifications",
      "~/components/ui/skeleton"
    ],
    "src/components/layout/notifications-list-server.tsx": [
      "date-fns",
      "~/components/ui/badge",
      "~/components/ui/avatar",
      "~/components/ui/card",
      "~/components/ui/button",
      "lucide-react",
      "~/lib/dal/notifications",
      "next/link"
    ],
    "src/components/machines/client/create-machine-form-client.tsx": [
      "react",
      "next/navigation",
      "~/components/ui/button",
      "~/components/ui/card",
      "~/components/ui/input",
      "~/components/ui/label",
      "~/components/ui/select",
      "~/components/ui/alert",
      "lucide-react"
    ],
    "src/components/machines/machine-detail-server.tsx": [
      "~/components/ui/card",
      "~/components/ui/badge",
      "~/components/ui/separator",
      "lucide-react"
    ],
    "src/components/machines/machine-header.tsx": [
      "next/link",
      "lucide-react",
      "~/components/ui/button",
      "~/components/ui/badge",
      "~/components/ui/card"
    ],
    "src/components/notifications/notification-client.tsx": [
      "react",
      "~/components/ui/alert",
      "~/components/ui/badge",
      "~/components/ui/button",
      "lucide-react"
    ],
    "src/components/search/advanced-search-form-optimized.tsx": [
      "react",
      "next/navigation",
      "next/dynamic",
      "lucide-react",
      "~/components/ui/button",
      "~/components/ui/input",
      "~/components/ui/label",
      "~/components/ui/card",
      "~/components/ui/badge",
      "~/components/ui/select",
      "~/components/ui/separator",
      "src/components/search/advanced-search-form.tsx"
    ],
    "src/components/search/advanced-search-form.tsx": [
      "react",
      "next/navigation",
      "lucide-react",
      "~/components/ui/button",
      "~/components/ui/input",
      "~/components/ui/label",
      "~/components/ui/card",
      "~/components/ui/badge",
      "~/components/ui/select",
      "~/components/ui/checkbox",
      "~/components/ui/separator"
    ],
    "src/components/search/filter-configs.tsx": [
      "src/components/search/advanced-search-form.tsx"
    ],
    "src/components/search/global-search-shortcut.tsx": [
      "react",
      "next/navigation",
      "~/components/ui/dialog",
      "src/components/search/universal-search-input.tsx",
      "~/lib/services/search-service"
    ],
    "src/components/search/universal-search-input.tsx": [
      "react",
      "next/navigation",
      "~/components/ui/input",
      "~/components/ui/button",
      "~/components/ui/card",
      "~/components/ui/badge",
      "lucide-react",
      "~/lib/hooks/use-debounce",
      "~/lib/services/search-service"
    ],
    "src/components/search/universal-search-results.tsx": [
      "next/link",
      "~/components/ui/badge",
      "~/components/ui/card",
      "~/components/ui/button",
      "lucide-react",
      "~/lib/services/search-service",
      "~/lib/dal/shared",
      "date-fns"
    ],
    "src/components/ui/calendar.tsx": [
      "react",
      "lucide-react",
      "react-day-picker",
      "src/lib/utils",
      "src/components/ui/button"
    ],
    "src/components/ui/dialog.tsx": [
      "react",
      "@radix-ui/react-dialog",
      "lucide-react",
      "src/lib/utils"
    ],
    "src/components/ui/pagination-universal.tsx": [
      "next/link",
      "~/components/ui/button",
      "lucide-react"
    ],
    "src/components/utils/lazy-client-island.tsx": [
      "react",
      "react"
    ],
    "src/lib/actions/admin-actions.ts": [
      "next/cache",
      "zod",
      "drizzle-orm",
      "~/server/db/provider",
      "~/server/db/schema",
      "~/lib/utils/id-generation",
      "src/lib/actions/shared.ts"
    ],
    "src/lib/actions/comment-actions.ts": [
      "next/cache",
      "react",
      "zod",
      "drizzle-orm",
      "~/server/db/provider",
      "~/server/db/schema",
      "~/lib/utils/id-generation",
      "~/lib/utils/case-transformers",
      "src/lib/actions/shared.ts",
      "~/lib/services/notification-generator"
    ],
    "src/lib/actions/notification-actions.ts": [
      "next/cache",
      "zod",
      "drizzle-orm",
      "~/server/db/provider",
      "~/server/db/schema",
      "src/lib/actions/shared.ts"
    ],
    "src/lib/actions/organization-actions.ts": [
      "next/cache",
      "zod",
      "drizzle-orm",
      "~/server/db/provider",
      "~/server/db/schema",
      "~/lib/utils/case-transformers",
      "src/lib/actions/shared.ts"
    ],
    "src/lib/dal/notifications.ts": [
      "react",
      "drizzle-orm",
      "~/server/db/schema",
      "src/lib/dal/shared.ts"
    ],
    "src/lib/services/notification-generator.ts": [
      "~/lib/dal/shared",
      "~/server/db/schema",
      "~/lib/utils/id-generation",
      "~/lib/dal/notifications",
      "drizzle-orm"
    ],
    "src/lib/services/qr-code-service.ts": [
      "qrcode"
    ],
    "src/lib/services/search-service.ts": [
      "react",
      "drizzle-orm",
      "~/lib/dal/shared",
      "~/server/db/schema"
    ],
    ".archived-tests-2025-08-23/e2e/helpers/auth.ts": [
      "@playwright/test"
    ],
    ".archived-tests-2025-08-23/e2e/helpers/unified-dashboard.ts": [
      "@playwright/test"
    ],
    ".archived-tests-2025-08-23/e2e/issue-confirmation.spec.ts": [
      "@playwright/test"
    ],
    ".archived-tests-2025-08-23/e2e/roles-permissions.spec.ts": [
      "@playwright/test"
    ],
    ".archived-tests-2025-08-23/src/app/api/dev/__tests__/users-simple.test.ts": [
      "vitest",
      "~/test/constants/seed-test-ids"
    ],
    ".archived-tests-2025-08-23/src/app/dashboard/_components/__tests__/PrimaryAppBar.test.tsx": [
      "@testing-library/react",
      "react",
      "vitest",
      "~/test/msw/setup",
      "~/test/VitestTestWrapper"
    ],
    ".archived-tests-2025-08-23/src/app/machines/components/MachineCard.test.tsx": [
      "@testing-library/react",
      "@testing-library/user-event",
      "vitest",
      "~/test/msw/setup",
      "~/test/VitestTestWrapper"
    ],
    ".archived-tests-2025-08-23/src/components/issues/__tests__/MachineSelector.test.tsx": [
      "@testing-library/react",
      "@testing-library/user-event",
      "vitest",
      "~/test/mockUtils",
      "~/test/VitestTestWrapper"
    ],
    ".archived-tests-2025-08-23/src/components/locations/__tests__/LocationDetailView.test.tsx": [
      "@testing-library/react",
      "vitest",
      "~/test/msw/setup",
      "~/test/VitestTestWrapper"
    ],
    ".archived-tests-2025-08-23/src/components/locations/__tests__/MachineGrid.test.tsx": [
      "@testing-library/react",
      "vitest"
    ],
    ".archived-tests-2025-08-23/src/components/permissions/__tests__/PermissionGate.test.tsx": [
      "@testing-library/react",
      "vitest",
      "~/server/auth/permissions.constants"
    ],
    ".archived-tests-2025-08-23/src/components/react-environment.test.tsx": [
      "@testing-library/react",
      "vitest"
    ],
    ".archived-tests-2025-08-23/src/hooks/__tests__/usePermissions.test.tsx": [
      "@testing-library/react",
      "react",
      "react",
      "vitest",
      "~/server/auth/permissions.constants",
      "~/test/VitestTestWrapper"
    ],
    ".archived-tests-2025-08-23/src/integration-tests/comment.integration.test.ts": [
      "vitest",
      "drizzle-orm",
      "~/server/api/root",
      "~/server/db/schema",
      "~/test/helpers/worker-scoped-db",
      "~/test/helpers/createSeededIssueTestContext",
      "~/test/constants/seed-test-ids"
    ],
    ".archived-tests-2025-08-23/src/integration-tests/cross-org-isolation.test.ts": [
      "vitest",
      "drizzle-orm",
      "~/test/helpers/worker-scoped-db",
      "~/test/constants/seed-test-ids",
      "~/server/db/schema"
    ],
    ".archived-tests-2025-08-23/src/integration-tests/machine.location.integration.test.ts": [
      "@trpc/server",
      "drizzle-orm",
      "vitest",
      "~/server/api/routers/machine.location",
      "~/server/db/schema",
      "~/test/helpers/pglite-test-setup",
      "~/test/helpers/worker-scoped-db",
      "~/test/constants/seed-test-ids",
      "~/test/helpers/createSeededMachineTestContext"
    ],
    ".archived-tests-2025-08-23/src/integration-tests/machine.owner.integration.test.ts": [
      "drizzle-orm",
      "vitest",
      "~/server/api/routers/machine.owner",
      "~/server/db/schema",
      "~/test/helpers/worker-scoped-db",
      "~/test/constants/seed-test-ids",
      "~/test/helpers/createSeededMachineTestContext"
    ],
    ".archived-tests-2025-08-23/src/integration-tests/model.core.integration.test.ts": [
      "@trpc/server",
      "drizzle-orm",
      "vitest",
      "~/server/api/root",
      "~/server/db/schema",
      "~/test/constants/seed-test-ids",
      "~/test/helpers/worker-scoped-db"
    ],
    ".archived-tests-2025-08-23/src/integration-tests/pinballMap.integration.test.ts": [
      "drizzle-orm",
      "vitest",
      "msw",
      "~/server/api/root",
      "~/server/db/schema",
      "~/test/msw/setup",
      "~/test/helpers/worker-scoped-db",
      "~/server/services/factory"
    ],
    ".archived-tests-2025-08-23/src/integration-tests/schema-migration-validation.integration.test.ts": [
      "drizzle-orm",
      "vitest",
      "~/server/db/schema",
      "~/test/helpers/test-id-generator",
      "~/test/helpers/worker-scoped-db"
    ],
    ".archived-tests-2025-08-23/src/lib/common/__tests__/organizationValidation.test.ts": [
      "vitest",
      "~/test/constants/seed-test-ids"
    ],
    ".archived-tests-2025-08-23/src/lib/issues/__tests__/assignmentValidation.test.ts": [
      "vitest",
      "~/test/constants/seed-test-ids"
    ],
    ".archived-tests-2025-08-23/src/lib/issues/__tests__/creationValidation.test.ts": [
      "vitest",
      "~/test/constants/seed-test-ids"
    ],
    ".archived-tests-2025-08-23/src/lib/issues/__tests__/statusValidation.test.ts": [
      "vitest",
      "~/test/constants/seed-test-ids"
    ],
    ".archived-tests-2025-08-23/src/lib/pinballmap/__tests__/apiMocker.ts": [
      "vitest",
      ".archived-tests-2025-08-23/src/lib/pinballmap/__tests__/fixtures/api_responses/locations/location_26454_machine_details.json"
    ],
    ".archived-tests-2025-08-23/src/lib/users/__tests__/roleManagementValidation.test.ts": [
      "vitest",
      "~/test/constants/seed-test-ids"
    ],
    ".archived-tests-2025-08-23/src/server/api/__tests__/msw.trpc.test.ts": [
      "@trpc/server",
      "vitest",
      "~/test/msw/handlers",
      "~/test/msw/setup",
      "~/test/msw/setup"
    ],
    ".archived-tests-2025-08-23/src/server/api/__tests__/trpc.permission.test.ts": [
      "@trpc/server",
      "vitest",
      "~/server/auth/permissions",
      "~/test/vitestMockContext",
      "~/test/constants/seed-test-ids"
    ],
    ".archived-tests-2025-08-23/src/server/api/routers/__tests__/collection.test.ts": [
      "drizzle-orm",
      "vitest",
      "~/server/api/root",
      "~/server/db/schema",
      "~/test/constants/seed-test-ids",
      "~/test/helpers/worker-scoped-db"
    ],
    ".archived-tests-2025-08-23/src/server/api/routers/__tests__/issue.confirmation.test.ts": [
      "vitest",
      "@trpc/server",
      "drizzle-orm",
      "zod",
      "~/test/vitestMockContext",
      "~/test/constants/seed-test-ids",
      "~/server/api/trpc",
      "~/server/api/trpc.permission",
      "~/server/auth/permissions",
      "~/server/db/schema"
    ],
    ".archived-tests-2025-08-23/src/server/api/routers/__tests__/issue.integration.test.ts": [
      "drizzle-orm",
      "vitest",
      "~/lib/utils/id-generation",
      "~/server/api/root",
      "~/server/db/schema",
      "~/test/helpers/pglite-test-setup",
      "~/test/helpers/worker-scoped-db",
      "~/test/testDataFactories",
      "~/test/constants/seed-test-ids"
    ],
    ".archived-tests-2025-08-23/src/server/api/routers/__tests__/issue.notification.test.ts": [
      "vitest",
      "~/server/services/notificationService",
      "~/test/vitestMockContext",
      "~/test/constants/seed-test-ids"
    ],
    ".archived-tests-2025-08-23/src/server/api/routers/__tests__/issue.test.ts": [
      "drizzle-orm",
      "vitest",
      "~/server/api/root",
      "~/server/db/schema",
      "~/test/constants/seed-test-ids",
      "~/test/helpers/worker-scoped-db",
      "~/test/helpers/createSeededIssueTestContext",
      "~/server/services/factory"
    ],
    ".archived-tests-2025-08-23/src/server/api/routers/__tests__/model.core.test.ts": [
      "@trpc/server",
      "drizzle-orm",
      "vitest",
      "~/server/api/root",
      "~/server/db/schema",
      "~/test/constants/seed-test-ids",
      "~/test/helpers/test-id-generator",
      "~/test/helpers/worker-scoped-db",
      "~/test/helpers/pglite-test-setup"
    ],
    ".archived-tests-2025-08-23/src/server/api/routers/__tests__/notification.test.ts": [
      "drizzle-orm",
      "vitest",
      "~/server/api/root",
      "~/server/db/schema",
      "~/test/helpers/test-id-generator",
      "~/test/helpers/worker-scoped-db",
      "~/server/services/factory",
      "~/test/constants/seed-test-ids"
    ],
    ".archived-tests-2025-08-23/src/server/api/routers/utils/__tests__/commentService.integration.test.ts": [
      "drizzle-orm",
      "vitest",
      "~/server/api/routers/comment",
      "~/server/db/schema",
      "~/test/helpers/pglite-test-setup",
      "~/test/helpers/createSeededIssueTestContext",
      "~/test/constants/seed-test-ids",
      "~/test/helpers/worker-scoped-db"
    ],
    ".archived-tests-2025-08-23/src/server/api/routers/utils/__tests__/commentValidation.test.ts": [
      "vitest",
      ".archived-tests-2025-08-23/src/test/constants/seed-test-ids.ts"
    ],
    ".archived-tests-2025-08-23/src/server/auth/__tests__/permissions.constants.test.ts": [
      "vitest"
    ],
    ".archived-tests-2025-08-23/src/server/auth/__tests__/uploadAuth.test.ts": [
      "@trpc/server",
      "vitest",
      "~/test/constants/seed-test-ids"
    ],
    ".archived-tests-2025-08-23/src/server/db/__tests__/drizzle-singleton.test.ts": [
      "vitest",
      ".archived-tests-2025-08-23/src/test/helpers/worker-scoped-db.ts"
    ],
    ".archived-tests-2025-08-23/src/server/db/__tests__/drizzle-test-helpers.ts": [
      "vitest"
    ],
    ".archived-tests-2025-08-23/src/server/services/__tests__/roleService.test.ts": [
      "vitest",
      "~/server/auth/permissions.constants",
      "~/server/services/roleService",
      "~/test/constants/seed-test-ids"
    ],
    ".archived-tests-2025-08-23/src/test/VitestTestWrapper.tsx": [
      "@tanstack/react-query",
      "react",
      "~/contexts/PermissionDepsContext"
    ],
    ".archived-tests-2025-08-23/src/test/context.ts": [
      "drizzle-orm/node-postgres",
      "pg",
      "~/server/db/schema",
      "~/server/db/client-factory"
    ],
    ".archived-tests-2025-08-23/src/test/database-test-helpers.ts": [
      "drizzle-orm",
      "~/server/db/schema",
      "~/test/constants/seed-test-ids"
    ],
    ".archived-tests-2025-08-23/src/test/examples/dual-track-testing-examples.test.ts": [
      "vitest",
      "drizzle-orm",
      "~/test/constants/seed-test-ids",
      "~/test/helpers/worker-scoped-db",
      "~/test/helpers/pglite-test-setup",
      "~/server/db/schema"
    ],
    ".archived-tests-2025-08-23/src/test/helpers/archetype-validator.ts": [
      "node:fs",
      "node:path"
    ],
    ".archived-tests-2025-08-23/src/test/helpers/createSeededAdminTestContext.ts": [
      "drizzle-orm",
      "vitest",
      "~/test/helpers/pglite-test-setup",
      "~/server/db/schema"
    ],
    ".archived-tests-2025-08-23/src/test/helpers/createSeededCollectionTestContext.ts": [
      "drizzle-orm",
      "vitest",
      "~/test/helpers/pglite-test-setup",
      "~/server/db/schema"
    ],
    ".archived-tests-2025-08-23/src/test/helpers/createSeededIssueTestContext.ts": [
      "drizzle-orm",
      "~/test/helpers/pglite-test-setup",
      "~/server/db/schema",
      "~/server/services/factory"
    ],
    ".archived-tests-2025-08-23/src/test/helpers/createSeededLocationTestContext.ts": [
      "vitest",
      "drizzle-orm",
      "~/test/constants/seed-test-ids",
      "~/server/db/schema"
    ],
    ".archived-tests-2025-08-23/src/test/helpers/createSeededMachineTestContext.ts": [
      "vitest",
      "drizzle-orm",
      "~/test/constants/seed-test-ids",
      "~/server/db/schema"
    ],
    ".archived-tests-2025-08-23/src/test/helpers/createSeededNotificationTestContext.ts": [
      "vitest",
      ".archived-tests-2025-08-23/src/test/helpers/pglite-test-setup.ts"
    ],
    ".archived-tests-2025-08-23/src/test/helpers/multi-tenant-test-helpers.ts": [
      "drizzle-orm",
      ".archived-tests-2025-08-23/src/test/helpers/rls-test-context.ts",
      ".archived-tests-2025-08-23/src/test/helpers/organization-context.ts",
      "~/server/db/schema"
    ],
    ".archived-tests-2025-08-23/src/test/helpers/organization-context.ts": [
      "drizzle-orm",
      "~/server/db/schema"
    ],
    ".archived-tests-2025-08-23/src/test/helpers/pglite-test-setup.ts": [
      "@electric-sql/pglite",
      "drizzle-orm",
      "drizzle-orm/pglite",
      "drizzle-kit/api",
      "~/server/db/client-factory",
      "~/server/db/schema"
    ],
    ".archived-tests-2025-08-23/src/test/helpers/rls-test-context.ts": [
      "vitest",
      "drizzle-orm",
      ".archived-tests-2025-08-23/src/test/constants/seed-test-ids.ts"
    ],
    ".archived-tests-2025-08-23/src/test/helpers/session-context.ts": [
      "drizzle-orm"
    ],
    ".archived-tests-2025-08-23/src/test/helpers/supabase-test-setup.ts": [
      "@supabase/supabase-js",
      "~/env"
    ],
    ".archived-tests-2025-08-23/src/test/helpers/test-id-generator.ts": [
      "~/test/constants/seed-test-ids"
    ],
    ".archived-tests-2025-08-23/src/test/helpers/worker-scoped-db.ts": [
      "vitest",
      ".archived-tests-2025-08-23/src/test/helpers/pglite-test-setup.ts",
      "drizzle-orm"
    ],
    ".archived-tests-2025-08-23/src/test/mockContext.ts": [
      "vitest",
      "vitest-mock-extended"
    ],
    ".archived-tests-2025-08-23/src/test/mockUtils.ts": [
      "vitest"
    ],
    ".archived-tests-2025-08-23/src/test/msw/handlers.ts": [
      ".archived-tests-2025-08-23/src/test/msw/setup.ts"
    ],
    ".archived-tests-2025-08-23/src/test/msw/setup.ts": [
      "msw/node",
      "msw-trpc",
      "superjson"
    ],
    ".archived-tests-2025-08-23/src/test/permissionTestHelpers.ts": [
      "@trpc/server",
      "vitest",
      ".archived-tests-2025-08-23/src/test/vitestMockContext.ts",
      "~/server/auth/permissions"
    ],
    ".archived-tests-2025-08-23/src/test/routerTestPatterns.ts": [
      "vitest",
      ".archived-tests-2025-08-23/src/test/permissionTestHelpers.ts"
    ],
    ".archived-tests-2025-08-23/src/test/seed-data-helpers.ts": [
      "drizzle-orm",
      "~/server/db/drizzle",
      "~/server/db/schema"
    ],
    ".archived-tests-2025-08-23/src/test/setup/issueListTestSetup.ts": [
      "vitest",
      "~/test/mockUtils"
    ],
    ".archived-tests-2025-08-23/src/test/setup/viTestMocks.ts": [
      "vitest"
    ],
    ".archived-tests-2025-08-23/src/test/templates/02-service-business-logic-test.template.ts": [
      "vitest",
      "drizzle-orm",
      "~/test/helpers/worker-scoped-db",
      "~/test/constants/seed-test-ids",
      "~/server/db/schema"
    ],
    ".archived-tests-2025-08-23/src/test/templates/03-pglite-integration-test.template.ts": [
      "vitest",
      "drizzle-orm",
      "~/test/helpers/worker-scoped-db",
      "~/test/helpers/pglite-test-setup",
      "~/test/constants/seed-test-ids",
      "~/server/db/schema"
    ],
    ".archived-tests-2025-08-23/src/test/templates/04-react-component-unit-test.template.tsx": [
      "vitest",
      "@testing-library/react",
      "@testing-library/user-event",
      "~/test/VitestTestWrapper"
    ],
    ".archived-tests-2025-08-23/src/test/testDataFactories.ts": [
      "@faker-js/faker",
      "vitest",
      "~/test/constants/seed-test-ids",
      "~/test/testDataFactories",
      "~/test/testDataFactories",
      "~/test/testDataFactories",
      "~/test/testDataFactories"
    ],
    ".archived-tests-2025-08-23/src/test/utils/mock-ids.ts": [
      ".archived-tests-2025-08-23/src/test/constants/seed-test-ids.ts"
    ],
    ".archived-tests-2025-08-23/src/test/vitestMockContext.ts": [
      "vitest"
    ],
    "e2e/auth-login-flow.e2e.test.ts": [
      "@playwright/test",
      "src/test/constants/seed-test-ids.ts",
      "e2e/helpers/unified-dashboard.ts"
    ],
    "e2e/helpers/unified-dashboard.ts": [
      "@playwright/test"
    ],
    "middleware.ts": [
      "@supabase/ssr",
      "next/server",
      "~/env",
      "~/lib/environment"
    ],
    "scripts/convert-snake-case.ts": [
      "node:fs",
      "node:fs/promises",
      "node:path",
      "node:child_process"
    ],
    "scripts/generate-sql-constants.ts": [
      "fs",
      "path",
      "src/server/db/seed/constants.ts"
    ],
    "scripts/validate-drizzle-crud.ts": [
      "drizzle-orm",
      "~/server/db/drizzle",
      "~/server/db/schema",
      "~/env.js"
    ],
    "src/app/_components/DevLoginCompact.tsx": [
      "@mui/icons-material",
      "@mui/material",
      "react",
      "~/lib/auth/dev-auth",
      "~/lib/supabase/client"
    ],
    "src/app/_components/LoginModal.tsx": [
      "@mui/material"
    ],
    "src/app/api/dev/users/route.ts": [
      "drizzle-orm",
      "next/server",
      "~/env",
      "~/lib/environment",
      "~/lib/utils/case-transformers",
      "~/server/auth/supabase",
      "~/server/db/provider",
      "~/server/db/schema"
    ],
    "src/app/api/health/route.ts": [
      "drizzle-orm",
      "next/server",
      "~/server/db/provider",
      "~/utils/version"
    ],
    "src/app/api/qr/[qrCodeId]/route.ts": [
      "next/server",
      "~/server/db/provider",
      "~/server/services/factory",
      "~/server/utils/qrCodeUtils"
    ],
    "src/app/api/trpc/[trpc]/route.ts": [
      "@trpc/server/adapters/fetch",
      "next/server",
      "~/lib/environment",
      "~/server/api/root",
      "~/server/api/trpc"
    ],
    "src/app/auth-provider.tsx": [
      "react",
      "~/lib/supabase/client"
    ],
    "src/app/auth/auth-code-error/page.tsx": [
      "react",
      "next/link",
      "~/components/ui/button",
      "~/components/ui/card",
      "~/components/ui/alert"
    ],
    "src/app/auth/callback/route.ts": [
      "next/server",
      "~/utils/supabase/server",
      "~/env"
    ],
    "src/app/auth/sign-in/components/SignInForm.tsx": [
      "react",
      "react",
      "~/components/ui/button",
      "~/components/ui/card",
      "~/components/ui/input",
      "~/components/ui/label",
      "~/components/ui/separator",
      "~/components/ui/alert",
      "~/lib/actions/auth-actions",
      "~/lib/auth/dev-auth",
      "~/lib/environment-client",
      "~/lib/supabase/client",
      "~/server/db/seed/constants"
    ],
    "src/app/auth/sign-in/page.tsx": [
      "next/navigation",
      "react",
      "src/app/auth/sign-in/components/SignInForm.tsx",
      "~/lib/auth/server-auth"
    ],
    "src/app/auth/sign-up/components/SignUpForm.tsx": [
      "react",
      "react",
      "~/components/ui/button",
      "~/components/ui/card",
      "~/components/ui/input",
      "~/components/ui/label",
      "~/components/ui/separator",
      "~/components/ui/alert",
      "~/lib/actions/auth-actions"
    ],
    "src/app/auth/sign-up/page.tsx": [
      "next/navigation",
      "react",
      "src/app/auth/sign-up/components/SignUpForm.tsx",
      "~/lib/auth/server-auth"
    ],
    "src/app/client-providers.tsx": [
      "~/trpc/react",
      "next-themes"
    ],
    "src/app/dal-test/page.tsx": [
      "~/lib/dal"
    ],
    "src/app/dashboard/loading.tsx": [
      "~/components/ui/card"
    ],
    "src/app/dashboard/page.tsx": [
      "react",
      "next/link",
      "~/components/ui/card",
      "~/components/ui/button",
      "~/components/ui/avatar",
      "lucide-react",
      "~/lib/dal/shared",
      "~/lib/dal/issues",
      "~/lib/dal/organizations",
      "~/components/issues/issues-list-server",
      "~/components/dashboard/dashboard-stats",
      "~/components/dashboard/quick-actions"
    ],
    "src/app/demo-server-actions/page.tsx": [
      "~/components/forms/CreateIssueFormServer",
      "~/lib/dal/machines",
      "~/lib/dal/shared"
    ],
    "src/app/games/[id]/page.tsx": [
      "next/navigation"
    ],
    "src/app/games/page.tsx": [
      "next/navigation"
    ],
    "src/app/issues/[issueId]/loading.tsx": [
      "~/components/ui/skeleton",
      "~/components/ui/card"
    ],
    "src/app/issues/[issueId]/page.tsx": [
      "next",
      "next/navigation",
      "react",
      "~/components/issues/issue-detail-server",
      "~/lib/auth/server-auth",
      "~/lib/dal/issues"
    ],
    "src/app/issues/create/page.tsx": [
      "next",
      "next/link",
      "lucide-react",
      "~/components/forms/CreateIssueFormServer",
      "~/lib/auth/server-auth",
      "~/lib/actions/issue-actions"
    ],
    "src/app/issues/loading.tsx": [
      "~/components/ui/skeleton",
      "~/components/ui/card"
    ],
    "src/app/issues/page.tsx": [
      "react",
      "next/link",
      "~/components/ui/button",
      "lucide-react",
      "~/components/issues/issues-list-server",
      "~/components/issues/issue-active-filters",
      "~/components/search",
      "~/lib/auth/server-auth",
      "~/lib/dal/issues",
      "~/lib/search-params/issue-search-params",
      "~/lib/search-params/shared"
    ],
    "src/app/layout.tsx": [
      "next/font/google",
      "~/lib/auth/server-auth",
      "~/components/layout/navigation",
      "~/components/search"
    ],
    "src/app/locations/[id]/page.tsx": [
      "next",
      "next/navigation",
      "react",
      "~/components/locations/LocationDetailView",
      "~/server/auth/supabase",
      "~/trpc/server"
    ],
    "src/app/locations/page.tsx": [
      "next",
      "react",
      "~/components/locations/LocationList",
      "~/server/auth/supabase",
      "~/trpc/server"
    ],
    "src/app/machines/[id]/page.tsx": [
      "next",
      "next/navigation",
      "react",
      "~/lib/auth/server-auth",
      "~/lib/dal/machines",
      "~/components/machines/machine-detail-server",
      "~/components/machines/machine-header",
      "~/components/machines/client/machine-qr-code-client"
    ],
    "src/app/machines/page.tsx": [
      "react",
      "next/link",
      "~/components/ui/button",
      "lucide-react",
      "~/components/machines/machine-inventory-server",
      "~/components/machines/machine-stats-server",
      "~/components/search",
      "~/lib/auth/server-auth",
      "~/lib/dal/machines",
      "~/lib/search-params/machine-search-params",
      "~/lib/search-params/shared"
    ],
    "src/app/page.tsx": [
      "next/navigation",
      "~/lib/auth/server-auth"
    ],
    "src/app/phase1d-test/page.tsx": [
      "~/lib/auth/server-context",
      "~/components/ui/card",
      "~/components/ui/alert"
    ],
    "src/app/profile/page.tsx": [
      "@mui/icons-material",
      "@mui/material",
      "~/app/auth-provider",
      "~/components/profile/ProfilePictureUpload",
      "~/components/ui/UserAvatar",
      "~/trpc/react"
    ],
    "src/app/providers.tsx": [
      "react",
      "src/app/auth-provider.tsx",
      "~/trpc/react"
    ],
    "src/app/sign-in/page.tsx": [
      "@mui/icons-material",
      "@mui/material",
      "drizzle-orm",
      "next/navigation",
      "~/app/auth-provider",
      "~/lib/auth/dev-auth",
      "~/lib/environment-client",
      "~/lib/supabase/client"
    ],
    "src/components/dashboard/dashboard-stats.tsx": [
      "~/components/ui/card",
      "lucide-react"
    ],
    "src/components/dashboard/quick-actions.tsx": [
      "next/link",
      "~/components/ui/button",
      "~/components/ui/card",
      "lucide-react"
    ],
    "src/components/hooks/use-mobile.ts": [
      "react"
    ],
    "src/components/issues/ActiveFilters.tsx": [
      "@mui/icons-material",
      "@mui/material",
      "~/trpc/react"
    ],
    "src/components/issues/AdvancedFiltersDropdown.tsx": [
      "@mui/icons-material",
      "@mui/material",
      "react",
      "~/trpc/react"
    ],
    "src/components/issues/FilterToolbar.tsx": [
      "@mui/icons-material",
      "@mui/material",
      "react",
      "src/components/issues/AdvancedFiltersDropdown.tsx",
      "src/components/issues/SearchTextField.tsx",
      "src/components/issues/StatusTogglePills.tsx",
      "~/trpc/react"
    ],
    "src/components/issues/SearchTextField.tsx": [
      "@mui/icons-material",
      "@mui/material",
      "react"
    ],
    "src/components/issues/StatusCategoryMultiSelect.tsx": [
      "@mui/material",
      "react",
      "~/trpc/react"
    ],
    "src/components/issues/StatusTogglePills.tsx": [
      "@mui/material",
      "react",
      "~/trpc/react"
    ],
    "src/components/issues/comment-form-client.tsx": [
      "react",
      "~/components/ui/button",
      "~/components/ui/textarea",
      "~/components/ui/card",
      "~/lib/actions/issue-actions"
    ],
    "src/components/issues/issue-active-filters.tsx": [
      "next/link",
      "~/components/ui/button",
      "~/components/ui/badge",
      "lucide-react",
      "~/lib/search-params/issue-search-params"
    ],
    "src/components/issues/issue-assignment-client.tsx": [
      "react",
      "~/components/ui/button",
      "~/components/ui/select",
      "~/lib/actions/issue-actions"
    ],
    "src/components/issues/issue-detail-server.tsx": [
      "~/components/ui/badge",
      "~/components/ui/card",
      "~/components/ui/avatar",
      "lucide-react",
      "~/lib/dal/issues",
      "~/lib/dal/comments",
      "~/lib/auth/server-auth",
      "date-fns",
      "src/components/issues/issue-status-update-client.tsx",
      "src/components/issues/issue-assignment-client.tsx",
      "src/components/issues/comment-form-client.tsx",
      "src/components/issues/realtime-comments-client.tsx"
    ],
    "src/components/issues/issue-status-update-client.tsx": [
      "react",
      "~/components/ui/button",
      "~/components/ui/select"
    ],
    "src/components/issues/issues-list-server.tsx": [
      "react",
      "next/link",
      "~/components/ui/card",
      "~/components/ui/button",
      "~/components/ui/badge",
      "~/components/ui/avatar",
      "~/components/ui/skeleton",
      "lucide-react",
      "~/lib/dal/issues",
      "date-fns"
    ],
    "src/components/layout/NavigationSkeleton.tsx": [
      "~/components/ui/skeleton",
      "~/components/ui/separator"
    ],
    "src/components/layout/ServerNavigation.tsx": [
      "react",
      "next/link",
      "src/components/layout/client/UserMenuClient.tsx",
      "src/components/layout/client/MobileNavToggle.tsx",
      "src/components/layout/NavigationSkeleton.tsx",
      "~/components/ui/button",
      "~/components/ui/card",
      "~/components/ui/separator"
    ],
    "src/components/layout/client/MobileNavToggle.tsx": [
      "react",
      "~/components/ui/button",
      "~/components/ui/sheet",
      "lucide-react"
    ],
    "src/components/layout/client/UserMenuClient.tsx": [
      "react",
      "~/utils/supabase/client",
      "~/components/ui/button",
      "~/components/ui/dropdown-menu",
      "~/components/ui/avatar",
      "lucide-react"
    ],
    "src/components/layout/navigation.tsx": [
      "next/link",
      "~/components/ui/button",
      "lucide-react",
      "src/components/layout/client/UserMenuClient.tsx",
      "~/components/search",
      "src/components/layout/notification-bell-wrapper.tsx"
    ],
    "src/components/layout/user-menu-client.tsx": [
      "next/link",
      "~/components/ui/button",
      "~/components/ui/avatar",
      "~/components/ui/dropdown-menu",
      "lucide-react"
    ],
    "src/components/machines/client/machine-filters-client.tsx": [
      "react",
      "next/navigation",
      "~/components/ui/button",
      "~/components/ui/badge",
      "~/components/ui/dropdown-menu",
      "lucide-react"
    ],
    "src/components/machines/client/machine-qr-code-client.tsx": [
      "react",
      "~/components/ui/card",
      "~/components/ui/button",
      "~/components/ui/badge",
      "~/components/ui/dropdown-menu",
      "lucide-react",
      "~/lib/actions/machine-actions"
    ],
    "src/components/machines/client/machine-search-client.tsx": [
      "react",
      "next/navigation",
      "~/components/ui/input",
      "~/components/ui/button",
      "lucide-react",
      "~/lib/hooks/use-debounce"
    ],
    "src/components/machines/machine-inventory-server.tsx": [
      "next/link",
      "~/components/ui/badge",
      "~/components/ui/button",
      "~/components/ui/card",
      "~/components/ui/table",
      "lucide-react",
      "src/components/machines/client/machine-search-client.tsx",
      "src/components/machines/client/machine-filters-client.tsx",
      "~/components/ui/pagination-universal"
    ],
    "src/components/machines/machine-stats-server.tsx": [
      "~/components/ui/card",
      "~/components/ui/badge",
      "lucide-react"
    ],
    "src/components/nav-documents.tsx": [
      "@tabler/icons-react",
      "src/components/ui/dropdown-menu",
      "src/components/ui/sidebar"
    ],
    "src/components/nav-main.tsx": [
      "@tabler/icons-react",
      "src/components/ui/button",
      "src/components/ui/sidebar"
    ],
    "src/components/nav-secondary.tsx": [
      "react",
      "@tabler/icons-react",
      "src/components/ui/sidebar"
    ],
    "src/components/nav-user.tsx": [
      "@tabler/icons-react",
      "src/components/ui/avatar",
      "src/components/ui/dropdown-menu",
      "src/components/ui/sidebar"
    ],
    "src/components/permissions/PermissionButton.tsx": [
      "@mui/material",
      "react",
      "~/server/auth/permissions.constants"
    ],
    "src/components/permissions/PermissionGate.tsx": [
      "react"
    ],
    "src/components/site-header.tsx": [
      "src/components/ui/button",
      "src/components/ui/separator",
      "src/components/ui/sidebar"
    ],
    "src/components/ui/Breadcrumbs.tsx": [
      "@mui/material",
      "next/link",
      "next/navigation",
      "react"
    ],
    "src/components/ui/UserAvatar.tsx": [
      "@mui/material",
      "react"
    ],
    "src/components/ui/alert.tsx": [
      "react",
      "class-variance-authority",
      "src/lib/utils"
    ],
    "src/components/ui/badge.tsx": [
      "react",
      "@radix-ui/react-slot",
      "class-variance-authority",
      "src/lib/utils"
    ],
    "src/components/ui/dropdown-menu.tsx": [
      "react",
      "@radix-ui/react-dropdown-menu",
      "lucide-react",
      "src/lib/utils"
    ],
    "src/components/ui/filters-server.tsx": [
      "next/navigation",
      "~/components/ui/button",
      "~/components/ui/input",
      "~/components/ui/label",
      "~/components/ui/badge",
      "~/components/ui/card",
      "~/components/ui/select",
      "lucide-react"
    ],
    "src/components/ui/label.tsx": [
      "react",
      "@radix-ui/react-label",
      "src/lib/utils"
    ],
    "src/components/ui/migration-bridge.tsx": [
      "~/lib/utils"
    ],
    "src/components/ui/pagination-server.tsx": [
      "next/link",
      "~/components/ui/button",
      "lucide-react"
    ],
    "src/components/ui/search-client.tsx": [
      "react",
      "next/navigation",
      "~/components/ui/input",
      "~/components/ui/button",
      "lucide-react"
    ],
    "src/components/ui/select.tsx": [
      "react",
      "@radix-ui/react-select",
      "lucide-react",
      "src/lib/utils"
    ],
    "src/components/ui/sheet.tsx": [
      "react",
      "@radix-ui/react-dialog",
      "lucide-react",
      "src/lib/utils"
    ],
    "src/components/ui/sidebar.tsx": [
      "react",
      "@radix-ui/react-slot",
      "class-variance-authority",
      "lucide-react",
      "~/components/hooks/use-mobile",
      "~/lib/utils",
      "~/components/ui/button",
      "~/components/ui/input",
      "~/components/ui/separator",
      "~/components/ui/sheet",
      "~/components/ui/skeleton",
      "~/components/ui/tooltip"
    ],
    "src/components/ui/skeleton.tsx": [
      "src/lib/utils"
    ],
    "src/components/ui/textarea.tsx": [
      "react",
      "src/lib/utils"
    ],
    "src/components/ui/toggle.tsx": [
      "react",
      "@radix-ui/react-toggle",
      "class-variance-authority",
      "src/lib/utils"
    ],
    "src/components/ui/tooltip.tsx": [
      "react",
      "@radix-ui/react-tooltip",
      "src/lib/utils"
    ],
    "src/contexts/PermissionDepsContext.tsx": [
      "react",
      "~/app/auth-provider",
      "~/trpc/react"
    ],
    "src/env.js": [
      "@t3-oss/env-nextjs",
      "zod"
    ],
    "src/hooks/useClientMounted.ts": [
      "react"
    ],
    "src/hooks/usePermissions.ts": [
      "next/navigation",
      "react",
      "~/contexts/PermissionDepsContext",
      "~/lib/permissions/descriptions"
    ],
    "src/lib/actions/auth-actions.ts": [
      "next/cache",
      "next/navigation",
      "zod",
      "~/lib/supabase/server"
    ],
    "src/lib/actions/issue-actions.ts": [
      "next/cache",
      "next/navigation",
      "react",
      "zod",
      "drizzle-orm",
      "~/server/db/provider",
      "~/server/db/schema",
      "~/lib/utils/id-generation",
      "~/lib/utils/case-transformers",
      "src/lib/actions/shared.ts",
      "~/lib/services/notification-generator"
    ],
    "src/lib/actions/machine-actions.ts": [
      "next/cache",
      "zod",
      "drizzle-orm",
      "~/lib/auth/server-auth",
      "~/lib/dal/shared",
      "~/server/db/schema",
      "~/lib/services/qr-code-service"
    ],
    "src/lib/actions/shared.ts": [
      "next/navigation",
      "next/cache",
      "react",
      "next/server",
      "~/lib/supabase/server"
    ],
    "src/lib/actions/shared.unit.test.ts": [
      "vitest",
      "zod",
      "src/lib/actions/shared.ts"
    ],
    "src/lib/auth/dev-auth.ts": [
      "~/lib/environment-client"
    ],
    "src/lib/auth/server-auth.ts": [
      "react",
      "next/navigation",
      "~/lib/dal/shared",
      "~/lib/supabase/server"
    ],
    "src/lib/auth/server-context.ts": [
      "~/utils/supabase/server",
      "next/navigation",
      "react"
    ],
    "src/lib/common/__tests__/inputValidation.test.ts": [
      "vitest",
      "zod",
      "src/lib/common/inputValidation.ts"
    ],
    "src/lib/common/inputValidation.ts": [
      "zod"
    ],
    "src/lib/dal/machines.ts": [
      "react",
      "drizzle-orm",
      "~/server/db/schema",
      "src/lib/dal/shared.ts"
    ],
    "src/lib/dal/shared.ts": [
      "react",
      "~/lib/supabase/server",
      "~/server/db/provider",
      "drizzle-orm",
      "~/server/db/schema"
    ],
    "src/lib/env-loaders/development.ts": [
      "path",
      "url",
      "dotenv"
    ],
    "src/lib/env-loaders/production.ts": [
      "path",
      "url",
      "dotenv"
    ],
    "src/lib/environment-client.ts": [
      "~/env"
    ],
    "src/lib/environment.ts": [
      "~/env"
    ],
    "src/lib/hooks/use-current-user.ts": [
      "~/app/auth-provider",
      "~/trpc/react"
    ],
    "src/lib/hooks/use-debounce.ts": [
      "react"
    ],
    "src/lib/image-storage/local-storage.ts": [
      "fs",
      "fs/promises",
      "path",
      "src/lib/image-storage/index.ts"
    ],
    "src/lib/logger.ts": [
      "pino",
      "~/env.js",
      "~/lib/environment",
      "~/lib/logger-constants"
    ],
    "src/lib/opdb/client.ts": [
      "src/lib/opdb/utils.ts",
      "~/env"
    ],
    "src/lib/search-params/issue-search-params.ts": [
      "zod"
    ],
    "src/lib/search-params/machine-search-params.ts": [
      "zod"
    ],
    "src/lib/search-params/shared.ts": [
      "zod"
    ],
    "src/lib/supabase/client.ts": [
      "@supabase/ssr",
      "~/env"
    ],
    "src/lib/supabase/error-handler.ts": [
      "src/lib/supabase/errors.ts",
      "src/lib/supabase/type-guards.ts"
    ],
    "src/lib/supabase/multi-tenant-client.ts": [
      "src/lib/supabase/server.ts",
      "src/lib/supabase/rls-helpers.ts"
    ],
    "src/lib/supabase/rls-helpers.ts": [
      "src/lib/supabase/server.ts"
    ],
    "src/lib/supabase/server.ts": [
      "@supabase/ssr",
      "next/headers",
      "~/env"
    ],
    "src/lib/temp-production-overrides.ts": [
      "~/env"
    ],
    "src/lib/tracing.ts": [
      "async_hooks",
      "uuid",
      "~/lib/logger-constants"
    ],
    "src/lib/utils.ts": [
      "clsx",
      "tailwind-merge"
    ],
    "src/lib/utils/api-response-transformers.ts": [
      "src/lib/utils/case-transformers.ts"
    ],
    "src/lib/utils/auth-response-transformers.ts": [
      "src/lib/utils/case-transformers.ts"
    ],
    "src/lib/utils/case-transformers.ts": [
      "drizzle-orm"
    ],
    "src/lib/utils/id-generation.ts": [
      "uuid"
    ],
    "src/lib/utils/machine-response-transformers.ts": [
      "src/lib/utils/case-transformers.ts"
    ],
    "src/lib/utils/membership-transformers.ts": [
      "src/lib/utils/case-transformers.ts"
    ],
    "src/server/api/routers/issue.comment.ts": [
      "@trpc/server",
      "drizzle-orm",
      "zod",
      "src/server/api/routers/utils/commentService.ts",
      "src/server/api/routers/utils/commentValidation.ts",
      "~/lib/utils/id-generation",
      "~/lib/utils/case-transformers",
      "~/lib/utils/api-response-transformers",
      "~/server/api/trpc",
      "~/server/db/schema"
    ],
    "src/server/api/routers/issue.status.ts": [
      "drizzle-orm",
      "uuid",
      "zod",
      "~/lib/utils/case-transformers",
      "~/server/api/trpc",
      "~/server/db/schema/issues"
    ],
    "src/server/api/routers/role.ts": [
      "@trpc/server",
      "drizzle-orm",
      "zod",
      "~/lib/utils/id-generation",
      "~/lib/users/roleManagementValidation",
      "~/server/auth/permissions.constants",
      "~/server/api/trpc",
      "~/server/api/trpc.permission",
      "~/server/db/schema",
      "~/server/db/types"
    ],
    "src/server/api/routers/utils/commentService.ts": [
      "drizzle-orm",
      "~/server/db/schema",
      "~/lib/utils/case-transformers"
    ],
    "src/server/api/trpc.base.ts": [
      "@trpc/server",
      "drizzle-orm",
      "superjson",
      "zod",
      "~/env",
      "~/lib/logger",
      "~/lib/logger-constants",
      "~/lib/supabase/server",
      "~/lib/supabase/rls-helpers",
      "~/lib/tracing",
      "~/server/auth/permissions",
      "~/server/auth/supabase",
      "~/server/db/provider",
      "~/server/db/schema",
      "~/server/services/factory"
    ],
    "src/server/api/trpc.permission.ts": [
      "src/server/api/trpc.base.ts",
      "~/server/auth/permissions"
    ],
    "src/server/auth/permissions.ts": [
      "@trpc/server",
      "drizzle-orm",
      "src/server/services/permissionService.ts",
      "src/server/auth/permissions.constants.ts",
      "~/server/db/drizzle",
      "~/server/db/schema"
    ],
    "src/server/auth/supabase.ts": [
      "~/lib/logger",
      "~/lib/supabase/server"
    ],
    "src/server/auth/uploadAuth.ts": [
      "@trpc/server",
      "drizzle-orm",
      "next/server",
      "src/server/auth/supabase.ts",
      "src/server/auth/types.ts",
      "~/lib/utils/case-transformers",
      "~/env",
      "~/server/db/schema"
    ],
    "src/server/auth/validation.ts": [
      "~/env.js",
      "~/lib/environment",
      "~/lib/logger"
    ],
    "src/server/db/client-factory.ts": [
      "drizzle-orm/postgres-js",
      "drizzle-orm/pglite"
    ],
    "src/server/db/drizzle.ts": [
      "src/server/db/client-factory.ts",
      "postgres",
      "~/env",
      "~/lib/environment"
    ],
    "src/server/db/provider.ts": [
      "~/server/db/drizzle"
    ],
    "src/server/db/queries/audit-queries.ts": [
      "~/server/db/provider",
      "~/server/db/schema",
      "drizzle-orm"
    ],
    "src/server/db/seed/auth-users.ts": [
      "@supabase/supabase-js",
      "nanoid",
      "~/server/db/drizzle",
      "~/env.js",
      "src/server/db/seed/constants.ts",
      "src/server/db/seed/seed-utilities.ts",
      "~/lib/supabase/error-handler",
      "~/server/db/schema",
      "drizzle-orm"
    ],
    "src/server/db/seed/full-issues.ts": [
      "src/server/db/seed/constants.ts"
    ],
    "src/server/db/seed/index.ts": [
      "~/lib/environment",
      "~/env.js",
      "src/server/db/seed/seed-utilities.ts",
      "src/server/db/seed/infrastructure.ts",
      "src/server/db/seed/auth-users.ts",
      "src/server/db/seed/sample-data.ts"
    ],
    "src/server/db/seed/infrastructure.ts": [
      "drizzle-orm",
      "~/server/db/drizzle",
      "src/server/db/seed/constants.ts",
      "src/server/db/seed/seed-utilities.ts",
      "~/server/db/schema",
      "~/server/auth/permissions.constants"
    ],
    "src/server/db/seed/mapping-validator.ts": [
      "src/server/db/seed/constants.ts"
    ],
    "src/server/db/seed/sample-data.ts": [
      "drizzle-orm",
      "~/server/db/drizzle",
      "src/server/db/seed/constants.ts",
      "src/server/db/seed/seed-utilities.ts",
      "~/server/db/schema",
      "src/server/db/seed/minimal-issues.ts",
      "src/server/db/seed/full-issues.ts"
    ],
    "src/server/db/seed/seed-utilities.ts": [
      "src/server/db/seed/constants.ts",
      "~/env.js"
    ],
    "src/server/db/setup-rls.ts": [
      "dotenv",
      "~/env.js",
      "fs",
      "url",
      "path",
      "postgres"
    ],
    "src/server/db/utils/common-queries.ts": [
      "drizzle-orm",
      "src/server/db/utils/field-validation.ts",
      "~/env.js"
    ],
    "src/server/db/utils/field-validation.ts": [
      "~/env.js"
    ],
    "src/server/db/utils/role-validation.ts": [
      "@trpc/server",
      "drizzle-orm",
      "~/server/auth/permissions.constants",
      "~/server/db/schema"
    ],
    "src/server/services/collectionService.service.test.ts": [
      "vitest",
      "src/server/services/collectionService.ts",
      "~/test/helpers/service-test-helpers"
    ],
    "src/server/services/collectionService.ts": [
      "drizzle-orm",
      "~/lib/utils/id-generation"
    ],
    "src/server/services/commentCleanupService.ts": [
      "drizzle-orm",
      "drizzle-orm",
      "~/server/constants/cleanup",
      "~/server/db/drizzle",
      "~/server/db/schema"
    ],
    "src/server/services/factory.ts": [
      "src/server/services/collectionService.ts",
      "src/server/services/commentCleanupService.ts",
      "src/server/services/issueActivityService.ts",
      "src/server/services/notificationService.ts",
      "src/server/services/pinballmapService.ts",
      "src/server/services/qrCodeService.ts",
      "src/server/services/roleService.ts"
    ],
    "src/server/services/issueActivityService.ts": [
      "drizzle-orm",
      "src/server/db/drizzle.ts",
      "~/lib/utils/id-generation"
    ],
    "src/server/services/notificationService.ts": [
      "drizzle-orm",
      "~/lib/utils/id-generation",
      "~/server/db/drizzle",
      "~/server/db/schema"
    ],
    "src/server/services/permissionService.ts": [
      "@trpc/server",
      "drizzle-orm",
      "src/server/auth/permissions.constants.ts",
      "~/server/db/drizzle"
    ],
    "src/server/services/pinballmapService.ts": [
      "drizzle-orm",
      "~/lib/external/pinballmapTransformer",
      "~/lib/logger",
      "~/server/db/schema"
    ],
    "src/server/services/qrCodeService.ts": [
      "drizzle-orm",
      "qrcode",
      "~/lib/image-storage/local-storage",
      "~/lib/logger",
      "src/server/db/drizzle.ts",
      "src/server/utils/qrCodeUtils.ts"
    ],
    "src/server/services/roleService.ts": [
      "@trpc/server",
      "drizzle-orm",
      "src/server/auth/permissions.constants.ts",
      "src/server/services/permissionService.ts",
      "~/lib/utils/id-generation",
      "~/server/db/drizzle",
      "~/server/db/schema"
    ],
    "src/server/services/types.ts": [
      "~/server/db/schema/collections",
      "~/server/db/schema/issues"
    ],
    "src/server/services/validation-helper.ts": [
      "~/env.js"
    ],
    "src/test/archived-templates/service.test.template.ts": [
      "vitest",
      "@trpc/server",
      "src/test/helpers/service-test-helpers.ts"
    ],
    "src/test/helpers/anonymous-test-helpers.ts": [
      "vitest",
      "vitest-mock-extended",
      "src/test/constants/seed-test-ids.ts",
      "src/test/helpers/service-test-helpers.ts"
    ],
    "src/test/helpers/service-test-helpers.ts": [
      "vitest",
      "vitest-mock-extended",
      "src/test/constants/seed-test-ids.ts"
    ],
    "src/test/integration/archetype-integration-example.test.ts": [
      "vitest",
      "zod",
      "~/test/mocks/seed-based-mocks",
      "~/lib/actions/shared"
    ],
    "src/test/mocks/seed-based-mocks.ts": [
      "~/test/constants/seed-test-ids"
    ],
    "src/test/rsc-helpers/dal-test-helpers.ts": [
      "src/test/constants/seed-test-ids.ts"
    ],
    "src/test/rsc-helpers/server-action-test-helpers.ts": [
      "src/test/rsc-helpers/dal-test-helpers.ts"
    ],
    "src/test/templates/e2e.template.ts": [
      "@playwright/test",
      "~/test/constants/seed-test-ids"
    ],
    "src/test/templates/service.test.template.ts": [
      "vitest",
      "@trpc/server",
      "~/test/helpers/service-test-helpers"
    ],
    "src/trpc/query-client.ts": [
      "@tanstack/react-query",
      "superjson"
    ],
    "src/trpc/react.tsx": [
      "@tanstack/react-query",
      "@trpc/client",
      "@trpc/react-query",
      "@trpc/server",
      "react",
      "superjson",
      "src/trpc/query-client.ts",
      "~/env",
      "~/lib/environment-client",
      "~/server/api/root"
    ],
    "src/utils/supabase/client.ts": [
      "@supabase/ssr",
      "~/env"
    ],
    "src/utils/supabase/middleware.ts": [
      "@supabase/ssr",
      "next/server",
      "~/env"
    ],
    "src/utils/supabase/server.ts": [
      "@supabase/ssr",
      "next/headers",
      "~/env"
    ]
  },
  "dir_purposes": {
    "RSC_MIGRATION": "Test files and test utilities",
    "e2e": "Test files and test utilities",
    "src/app/api/search/suggestions": "API routes and endpoints",
    "src": "Source code root directory",
    "src/app/api/search/universal": "API routes and endpoints",
    "src/app/settings/activity/components": "Reusable UI components",
    "src/app/settings/organization/components": "Reusable UI components",
    "src/app/settings/system/components": "Reusable UI components",
    "src/app/settings/users/components": "Reusable UI components",
    "src/components": "Reusable UI components",
    "src/components/utils": "Shared utility functions and helpers",
    "src/lib/actions": "Test files and test utilities",
    "src/lib": "Library code and shared modules",
    "src/lib/dal": "Test files and test utilities",
    "src/lib/services": "Business logic and external service integrations",
    ".archived-tests-2025-08-23": "Test files and test utilities",
    ".archived-tests-2025-08-23/config": "Configuration files and settings",
    ".archived-tests-2025-08-23/e2e": "Test files and test utilities",
    ".archived-tests-2025-08-23/e2e/helpers": "Helper functions and utilities",
    ".archived-tests-2025-08-23/src/app/api/dev/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/app/dashboard/_components/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/app/games/[id]/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/app/games/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/app/issues/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/app/machines/[id]": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/app/machines/components": "Reusable UI components",
    ".archived-tests-2025-08-23/src/components/issues/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/components": "Reusable UI components",
    ".archived-tests-2025-08-23/src/components/locations/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/components/machines/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/components/permissions/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/hooks/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/integration-tests": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/lib/common/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/lib/environment-client/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/lib/external/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/lib/issues/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/lib/opdb/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/lib/permissions/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/lib/pinballmap/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/lib/supabase/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/lib/users/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/server/api/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/server/api/routers/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/server/api/routers/utils/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/server/auth/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/server/db/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/server/services/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/test": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/test/__examples__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/test/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/test/constants": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/test/examples": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/test/helpers/__tests__": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/test/helpers": "Helper functions and utilities",
    ".archived-tests-2025-08-23/src/test/setup": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/test/templates": "Test files and test utilities",
    ".archived-tests-2025-08-23/src/test/utils": "Shared utility functions and helpers",
    "docs": "Project documentation",
    "docs/architecture": "API routes and endpoints",
    "docs/configuration": "Configuration files and settings",
    "docs/deprecated": "Test files and test utilities",
    "docs/deprecated/testing": "Test files and test utilities",
    "docs/design-docs": "Project documentation",
    "docs/latest-updates": "Test files and test utilities",
    "docs/lessons-learned": "API routes and endpoints",
    "docs/planning/archive": "Test files and test utilities",
    "docs/quick-reference": "Test files and test utilities",
    "docs/security": "Test files and test utilities",
    "docs/testing": "Test files and test utilities",
    "e2e/helpers": "Helper functions and utilities",
    "scripts": "Build and utility scripts",
    "src/app/_components": "Reusable UI components",
    "src/app/api/dev/users": "API routes and endpoints",
    "src/app/api/health": "API routes and endpoints",
    "src/app/api/qr/[qrCodeId]": "API routes and endpoints",
    "src/app/api/trpc/[trpc]": "API routes and endpoints",
    "src/app/auth/auth-code-error": "Authentication and authorization logic",
    "src/app/auth/callback": "API routes and endpoints",
    "src/app/auth/sign-in/components": "Reusable UI components",
    "src/app/auth/sign-up/components": "Reusable UI components",
    "src/app/dal-test": "Test files and test utilities",
    "src/app/phase1d-test": "Test files and test utilities",
    "src/lib/auth": "Authentication and authorization logic",
    "src/lib/common/__tests__": "Test files and test utilities",
    "src/lib/utils": "Shared utility functions and helpers",
    "src/lib/utils/__tests__": "Test files and test utilities",
    "src/server/api": "API endpoints and route handlers",
    "src/server/api/routers": "Data models and schemas",
    "src/server/api/routers/utils": "Shared utility functions and helpers",
    "src/server/auth": "Authentication and authorization logic",
    "src/server/db/utils/__tests__": "Test files and test utilities",
    "src/server/db/utils": "Shared utility functions and helpers",
    "src/server/services": "Business logic and external service integrations",
    "src/server/utils": "Shared utility functions and helpers",
    "src/test": "Test files and test utilities",
    "src/test/archived-templates": "Test files and test utilities",
    "src/test/constants": "Test files and test utilities",
    "src/test/helpers": "Helper functions and utilities",
    "src/test/integration": "Test files and test utilities",
    "src/test/mocks": "Test files and test utilities",
    "src/test/rsc-helpers": "Helper functions and utilities",
    "src/test/templates": "Test files and test utilities",
    "src/utils": "Shared utility functions and helpers",
    "supabase/tests": "Test files and test utilities",
    "supabase/tests/rls": "Test files and test utilities",
    "supabase/tests/setup": "Test files and test utilities"
  },
  "staleness": 1755788026.067337,
  "_meta": {
    "target_size_k": 50,
    "generated_at": 1756392826.079812,
    "actual_size_k": 61,
    "files_hash": "a00c95de7e65cc68",
    "compression_ratio": "122.0%",
    "last_interactive_size_k": 50
  }
}