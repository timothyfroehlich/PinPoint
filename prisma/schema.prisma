// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================
// AUTH & USER MODELS
// =================================

model User {
  id            String @id @default(cuid())
  name          String?
  email         String? @unique
  emailVerified DateTime?
  image         String? // From provider
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // PinPoint Specific Profile
  bio            String? @db.Text
  profilePicture String? // Path to uploaded avatar

  // Relations
  accounts       Account[]
  sessions       Session[]
  memberships    Membership[]
  ownedMachines  Machine[] @relation("MachineOwner")
  issuesCreated  Issue[]   @relation("CreatedBy")
  issuesAssigned Issue[]   @relation("AssignedTo")
  comments       Comment[]
  upvotes        Upvote[]
  activityHistory IssueHistory[] @relation("ActivityActor")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// =================================
// ORGANIZATION & TENANCY MODELS
// =================================

model Organization {
  id        String   @id @default(cuid())
  name      String
  subdomain String?  @unique // For V1.0 subdomain feature
  logoUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  memberships     Membership[]
  locations       Location[]
  roles           Role[]
  machines        Machine[]
  issues          Issue[]
  priorities      Priority[]
  issueStatuses   IssueStatus[]
  collectionTypes CollectionType[]
  issueHistory    IssueHistory[]
}

model Membership {
  id             String @id @default(cuid())
  userId         String
  organizationId String
  roleId         String

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role         Role         @relation(fields: [roleId], references: [id])

  @@unique([userId, organizationId])
}

// Models for V1.0 Configurable RBAC
model Role {
  id             String  @id @default(cuid())
  name           String  // e.g., "Admin", "Technician", "Manager"
  organizationId String
  isDefault      Boolean @default(false) // To identify system-default roles

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  memberships  Membership[]
  permissions  Permission[] @relation("RolePermissions")

  @@unique([name, organizationId])
}

model Permission {
  id   String @id @default(cuid())
  name String @unique // e.g., "issue:create", "machine:delete", "role:manage"

  roles Role[] @relation("RolePermissions")
}

// =================================
// CORE ASSET & ISSUE MODELS
// =================================

model Location {
  id             String @id @default(cuid())
  name           String
  organizationId String

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  machines     Machine[]
}

// Replaces GameTitle
model Model {
  id           String  @id @default(cuid())
  name         String
  manufacturer String?
  year         Int?

  // OPDB / PinballMap specific fields
  opdbId   String?  @unique
  isCustom Boolean  @default(false) // Flag for custom/homebrew models

  // Relations
  machines Machine[]
}

// Replaces GameInstance
model Machine {
  id             String  @id @default(cuid())
  organizationId String
  locationId     String
  modelId        String
  ownerId        String?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  location     Location     @relation(fields: [locationId], references: [id])
  model        Model        @relation(fields: [modelId], references: [id])
  owner        User?        @relation("MachineOwner", fields: [ownerId], references: [id])
  issues       Issue[]
  collections  Collection[]
}

model Issue {
  id          String @id @default(cuid())
  title       String
  description String? @db.Text
  consistency String? // e.g., "Always", "Occasionally"

  // For V1.0 checklists
  checklist Json? // Store checklist items as JSON: [{ text: "...", completed: false }]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  resolvedAt DateTime?

  // Relations
  organizationId String
  machineId      String
  statusId       String
  priorityId     String
  createdById    String
  assignedToId   String?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  machine      Machine      @relation(fields: [machineId], references: [id])
  priority     Priority     @relation(fields: [priorityId], references: [id])
  status       IssueStatus  @relation(fields: [statusId], references: [id])
  createdBy    User         @relation("CreatedBy", fields: [createdById], references: [id])
  assignedTo   User?        @relation("AssignedTo", fields: [assignedToId], references: [id])

  comments    Comment[]
  attachments Attachment[]
  history     IssueHistory[]
  upvotes     Upvote[]
}

model Priority {
  id             String  @id @default(cuid())
  name           String  // e.g., "Low", "Medium", "High"
  order          Int     // For sorting purposes
  organizationId String
  isDefault      Boolean @default(false)

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  issues       Issue[]

  @@unique([name, organizationId])
}

model IssueStatus {
  id             String         @id @default(cuid())
  name           String         // e.g., "Reported", "Diagnosing", "Awaiting Parts", "Fixed"
  category       StatusCategory // "NEW", "IN_PROGRESS", "RESOLVED"
  organizationId String
  isDefault      Boolean        @default(false)

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  issues       Issue[]

  @@unique([name, organizationId])
}

enum StatusCategory {
  NEW
  IN_PROGRESS
  RESOLVED
}

enum ActivityType {
  CREATED         // Issue created
  STATUS_CHANGED  // Status updated
  ASSIGNED        // Assignee changed
  PRIORITY_CHANGED // Priority updated
  COMMENTED       // Comment added
  ATTACHMENT_ADDED // File attached
  MERGED          // Issue merged (V1.0)
  RESOLVED        // Issue resolved
  REOPENED        // Issue reopened
  SYSTEM          // System-generated activity
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  issueId   String
  authorId  String

  issue  Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  author User  @relation(fields: [authorId], references: [id])
}

model Attachment {
  id        String   @id @default(cuid())
  url       String
  fileName  String
  fileType  String
  createdAt DateTime @default(now())
  issueId   String

  issue Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model IssueHistory {
  id             String   @id @default(cuid())
  field          String   // e.g., "status", "assignee", "priority"
  oldValue       String?
  newValue       String?
  changedAt      DateTime @default(now())

  // Add missing fields
  organizationId String   // For multi-tenancy
  actorId        String?  // Who performed the action (null for system actions)
  type           ActivityType // Replace string with proper enum

  // Relations
  issueId        String
  issue          Issue        @relation(fields: [issueId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  actor          User?        @relation("ActivityActor", fields: [actorId], references: [id])
}

model Upvote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  issueId   String
  userId    String

  issue Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  @@unique([issueId, userId])
}

// =================================
// COLLECTION & NOTIFICATION MODELS
// =================================

model Collection {
  id      String  @id @default(cuid())
  name    String
  typeId  String
  isSmart Boolean @default(false) // For 1.x Smart Collections

  type     CollectionType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  machines Machine[]
}

model CollectionType {
  id             String @id @default(cuid())
  name           String // e.g., "Physical Area", "Manufacturer", "Game Era"
  organizationId String

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  collections  Collection[]
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  // Recipient, related entity, etc.
}