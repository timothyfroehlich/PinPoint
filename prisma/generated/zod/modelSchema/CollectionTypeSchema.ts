import { z } from "zod";
import { JsonValueSchema } from "../inputTypeSchemas/JsonValueSchema";
import type { JsonValueType } from "../inputTypeSchemas/JsonValueSchema";
import {
  OrganizationWithRelationsSchema,
  OrganizationPartialWithRelationsSchema,
  OrganizationOptionalDefaultsWithRelationsSchema,
} from "./OrganizationSchema";
import type {
  OrganizationWithRelations,
  OrganizationPartialWithRelations,
  OrganizationOptionalDefaultsWithRelations,
} from "./OrganizationSchema";
import {
  CollectionWithRelationsSchema,
  CollectionPartialWithRelationsSchema,
  CollectionOptionalDefaultsWithRelationsSchema,
} from "./CollectionSchema";
import type {
  CollectionWithRelations,
  CollectionPartialWithRelations,
  CollectionOptionalDefaultsWithRelations,
} from "./CollectionSchema";

/////////////////////////////////////////
// COLLECTION TYPE SCHEMA
/////////////////////////////////////////

export const CollectionTypeSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  organizationId: z.string(),
  isAutoGenerated: z.boolean(),
  isEnabled: z.boolean(),
  sourceField: z.string().nullable(),
  generationRules: JsonValueSchema.nullable(),
  displayName: z.string().nullable(),
  description: z.string().nullable(),
  sortOrder: z.number().int(),
});

export type CollectionType = z.infer<typeof CollectionTypeSchema>;

/////////////////////////////////////////
// COLLECTION TYPE PARTIAL SCHEMA
/////////////////////////////////////////

export const CollectionTypePartialSchema = CollectionTypeSchema.partial();

export type CollectionTypePartial = z.infer<typeof CollectionTypePartialSchema>;

/////////////////////////////////////////
// COLLECTION TYPE OPTIONAL DEFAULTS SCHEMA
/////////////////////////////////////////

export const CollectionTypeOptionalDefaultsSchema = CollectionTypeSchema.merge(
  z.object({
    id: z.string().cuid().optional(),
    isAutoGenerated: z.boolean().optional(),
    isEnabled: z.boolean().optional(),
    sortOrder: z.number().int().optional(),
  }),
);

export type CollectionTypeOptionalDefaults = z.infer<
  typeof CollectionTypeOptionalDefaultsSchema
>;

/////////////////////////////////////////
// COLLECTION TYPE RELATION SCHEMA
/////////////////////////////////////////

export type CollectionTypeRelations = {
  organization: OrganizationWithRelations;
  collections: CollectionWithRelations[];
};

export type CollectionTypeWithRelations = Omit<
  z.infer<typeof CollectionTypeSchema>,
  "generationRules"
> & {
  generationRules?: JsonValueType | null;
} & CollectionTypeRelations;

export const CollectionTypeWithRelationsSchema: z.ZodType<CollectionTypeWithRelations> =
  CollectionTypeSchema.merge(
    z.object({
      organization: z.lazy(() => OrganizationWithRelationsSchema),
      collections: z.lazy(() => CollectionWithRelationsSchema).array(),
    }),
  );

/////////////////////////////////////////
// COLLECTION TYPE OPTIONAL DEFAULTS RELATION SCHEMA
/////////////////////////////////////////

export type CollectionTypeOptionalDefaultsRelations = {
  organization: OrganizationOptionalDefaultsWithRelations;
  collections: CollectionOptionalDefaultsWithRelations[];
};

export type CollectionTypeOptionalDefaultsWithRelations = Omit<
  z.infer<typeof CollectionTypeOptionalDefaultsSchema>,
  "generationRules"
> & {
  generationRules?: JsonValueType | null;
} & CollectionTypeOptionalDefaultsRelations;

export const CollectionTypeOptionalDefaultsWithRelationsSchema: z.ZodType<CollectionTypeOptionalDefaultsWithRelations> =
  CollectionTypeOptionalDefaultsSchema.merge(
    z.object({
      organization: z.lazy(
        () => OrganizationOptionalDefaultsWithRelationsSchema,
      ),
      collections: z
        .lazy(() => CollectionOptionalDefaultsWithRelationsSchema)
        .array(),
    }),
  );

/////////////////////////////////////////
// COLLECTION TYPE PARTIAL RELATION SCHEMA
/////////////////////////////////////////

export type CollectionTypePartialRelations = {
  organization?: OrganizationPartialWithRelations;
  collections?: CollectionPartialWithRelations[];
};

export type CollectionTypePartialWithRelations = Omit<
  z.infer<typeof CollectionTypePartialSchema>,
  "generationRules"
> & {
  generationRules?: JsonValueType | null;
} & CollectionTypePartialRelations;

export const CollectionTypePartialWithRelationsSchema: z.ZodType<CollectionTypePartialWithRelations> =
  CollectionTypePartialSchema.merge(
    z.object({
      organization: z.lazy(() => OrganizationPartialWithRelationsSchema),
      collections: z.lazy(() => CollectionPartialWithRelationsSchema).array(),
    }),
  ).partial();

export type CollectionTypeOptionalDefaultsWithPartialRelations = Omit<
  z.infer<typeof CollectionTypeOptionalDefaultsSchema>,
  "generationRules"
> & {
  generationRules?: JsonValueType | null;
} & CollectionTypePartialRelations;

export const CollectionTypeOptionalDefaultsWithPartialRelationsSchema: z.ZodType<CollectionTypeOptionalDefaultsWithPartialRelations> =
  CollectionTypeOptionalDefaultsSchema.merge(
    z
      .object({
        organization: z.lazy(() => OrganizationPartialWithRelationsSchema),
        collections: z.lazy(() => CollectionPartialWithRelationsSchema).array(),
      })
      .partial(),
  );

export type CollectionTypeWithPartialRelations = Omit<
  z.infer<typeof CollectionTypeSchema>,
  "generationRules"
> & {
  generationRules?: JsonValueType | null;
} & CollectionTypePartialRelations;

export const CollectionTypeWithPartialRelationsSchema: z.ZodType<CollectionTypeWithPartialRelations> =
  CollectionTypeSchema.merge(
    z
      .object({
        organization: z.lazy(() => OrganizationPartialWithRelationsSchema),
        collections: z.lazy(() => CollectionPartialWithRelationsSchema).array(),
      })
      .partial(),
  );

export default CollectionTypeSchema;
