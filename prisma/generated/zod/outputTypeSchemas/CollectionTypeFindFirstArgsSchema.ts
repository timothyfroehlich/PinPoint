import { z } from 'zod';
import type { Prisma } from '@prisma/client';
import { CollectionTypeIncludeSchema } from '../inputTypeSchemas/CollectionTypeIncludeSchema'
import { CollectionTypeWhereInputSchema } from '../inputTypeSchemas/CollectionTypeWhereInputSchema'
import { CollectionTypeOrderByWithRelationInputSchema } from '../inputTypeSchemas/CollectionTypeOrderByWithRelationInputSchema'
import { CollectionTypeWhereUniqueInputSchema } from '../inputTypeSchemas/CollectionTypeWhereUniqueInputSchema'
import { CollectionTypeScalarFieldEnumSchema } from '../inputTypeSchemas/CollectionTypeScalarFieldEnumSchema'
import { OrganizationArgsSchema } from "../outputTypeSchemas/OrganizationArgsSchema"
import { CollectionFindManyArgsSchema } from "../outputTypeSchemas/CollectionFindManyArgsSchema"
import { CollectionTypeCountOutputTypeArgsSchema } from "../outputTypeSchemas/CollectionTypeCountOutputTypeArgsSchema"
// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const CollectionTypeSelectSchema: z.ZodType<Prisma.CollectionTypeSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  isAutoGenerated: z.boolean().optional(),
  isEnabled: z.boolean().optional(),
  sourceField: z.boolean().optional(),
  generationRules: z.boolean().optional(),
  displayName: z.boolean().optional(),
  description: z.boolean().optional(),
  sortOrder: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  collections: z.union([z.boolean(),z.lazy(() => CollectionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CollectionTypeCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CollectionTypeFindFirstArgsSchema: z.ZodType<Prisma.CollectionTypeFindFirstArgs> = z.object({
  select: CollectionTypeSelectSchema.optional(),
  include: z.lazy(() => CollectionTypeIncludeSchema).optional(),
  where: CollectionTypeWhereInputSchema.optional(),
  orderBy: z.union([ CollectionTypeOrderByWithRelationInputSchema.array(),CollectionTypeOrderByWithRelationInputSchema ]).optional(),
  cursor: CollectionTypeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CollectionTypeScalarFieldEnumSchema,CollectionTypeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export default CollectionTypeFindFirstArgsSchema;
