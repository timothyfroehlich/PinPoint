import { z } from "zod";
import type { Prisma } from "@prisma/client";
import { CollectionTypeIncludeSchema } from "../inputTypeSchemas/CollectionTypeIncludeSchema";
import { CollectionTypeWhereUniqueInputSchema } from "../inputTypeSchemas/CollectionTypeWhereUniqueInputSchema";
import { CollectionTypeCreateInputSchema } from "../inputTypeSchemas/CollectionTypeCreateInputSchema";
import { CollectionTypeUncheckedCreateInputSchema } from "../inputTypeSchemas/CollectionTypeUncheckedCreateInputSchema";
import { CollectionTypeUpdateInputSchema } from "../inputTypeSchemas/CollectionTypeUpdateInputSchema";
import { CollectionTypeUncheckedUpdateInputSchema } from "../inputTypeSchemas/CollectionTypeUncheckedUpdateInputSchema";
import { OrganizationArgsSchema } from "../outputTypeSchemas/OrganizationArgsSchema";
import { CollectionFindManyArgsSchema } from "../outputTypeSchemas/CollectionFindManyArgsSchema";
import { CollectionTypeCountOutputTypeArgsSchema } from "../outputTypeSchemas/CollectionTypeCountOutputTypeArgsSchema";
// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const CollectionTypeSelectSchema: z.ZodType<Prisma.CollectionTypeSelect> =
  z
    .object({
      id: z.boolean().optional(),
      name: z.boolean().optional(),
      organizationId: z.boolean().optional(),
      isAutoGenerated: z.boolean().optional(),
      isEnabled: z.boolean().optional(),
      sourceField: z.boolean().optional(),
      generationRules: z.boolean().optional(),
      displayName: z.boolean().optional(),
      description: z.boolean().optional(),
      sortOrder: z.boolean().optional(),
      organization: z
        .union([z.boolean(), z.lazy(() => OrganizationArgsSchema)])
        .optional(),
      collections: z
        .union([z.boolean(), z.lazy(() => CollectionFindManyArgsSchema)])
        .optional(),
      _count: z
        .union([
          z.boolean(),
          z.lazy(() => CollectionTypeCountOutputTypeArgsSchema),
        ])
        .optional(),
    })
    .strict();

export const CollectionTypeUpsertArgsSchema: z.ZodType<Prisma.CollectionTypeUpsertArgs> =
  z
    .object({
      select: CollectionTypeSelectSchema.optional(),
      include: z.lazy(() => CollectionTypeIncludeSchema).optional(),
      where: CollectionTypeWhereUniqueInputSchema,
      create: z.union([
        CollectionTypeCreateInputSchema,
        CollectionTypeUncheckedCreateInputSchema,
      ]),
      update: z.union([
        CollectionTypeUpdateInputSchema,
        CollectionTypeUncheckedUpdateInputSchema,
      ]),
    })
    .strict() as z.ZodType<Prisma.CollectionTypeUpsertArgs>;

export default CollectionTypeUpsertArgsSchema;
