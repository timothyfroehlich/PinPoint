import { PrismaClient, StatusCategory } from "@prisma/client";

import { env } from "../src/env.js";

const prisma = new PrismaClient();

// Helper function to get random default avatar
function getRandomDefaultAvatar(): string {
  const avatarNumber = Math.floor(Math.random() * 10) + 1;
  return `/images/default-avatars/default-avatar-${avatarNumber}.webp`;
}

// Create global permissions
async function createGlobalPermissions() {
  const permissions = [
    "issue:create",
    "issue:edit",
    "issue:delete",
    "issue:assign",
    "machine:edit",
    "machine:delete",
    "location:edit",
    "location:delete",
    "organization:manage",
    "role:manage",
    "user:manage",
    "attachment:create",
  ];

  await Promise.all(
    permissions.map((permName) =>
      prisma.permission.upsert({
        where: { name: permName },
        update: {},
        create: { name: permName },
      }),
    ),
  );

  console.log(`✓ Created ${permissions.length} global permissions`);
}

// Create default collection types for an organization
async function createDefaultCollectionTypes(organizationId: string) {
  const defaultCollectionTypes = [
    {
      name: "Rooms",
      displayName: "Rooms",
      isAutoGenerated: false,
      isEnabled: true,
      sortOrder: 1,
    },
    {
      name: "Manufacturer",
      displayName: "Manufacturer",
      isAutoGenerated: true,
      sourceField: "manufacturer",
      isEnabled: false,
      sortOrder: 2,
    },
    {
      name: "Era",
      displayName: "Era",
      isAutoGenerated: true,
      sourceField: "year",
      isEnabled: false,
      sortOrder: 3,
    },
  ];

  for (const typeData of defaultCollectionTypes) {
    await prisma.collectionType.upsert({
      where: {
        name_organizationId: {
          name: typeData.name,
          organizationId,
        },
      },
      update: typeData,
      create: {
        ...typeData,
        organizationId,
      },
    });
  }
  console.log(`✓ Created ${defaultCollectionTypes.length} collection types`);
}

// Create organization with automatic default roles
async function createOrganizationWithRoles(orgData: {
  name: string;
  subdomain: string;
  logoUrl?: string;
}) {
  // Create organization
  const organization = await prisma.organization.upsert({
    where: { subdomain: orgData.subdomain },
    update: orgData,
    create: orgData,
  });

  // Create default roles for this organization
  const defaultRoles = [
    {
      name: "Admin",
      permissions: [
        "issue:create",
        "issue:edit",
        "issue:delete",
        "issue:assign",
        "machine:edit",
        "machine:delete",
        "location:edit",
        "location:delete",
        "organization:manage",
        "role:manage",
        "user:manage",
        "attachment:create",
      ],
    },
    {
      name: "Tech",
      permissions: [
        "issue:create",
        "issue:edit",
        "issue:assign",
        "machine:edit",
        "attachment:create",
      ],
    },
    {
      name: "Player",
      permissions: ["issue:create", "attachment:create"],
    },
  ];

  for (const roleData of defaultRoles) {
    const role = await prisma.role.upsert({
      where: {
        name_organizationId: {
          name: roleData.name,
          organizationId: organization.id,
        },
      },
      update: {},
      create: {
        name: roleData.name,
        organizationId: organization.id,
        isDefault: roleData.name === "Player", // Player is default role
      },
    });

    // Connect permissions to role
    const permissions = await prisma.permission.findMany({
      where: { name: { in: roleData.permissions } },
    });

    await prisma.role.update({
      where: { id: role.id },
      data: {
        permissions: {
          connect: permissions.map((p) => ({ id: p.id })),
        },
      },
    });
  }

  console.log(
    `✓ Created organization "${organization.name}" with default roles`,
  );
  return organization;
}

// Create default priorities for organization
async function createDefaultPriorities(organizationId: string) {
  const priorities = [
    { name: "Low", order: 1 },
    { name: "Medium", order: 2 },
    { name: "High", order: 3 },
    { name: "Critical", order: 4 },
  ];

  for (const priorityData of priorities) {
    await prisma.priority.upsert({
      where: {
        name_organizationId: {
          name: priorityData.name,
          organizationId: organizationId,
        },
      },
      update: {},
      create: {
        ...priorityData,
        organizationId: organizationId,
        isDefault: priorityData.name === "Medium",
      },
    });
  }

  console.log(`✓ Created ${priorities.length} default priorities`);
}

// Create default issue statuses
async function createDefaultStatuses(organizationId: string) {
  const statusesToUpsert = [
    { name: "New", category: StatusCategory.NEW },
    { name: "In Progress", category: StatusCategory.IN_PROGRESS },
    { name: "Needs Expert Help", category: StatusCategory.IN_PROGRESS },
    { name: "Needs Parts", category: StatusCategory.IN_PROGRESS },
    { name: "Fixed", category: StatusCategory.RESOLVED },
    { name: "Won't Fix", category: StatusCategory.RESOLVED },
    { name: "Not Reproducible", category: StatusCategory.RESOLVED },
  ];

  for (const statusData of statusesToUpsert) {
    await prisma.issueStatus.upsert({
      where: {
        name_organizationId: {
          name: statusData.name,
          organizationId: organizationId,
        },
      },
      update: {
        category: statusData.category,
      },
      create: {
        name: statusData.name,
        category: statusData.category,
        organizationId: organizationId,
        isDefault: statusData.name === "New",
      },
    });
  }

  console.log(`✓ Created ${statusesToUpsert.length} issue statuses`);
}

async function main() {
  console.log("🚀 Starting beta seed...\n");

  try {
    // 1. Create global permissions
    await createGlobalPermissions();

    // 2. Create organization with roles
    const organization = await createOrganizationWithRoles({
      name: "Austin Pinball Collective",
      subdomain: "apc",
      logoUrl: "/images/logos/austinpinballcollective-logo-outline.png",
    });

    // 3. Create default data
    await createDefaultPriorities(organization.id);
    await createDefaultStatuses(organization.id);
    await createDefaultCollectionTypes(organization.id);

    // 4. Create your admin user (you'll add via Google OAuth)
    const adminRole = await prisma.role.findFirst({
      where: { name: "Admin", organizationId: organization.id },
    });

    if (adminRole) {
      // Pre-create admin user from environment variables (fallback to defaults for local dev)
      const adminEmail = env.SEED_ADMIN_EMAIL ?? "email9@example.com";
      const adminName = env.SEED_ADMIN_NAME ?? "Tim Froehlich";

      const adminUser = await prisma.user.upsert({
        where: { email: adminEmail },
        update: {},
        create: {
          email: adminEmail,
          name: adminName,
          profilePicture: getRandomDefaultAvatar(),
        },
      });

      await prisma.membership.upsert({
        where: {
          userId_organizationId: {
            userId: adminUser.id,
            organizationId: organization.id,
          },
        },
        update: {},
        create: {
          roleId: adminRole.id,
          userId: adminUser.id,
          organizationId: organization.id,
        },
      });

      console.log(`✓ Created admin user: ${adminUser.email}`);
    }

    // 5. Create main location
    const mainLocation = await prisma.location.create({
      data: {
        name: "Main Location",
        organizationId: organization.id,
      },
    });
    console.log(`✓ Created location: ${mainLocation.name}`);

    console.log("\n✅ Beta seed completed successfully!");
    console.log("\n📝 Next steps:");
    console.log("1. Deploy to Vercel");
    console.log("2. Log in with Google (email9@example.com)");
    console.log("3. You'll automatically be an admin");
    console.log("4. Add machines and invite beta testers");
  } catch (error) {
    console.error("❌ Seed failed:", error);
    throw error;
  }
}

void main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(() => {
    void prisma.$disconnect();
  });
