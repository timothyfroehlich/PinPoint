import { StatusCategory } from "@prisma/client";

import { createPrismaClient } from "../src/server/db";
import { RoleService } from "../src/server/services/roleService";
import {
  ALL_PERMISSIONS,
  PERMISSION_DESCRIPTIONS,
  SYSTEM_ROLES,
} from "../src/server/auth/permissions.constants";
import { env } from "../src/env";

const prisma = createPrismaClient();

// Helper function to get random default avatar
function getRandomDefaultAvatar(): string {
  const avatarNumber = Math.floor(Math.random() * 10) + 1;
  return `/images/default-avatars/default-avatar-${avatarNumber.toString()}.webp`;
}

// Create global permissions using the constants
async function createGlobalPermissions() {
  for (const permName of ALL_PERMISSIONS) {
    await prisma.permission.upsert({
      where: { name: permName },
      update: {},
      create: {
        name: permName,
        description:
          PERMISSION_DESCRIPTIONS[permName] ?? `Permission: ${permName}`,
      },
    });
  }

  console.log(
    `[PROD] Created ${ALL_PERMISSIONS.length.toString()} global permissions`,
  );
}

// Create default collection types for an organization
async function createDefaultCollectionTypes(organizationId: string) {
  const defaultCollectionTypes = [
    {
      name: "Rooms",
      displayName: "Rooms",
      isAutoGenerated: false,
      isEnabled: true,
      sortOrder: 1,
    },
    {
      name: "Manufacturer",
      displayName: "Manufacturer",
      isAutoGenerated: true,
      sourceField: "manufacturer",
      isEnabled: false,
      sortOrder: 2,
    },
    {
      name: "Era",
      displayName: "Era",
      isAutoGenerated: true,
      sourceField: "year",
      isEnabled: false,
      sortOrder: 3,
    },
  ];

  for (const typeData of defaultCollectionTypes) {
    await prisma.collectionType.upsert({
      where: {
        name_organizationId: {
          name: typeData.name,
          organizationId,
        },
      },
      update: typeData,
      create: {
        ...typeData,
        organizationId,
      },
    });
    console.log(`[PROD] Created/Updated collection type: ${typeData.name}`);
  }
}

// Create organization with automatic default roles using RoleService
async function createOrganizationWithRoles(orgData: {
  name: string;
  subdomain: string;
  logoUrl?: string;
}) {
  const organization = await prisma.organization.upsert({
    where: { subdomain: orgData.subdomain },
    update: orgData,
    create: orgData,
  });

  const roleService = new RoleService(prisma, organization.id);

  // Create system roles (Admin and Unauthenticated)
  await roleService.createSystemRoles();
  console.log(
    `[PROD] Created system roles for organization: ${organization.name}`,
  );

  // Create default Member role from template
  await roleService.createTemplateRole("MEMBER");
  console.log(
    `[PROD] Created Member role template for organization: ${organization.name}`,
  );

  return organization;
}

// Create default priorities for organization
async function createDefaultPriorities(organizationId: string) {
  const priorities = [
    { name: "Low", order: 1 },
    { name: "Medium", order: 2 },
    { name: "High", order: 3 },
    { name: "Critical", order: 4 },
  ];

  for (const priorityData of priorities) {
    await prisma.priority.upsert({
      where: {
        name_organizationId: {
          name: priorityData.name,
          organizationId: organizationId,
        },
      },
      update: {},
      create: {
        ...priorityData,
        organizationId: organizationId,
        isDefault: true,
      },
    });
  }

  console.log(
    `[PROD] Created ${priorities.length.toString()} default priorities`,
  );
}

// Production users - admin from environment variables
const adminEmail = env.SEED_ADMIN_EMAIL;
const adminName = env.SEED_ADMIN_NAME;

if (!adminEmail || !adminName) {
  throw new Error("SEED_ADMIN_EMAIL and SEED_ADMIN_NAME environment variables are required for production seeding");
}

const PRODUCTION_USERS = [
  {
    name: adminName,
    email: adminEmail,
    bio: "Project owner.",
    role: "admin",
  },
];

async function main() {
  console.log("[PROD] 🏭 Seeding production database...");

  // 1. Create global permissions first
  await createGlobalPermissions();

  // 2. Create production organization
  const organization = await createOrganizationWithRoles({
    name: "Austin Pinball Collective",
    subdomain: "apc",
    logoUrl: "/images/logos/austinpinballcollective-logo-outline.png",
  });
  console.log(`[PROD] Created organization: ${organization.name}`);

  // 3. Create default priorities for organization
  await createDefaultPriorities(organization.id);

  // 4. Create default collection types for organization
  await createDefaultCollectionTypes(organization.id);

  // 5. Get the created roles for membership assignment
  const adminRole = await prisma.role.findFirst({
    where: { name: SYSTEM_ROLES.ADMIN, organizationId: organization.id },
  });
  const memberRole = await prisma.role.findFirst({
    where: { name: "Member", organizationId: organization.id },
  });

  if (!adminRole || !memberRole) {
    throw new Error("Default roles not found after creation");
  }

  // 6. Create production users (minimal set)
  const createdUsers = [];
  for (const userData of PRODUCTION_USERS) {
    const roleId = userData.role === "admin" ? adminRole.id : memberRole.id;

    const user = await prisma.user.upsert({
      where: { email: userData.email },
      update: {},
      create: {
        name: userData.name,
        email: userData.email,
        bio: userData.bio,
        profilePicture: getRandomDefaultAvatar(),
      },
    });
    console.log(`[PROD] Created production user: ${user.name ?? "Unknown"}`);
    createdUsers.push({ ...user, roleId });
  }

  // 7. Create role-based memberships for all users
  for (const userData of createdUsers) {
    await prisma.membership.upsert({
      where: {
        userId_organizationId: {
          userId: userData.id,
          organizationId: organization.id,
        },
      },
      update: {},
      create: {
        userId: userData.id,
        organizationId: organization.id,
        roleId: userData.roleId,
      },
    });
    console.log(`[PROD] Created membership for: ${userData.name ?? "Unknown"}`);
  }

  // 8. Create the Austin Pinball Collective location
  let austinPinballLocation = await prisma.location.findFirst({
    where: {
      name: "Austin Pinball Collective",
      organizationId: organization.id,
    },
  });

  austinPinballLocation ??= await prisma.location.create({
    data: {
      name: "Austin Pinball Collective",
      organizationId: organization.id,
    },
  });
  console.log(`[PROD] Created/Updated location: ${austinPinballLocation.name}`);

  // 9. Create OPDB models (global games)
  const additionalOPDBGames = [
    {
      opdb_id: "G43W4-MrRpw",
      name: "AC/DC (Premium)",
      manufacturer: "Stern",
      year: 2012,
    },
    {
      opdb_id: "G5K2X-N8vQs",
      name: "Medieval Madness",
      manufacturer: "Williams",
      year: 1997,
    },
    {
      opdb_id: "G7R9P-L3mYt",
      name: "The Addams Family",
      manufacturer: "Bally",
      year: 1992,
    },
  ];

  for (const game of additionalOPDBGames) {
    await prisma.model.upsert({
      where: { opdbId: game.opdb_id },
      update: {
        name: game.name,
        manufacturer: game.manufacturer,
        year: game.year,
      },
      create: {
        name: game.name,
        opdbId: game.opdb_id,
        manufacturer: game.manufacturer,
        year: game.year,
        isCustom: false,
        // Do NOT set organizationId for OPDB models (global)
      },
    });
    console.log(`[PROD] Created/Updated OPDB model: ${game.name}`);
  }

  // 10. Create issue statuses
  const statusesToUpsert = [
    { name: "New", category: StatusCategory.NEW },
    { name: "In Progress", category: StatusCategory.IN_PROGRESS },
    { name: "Needs expert help", category: StatusCategory.IN_PROGRESS },
    { name: "Needs Parts", category: StatusCategory.IN_PROGRESS },
    { name: "Fixed", category: StatusCategory.RESOLVED },
    { name: "Not to be Fixed", category: StatusCategory.RESOLVED },
    { name: "Not Reproducible", category: StatusCategory.RESOLVED },
  ];

  for (const statusData of statusesToUpsert) {
    await prisma.issueStatus.upsert({
      where: {
        name_organizationId: {
          name: statusData.name,
          organizationId: organization.id,
        },
      },
      update: {
        category: statusData.category,
      },
      create: {
        name: statusData.name,
        category: statusData.category,
        organizationId: organization.id,
        isDefault: true,
      },
    });
    console.log(`[PROD] Upserted issue status: ${statusData.name}`);
  }

  console.log("✅ [PROD] Production database seeding completed!");
  console.log("");
  console.log("🏭 Production Environment Ready");
  console.log("   → Organization: apc (Austin Pinball Collective)");
  console.log("   → Basic structure created");
  console.log("   → No test accounts created");
}

main()
  .catch((e: unknown) => {
    console.error(e);
    process.exit(1);
  })
  .finally(() => {
    void prisma.$disconnect();
  });
