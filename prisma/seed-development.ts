import { createPrismaClient } from "../src/server/db";
import { RoleService } from "../src/server/services/roleService";
import {
  ALL_PERMISSIONS,
  PERMISSION_DESCRIPTIONS,
  SYSTEM_ROLES,
} from "../src/server/auth/permissions.constants";

const prisma = createPrismaClient();

// Helper function to get random default avatar
function getRandomDefaultAvatar(): string {
  const avatarNumber = Math.floor(Math.random() * 10) + 1;
  return `/images/default-avatars/default-avatar-${avatarNumber.toString()}.webp`;
}

// Development test users - clearly marked as test accounts
const DEVELOPMENT_TEST_USERS = [
  {
    name: "Dev Admin",
    email: "admin@dev.local",
    bio: "Development admin test account.",
    role: "admin",
  },
  {
    name: "Dev Member",
    email: "member@dev.local",
    bio: "Development member test account.",
    role: "member",
  },
  {
    name: "Dev Player",
    email: "player@dev.local",
    bio: "Development player test account.",
    role: "member",
  },
  // Legacy test users for backwards compatibility
  {
    name: "Test Admin",
    email: "admin@test.com",
    bio: "Legacy development test admin account.",
    role: "admin",
  },
  {
    name: "Test Member",
    email: "member@test.com",
    bio: "Legacy development test member account.",
    role: "member",
  },
  {
    name: "Test Player",
    email: "player@test.com",
    bio: "Legacy development test player account.",
    role: "member",
  },
  // Original comprehensive test users from main branch
  {
    name: "Roger Sharpe",
    email: "roger.sharpe@pinpoint.dev",
    bio: "Pinball ambassador and historian.",
    role: "admin",
  },
  {
    name: "Gary Stern",
    email: "gary.stern@pinpoint.dev",
    bio: "Founder of Stern Pinball.",
    role: "member",
  },
  {
    name: "Escher Lefkoff",
    email: "escher.lefkoff@pinpoint.dev",
    bio: "World champion competitive pinball player.",
    role: "member",
  },
  {
    name: "Harry Williams",
    email: "harry.williams@pinpoint.dev",
    bio: "The father of pinball.",
    role: "member",
  },
];

// Create global permissions using the constants
async function createGlobalPermissions() {
  for (const permName of ALL_PERMISSIONS) {
    await prisma.permission.upsert({
      where: { name: permName },
      update: {},
      create: {
        name: permName,
        description:
          PERMISSION_DESCRIPTIONS[permName] ?? `Permission: ${permName}`,
      },
    });
  }

  console.log(
    `[DEV] Created ${ALL_PERMISSIONS.length.toString()} global permissions`,
  );
}

// Create default collection types for an organization
async function createDefaultCollectionTypes(organizationId: string) {
  const defaultCollectionTypes = [
    {
      name: "Rooms",
      displayName: "Rooms",
      isAutoGenerated: false,
      isEnabled: true,
      sortOrder: 1,
    },
    {
      name: "Manufacturer",
      displayName: "Manufacturer",
      isAutoGenerated: true,
      sourceField: "manufacturer",
      isEnabled: false,
      sortOrder: 2,
    },
    {
      name: "Era",
      displayName: "Era",
      isAutoGenerated: true,
      sourceField: "year",
      isEnabled: false,
      sortOrder: 3,
    },
  ];

  for (const typeData of defaultCollectionTypes) {
    await prisma.collectionType.upsert({
      where: {
        name_organizationId: {
          name: typeData.name,
          organizationId,
        },
      },
      update: typeData,
      create: {
        ...typeData,
        organizationId,
      },
    });
    console.log(`[DEV] Created/Updated collection type: ${typeData.name}`);
  }
}

// Create organization with automatic default roles using RoleService
async function createOrganizationWithRoles(orgData: {
  name: string;
  subdomain: string;
  logoUrl?: string;
}) {
  const organization = await prisma.organization.upsert({
    where: { subdomain: orgData.subdomain },
    update: orgData,
    create: orgData,
  });

  const roleService = new RoleService(prisma, organization.id);

  // Create system roles (Admin and Unauthenticated)
  await roleService.createSystemRoles();
  console.log(
    `[DEV] Created system roles for organization: ${organization.name}`,
  );

  // Create default Member role from template
  await roleService.createTemplateRole("MEMBER");
  console.log(
    `[DEV] Created Member role template for organization: ${organization.name}`,
  );

  return organization;
}

// Create default priorities for organization
async function createDefaultPriorities(organizationId: string) {
  const priorities = [
    { name: "Low", order: 1 },
    { name: "Medium", order: 2 },
    { name: "High", order: 3 },
    { name: "Critical", order: 4 },
  ];

  for (const priorityData of priorities) {
    await prisma.priority.upsert({
      where: {
        name_organizationId: {
          name: priorityData.name,
          organizationId: organizationId,
        },
      },
      update: {},
      create: {
        ...priorityData,
        organizationId: organizationId,
        isDefault: true,
      },
    });
  }

  console.log(
    `[DEV] Created ${priorities.length.toString()} default priorities`,
  );
}

async function main() {
  console.log("[DEV] 🧪 Seeding development database...");

  // 1. Create global permissions first
  await createGlobalPermissions();

  // 2. Create test organization
  const organization = await createOrganizationWithRoles({
    name: "Austin Pinball Collective",
    subdomain: "apc",
    logoUrl: "/images/logos/austinpinballcollective-logo-outline.png",
  });
  console.log(`[DEV] Created organization: ${organization.name}`);

  // 3. Create default priorities for organization
  await createDefaultPriorities(organization.id);

  // 4. Create default collection types for organization
  await createDefaultCollectionTypes(organization.id);

  // 5. Get the created roles for membership assignment
  const adminRole = await prisma.role.findFirst({
    where: { name: SYSTEM_ROLES.ADMIN, organizationId: organization.id },
  });
  const memberRole = await prisma.role.findFirst({
    where: { name: "Member", organizationId: organization.id },
  });

  if (!adminRole || !memberRole) {
    throw new Error("Default roles not found after creation");
  }

  // 6. Create development test users
  const createdUsers = [];
  for (const userData of DEVELOPMENT_TEST_USERS) {
    const roleId = userData.role === "admin" ? adminRole.id : memberRole.id;

    const user = await prisma.user.upsert({
      where: { email: userData.email },
      update: {},
      create: {
        name: userData.name,
        email: userData.email,
        bio: userData.bio,
        profilePicture: getRandomDefaultAvatar(),
      },
    });
    console.log(`[DEV] Created test user: ${user.name ?? "Unknown"}`);
    createdUsers.push({ ...user, roleId });
  }

  // 7. Create role-based memberships for all users
  for (const userData of createdUsers) {
    await prisma.membership.upsert({
      where: {
        userId_organizationId: {
          userId: userData.id,
          organizationId: organization.id,
        },
      },
      update: {},
      create: {
        userId: userData.id,
        organizationId: organization.id,
        roleId: userData.roleId,
      },
    });
    console.log(`[DEV] Created membership for: ${userData.name ?? "Unknown"}`);
  }

  // 8. Create the Austin Pinball Collective location
  let austinPinballLocation = await prisma.location.findFirst({
    where: {
      organizationId: organization.id,
      name: "Austin Pinball Collective",
    },
  });

  austinPinballLocation ??= await prisma.location.create({
    data: {
      name: "Austin Pinball Collective",
      organizationId: organization.id,
    },
  });
  console.log(`[DEV] Created/Updated location: ${austinPinballLocation.name}`);

  // 9. Create models from comprehensive OPDB game data
  const comprehensiveOPDBGames = [
    { opdb_id: "G43W4-MrRpw", name: "AC/DC (Premium)", manufacturer: "Stern", year: 2012 },
    { opdb_id: "GBLLd-MdEON-A94po", name: "Ultraman: Kaiju Rumble (Blood Sucker Edition)", manufacturer: "Stern", year: 2023 },
    { opdb_id: "G42Pk-MZe2e", name: "Xenon", manufacturer: "Bally", year: 1980 },
    { opdb_id: "GrknN-MQrdv", name: "Cleopatra", manufacturer: "Gottlieb", year: 1977 },
    // Add more games as needed from the sample-issues.json
  ];

  const createdModels = [];
  for (const game of comprehensiveOPDBGames) {
    const model = await prisma.model.upsert({
      where: { opdbId: game.opdb_id },
      update: {
        name: game.name,
        manufacturer: game.manufacturer,
        year: game.year,
      },
      create: {
        name: game.name,
        opdbId: game.opdb_id,
        manufacturer: game.manufacturer,
        year: game.year || null,
        isCustom: false,
        // Do NOT set organizationId for OPDB models (global)
      },
    });
    console.log(`[DEV] Created/Updated OPDB model: ${model.name}`);
    createdModels.push(model);
  }

  // 10. Create machines (instances) in the location
  for (let i = 0; i < createdModels.length; i++) {
    const model = createdModels[i];
    if (!model) continue;

    const owner = createdUsers[i % createdUsers.length]; // Rotate through users
    if (!owner) continue;

    const existingMachine = await prisma.machine.findFirst({
      where: {
        organizationId: organization.id,
        locationId: austinPinballLocation.id,
        modelId: model.id,
      },
    });

    if (!existingMachine) {
      await prisma.machine.create({
        data: {
          name: `${model.name} #${i + 1}`,
          organizationId: organization.id,
          locationId: austinPinballLocation.id,
          modelId: model.id,
          ownerId: owner.id,
          qrCodeId: `qr-${model.name.toLowerCase().replace(/\s+/g, '-')}-${i + 1}`,
        },
      });
      console.log(`[DEV] Created machine: ${model.name} #${i + 1}`);
    }
  }

  // 11. Create issue statuses
  const statusesToUpsert = [
    { name: "New", category: "OPEN" as const },
    { name: "In Progress", category: "OPEN" as const },
    { name: "Needs expert help", category: "OPEN" as const },
    { name: "Needs Parts", category: "OPEN" as const },
    { name: "Fixed", category: "RESOLVED" as const },
    { name: "Not to be Fixed", category: "RESOLVED" as const },
    { name: "Not Reproducible", category: "RESOLVED" as const },
  ];

  for (const statusData of statusesToUpsert) {
    await prisma.issueStatus.upsert({
      where: {
        name_organizationId: {
          name: statusData.name,
          organizationId: organization.id,
        },
      },
      update: { category: statusData.category },
      create: {
        name: statusData.name,
        category: statusData.category,
        organizationId: organization.id,
        isDefault: true,
      },
    });
    console.log(`[DEV] Upserted issue status: ${statusData.name}`);
  }

  // 12. Load sample issues from JSON file
  const defaultPriority = await prisma.priority.findFirst({
    where: { name: "Medium", organizationId: organization.id },
  });

  if (!defaultPriority) {
    throw new Error("Default priority not found");
  }

  const sampleIssuesData = await import("./seeds/sample-issues.json");
  const sampleIssues = sampleIssuesData.default;

  // Create the issues with updated schema
  for (const issueData of sampleIssues) {
    // Find the machine by OPDB ID
    const machine = await prisma.machine.findFirst({
      where: {
        model: { opdbId: issueData.gameOpdbId },
        organizationId: organization.id,
      },
    });

    if (machine) {
      // Find the creator
      const creator = createdUsers.find((u) => u.email === issueData.reporterEmail);
      
      // Find the status
      const status = await prisma.issueStatus.findFirst({
        where: {
          name: issueData.status,
          organizationId: organization.id,
        },
      });

      if (creator && status) {
        await prisma.issue.create({
          data: {
            title: issueData.title,
            description: issueData.description,
            consistency: issueData.consistency,
            createdById: creator.id,
            machineId: machine.id,
            statusId: status.id,
            priorityId: defaultPriority.id,
            organizationId: organization.id,
            createdAt: new Date(issueData.createdAt),
            updatedAt: new Date(issueData.updatedAt),
          },
        });
        console.log(`[DEV] Created issue: ${issueData.title}`);
      }
    }
  }

  console.log("✅ [DEV] Development database seeding completed!");
  console.log("");
  console.log("🔑 Test Account Credentials:");
  console.log("  Admin: admin@dev.local or admin@test.com");
  console.log("  Member: member@dev.local or member@test.com");
  console.log("  Player: player@dev.local or player@test.com");
  console.log("");
  console.log("🌐 Organization: apc (Austin Pinball Collective)");
  console.log(`📍 Location: ${austinPinballLocation.name}`);
  console.log(`🎮 Games: ${createdModels.length} OPDB models with machines`);
  console.log(`🔧 Issues: ${sampleIssues.length} sample issues loaded`);
}

main()
  .catch((e: unknown) => {
    console.error(e);
    process.exit(1);
  })
  .finally(() => {
    void prisma.$disconnect();
  });
