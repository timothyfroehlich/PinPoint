// Temporary type definitions for service layer
// These will be replaced by generated Prisma types once client generation is working

// Mock Prisma Client types - using proper typing instead of any
export interface ExtendedPrismaClient {
  collection: {
    findMany: (args?: Record<string, unknown>) => Promise<Collection[]>;
    findUnique: (args: { where: { id: string } }) => Promise<Collection | null>;
    findFirst: (args: Record<string, unknown>) => Promise<Collection | null>;
    create: (args: { data: Partial<Collection> }) => Promise<Collection>;
    update: (args: { where: { id: string }; data: Partial<Collection> }) => Promise<Collection>;
    deleteMany: (args: Record<string, unknown>) => Promise<{ count: number }>;
  };
  collectionType: {
    findMany: (args?: Record<string, unknown>) => Promise<CollectionType[]>;
    findUnique: (args: { where: { id: string } }) => Promise<CollectionType | null>;
    update: (args: { where: { id: string }; data: Partial<CollectionType> }) => Promise<CollectionType>;
  };
  machine: {
    findMany: (args?: Record<string, unknown>) => Promise<Machine[]>;
    findUnique: (args: { where: { id: string } }) => Promise<Machine | null>;
    create: (args: { data: Partial<Machine> }) => Promise<Machine>;
    update: (args: { where: { id: string }; data: Partial<Machine> }) => Promise<Machine>;
    delete: (args: { where: { id: string } }) => Promise<Machine>;
    count: (args?: Record<string, unknown>) => Promise<number>;
  };
  notification: {
    create: (args: { data: Partial<Notification> }) => Promise<Notification>;
    findMany: (args?: Record<string, unknown>) => Promise<Notification[]>;
    updateMany: (args: Record<string, unknown>) => Promise<{ count: number }>;
    count: (args?: Record<string, unknown>) => Promise<number>;
  };
  comment: {
    findMany: (args?: Record<string, unknown>) => Promise<Comment[]>;
    deleteMany: (args: Record<string, unknown>) => Promise<{ count: number }>;
    count: (args?: Record<string, unknown>) => Promise<number>;
    update: (args: { where: { id: string }; data: Partial<Comment> }) => Promise<Comment>;
  };
  issueHistory: {
    create: (args: { data: Record<string, unknown> }) => Promise<Record<string, unknown>>;
    findMany: (args?: Record<string, unknown>) => Promise<Record<string, unknown>[]>;
  };
  issue: {
    findUnique: (args: { where: { id: string } }) => Promise<Record<string, unknown> | null>;
    count: (args?: Record<string, unknown>) => Promise<number>;
  };
  pinballMapConfig: {
    findUnique: (args: { where: { organizationId: string } }) => Promise<Record<string, unknown> | null>;
    upsert: (args: Record<string, unknown>) => Promise<Record<string, unknown>>;
  };
  location: {
    findUnique: (args: { where: { id: string } }) => Promise<Record<string, unknown> | null>;
    findMany: (args?: Record<string, unknown>) => Promise<Record<string, unknown>[]>;
    update: (args: { where: { id: string }; data: Record<string, unknown> }) => Promise<Record<string, unknown>>;
  };
  model: {
    findUnique: (args: { where: { id: string } }) => Promise<Record<string, unknown> | null>;
    create: (args: { data: Record<string, unknown> }) => Promise<Record<string, unknown>>;
  };
  $accelerate: {
    invalidate: () => void;
    ttl: () => void;
  };
}

export interface Collection {
  id: string;
  name: string;
  typeId: string;
  locationId: string | null;
  description: string | null;
  isManual: boolean;
  isSmart: boolean;
  organizationId: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface CollectionType {
  id: string;
  name: string;
  displayName: string | null;
  organizationId: string;
  isAutoGenerated: boolean;
  isEnabled: boolean;
  sourceField: string | null;
  sortOrder: number;
  createdAt: Date;
  updatedAt: Date;
}

export interface User {
  id: string;
  name: string | null;
  email: string;
  profilePicture: string | null;
  createdAt: Date;
  updatedAt: Date;
}

export interface IssueStatus {
  id: string;
  name: string;
  organizationId: string;
  isResolved: boolean;
  sortOrder: number;
  createdAt: Date;
  updatedAt: Date;
}

export interface Notification {
  id: string;
  userId: string;
  type: NotificationType;
  message: string;
  entityType: NotificationEntity | null;
  entityId: string | null;
  actionUrl: string | null;
  read: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export interface Comment {
  id: string;
  content: string;
  issueId: string;
  authorId: string;
  createdAt: Date;
  updatedAt: Date;
  deletedAt: Date | null;
  deletedBy: string | null;
}

export interface Machine {
  id: string;
  name: string;
  organizationId: string;
  locationId: string;
  modelId: string;
  ownerId: string | null;
  qrCodeId: string;
  qrCodeUrl: string | null;
  qrCodeGeneratedAt: Date | null;
  ownerNotificationsEnabled: boolean;
  notifyOnNewIssues: boolean;
  notifyOnStatusChanges: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export enum NotificationType {
  ISSUE_CREATED = "ISSUE_CREATED",
  ISSUE_UPDATED = "ISSUE_UPDATED",
  ISSUE_ASSIGNED = "ISSUE_ASSIGNED",
  COMMENT_ADDED = "COMMENT_ADDED",
  STATUS_CHANGED = "STATUS_CHANGED"
}

export enum NotificationEntity {
  ISSUE = "ISSUE",
  COMMENT = "COMMENT",
  MACHINE = "MACHINE"
}

export enum ActivityType {
  CREATED = "CREATED",
  STATUS_CHANGED = "STATUS_CHANGED",
  ASSIGNED = "ASSIGNED",
  COMMENT_DELETED = "COMMENT_DELETED",
  SYSTEM = "SYSTEM"
}

// Prisma utility types
export namespace Prisma {
  export type CollectionGetPayload<T> = Collection & {
    type: CollectionType;
    _count: { machines: number };
    isManual: boolean;
  };

  export interface MachineGetPayload<T> {
    model: { manufacturer: string | null };
  }

  export type CollectionTypeGetPayload<T> = CollectionType & {
    _count: { collections: number };
  };
}