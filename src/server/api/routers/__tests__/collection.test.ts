import { beforeEach, describe, expect, it, jest } from "@jest/globals";

import type { PrismaClient } from "@prisma/client";

import { CollectionService } from "~/server/services/collectionService";

// Simple integration test focusing on service integration with router input validation
describe("Collection Router Integration", () => {
  let service: CollectionService;
  let mockPrisma: jest.Mocked<PrismaClient>;

  beforeEach(() => {
    mockPrisma = {
      collectionType: {
        findMany: jest.fn(),
        update: jest.fn(),
      },
      collection: {
        findMany: jest.fn(),
        findFirst: jest.fn(),
        create: jest.fn(),
        update: jest.fn(),
      },
      machine: {
        findMany: jest.fn(),
      },
    } as jest.Mocked<PrismaClient>;

    service = new CollectionService(mockPrisma);
    jest.clearAllMocks();
  });

  describe("Input validation and service integration", () => {
    it("should handle getLocationCollections input validation", async () => {
      const mockTypes = [
        {
          id: "type1",
          name: "Rooms",
          displayName: "Rooms",
          isEnabled: true,
          sortOrder: 1,
        },
      ];

      const mockCollections = [
        {
          id: "coll1",
          name: "Front Room",
          isManual: true,
          type: mockTypes[0]!,
          _count: { machines: 5 },
        },
      ];

      (mockPrisma.collectionType.findMany as jest.Mock).mockResolvedValue(
        mockTypes,
      );
      (mockPrisma.collection.findMany as jest.Mock).mockResolvedValue(
        mockCollections,
      );

      const result = await service.getLocationCollections(
        "valid-loc-id",
        "valid-org-id",
      );

      expect(result).toHaveProperty("manual");
      expect(result).toHaveProperty("auto");
      expect(mockPrisma.collectionType.findMany).toHaveBeenCalledWith({
        where: {
          organizationId: "valid-org-id",
          isEnabled: true,
        },
        orderBy: {
          sortOrder: "asc",
        },
      });
    });

    it("should handle createManualCollection input validation", async () => {
      const mockCollection = {
        id: "coll1",
        name: "Test Collection",
        typeId: "type1",
        locationId: "loc1",
        isManual: true,
      };

      (mockPrisma.collection.create as jest.Mock).mockResolvedValue(
        mockCollection,
      );

      const result = await service.createManualCollection("org1", {
        name: "Test Collection",
        typeId: "type1",
        locationId: "loc1",
        description: "Test description",
        isManual: true,
      });

      expect(result).toEqual(mockCollection);
      expect(mockPrisma.collection.create).toHaveBeenCalledWith({
        data: {
          name: "Test Collection",
          typeId: "type1",
          locationId: "loc1",
          description: "Test description",
          isManual: true,
          isSmart: false,
        },
      });
    });

    it("should handle toggleCollectionType operations", async () => {
      (mockPrisma.collectionType.update as jest.Mock).mockResolvedValue({});

      await service.toggleCollectionType("type1", false);

      expect(mockPrisma.collectionType.update).toHaveBeenCalledWith({
        where: { id: "type1" },
        data: { isEnabled: false },
      });
    });

    it("should validate organization collection types query", async () => {
      const mockTypes = [
        {
          id: "type1",
          name: "Rooms",
          displayName: "Rooms",
          isAutoGenerated: false,
          isEnabled: true,
          _count: { collections: 3 },
        },
      ];

      (mockPrisma.collectionType.findMany as jest.Mock).mockResolvedValue(
        mockTypes,
      );

      const result = await service.getOrganizationCollectionTypes("org1");

      expect(result).toEqual([
        {
          id: "type1",
          name: "Rooms",
          displayName: "Rooms",
          isAutoGenerated: false,
          isEnabled: true,
          collectionCount: 3,
        },
      ]);
    });
  });
});
