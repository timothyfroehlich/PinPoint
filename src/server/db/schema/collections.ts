import {
  pgTable,
  text,
  timestamp,
  boolean,
  integer,
  pgEnum,
  json,
} from "drizzle-orm/pg-core";

// =================================
// ENUMS
// =================================

export const notificationTypeEnum = pgEnum("NotificationType", [
  "ISSUE_CREATED", // New issue on owned machine
  "ISSUE_UPDATED", // Issue status changed
  "ISSUE_ASSIGNED", // Issue assigned to user
  "ISSUE_COMMENTED", // New comment on issue
  "MACHINE_ASSIGNED", // Machine ownership assigned
  "SYSTEM_ANNOUNCEMENT", // System-wide announcements
]);

export const notificationEntityEnum = pgEnum("NotificationEntity", [
  "ISSUE",
  "MACHINE",
  "COMMENT",
  "ORGANIZATION",
]);

// =================================
// COLLECTION & NOTIFICATION TABLES
// =================================

export const collections = pgTable("Collection", {
  id: text("id").primaryKey(),
  name: text("name").notNull(), // e.g., "Front Room", "Bally", "1980s"
  typeId: text("typeId").notNull(),
  locationId: text("locationId"), // null for auto-collections (organization-wide)
  isSmart: boolean("isSmart").default(false).notNull(), // For 1.x Smart Collections
  isManual: boolean("isManual").default(true).notNull(), // Manual vs auto-generated

  // Manual collection fields
  description: text("description"), // Optional description
  sortOrder: integer("sortOrder").default(0).notNull(), // For custom ordering

  // Auto-collection fields
  filterCriteria: json("filterCriteria"), // Criteria for auto-collections: { "manufacturer": "Bally" }
});

// Note: Skipping locationId index since it's nullable and causing Drizzle issues
// Will be addressed in future optimization phase

export const collectionTypes = pgTable("CollectionType", {
  id: text("id").primaryKey(),
  name: text("name").notNull(), // e.g., "Rooms", "Manufacturer", "Era", "Genre"
  organizationId: text("organizationId").notNull(),
  isAutoGenerated: boolean("isAutoGenerated").default(false).notNull(), // Auto vs manual collection type
  isEnabled: boolean("isEnabled").default(true).notNull(), // Can be disabled in org settings

  // Auto-generation settings
  sourceField: text("sourceField"), // Field to generate from: "manufacturer", "year", etc.
  generationRules: json("generationRules"), // Rules for auto-generation

  // Display settings
  displayName: text("displayName"), // Human-readable name for UI
  description: text("description"), // Description for admin interface
  sortOrder: integer("sortOrder").default(0).notNull(), // Order on location pages
});

export const notifications = pgTable("Notification", {
  id: text("id").primaryKey(),
  message: text("message").notNull(),
  read: boolean("read").default(false).notNull(),
  createdAt: timestamp("createdAt").defaultNow().notNull(),

  // Enhanced fields
  userId: text("userId").notNull(), // Who receives this notification
  type: notificationTypeEnum("type").notNull(), // Category of notification
  entityType: notificationEntityEnum("entityType"), // What kind of entity (issue, machine, etc.)
  entityId: text("entityId"), // ID of the related entity
  actionUrl: text("actionUrl"), // URL to navigate to when clicked
});

// TODO: Notification indexes temporarily disabled due to Drizzle nullable field issue
// Will be re-enabled after resolving index compatibility
// export const notificationUserReadIndex = index(
//   "Notification_userId_read_idx",
// ).on(notifications.userId, notifications.read);

// export const notificationUserCreatedAtIndex = index(
//   "Notification_userId_createdAt_idx",
// ).on(notifications.userId, notifications.createdAt);

export const pinballMapConfigs = pgTable("PinballMapConfig", {
  id: text("id").primaryKey(),
  organizationId: text("organizationId").unique().notNull(),

  // API Configuration
  apiEnabled: boolean("apiEnabled").default(false).notNull(),
  apiKey: text("apiKey"), // If PinballMap requires API key in future

  // Sync Settings
  autoSyncEnabled: boolean("autoSyncEnabled").default(false).notNull(),
  syncIntervalHours: integer("syncIntervalHours").default(24).notNull(),
  lastGlobalSync: timestamp("lastGlobalSync"),

  // Data Preferences
  createMissingModels: boolean("createMissingModels").default(true).notNull(), // Create Model records for unknown OPDB games
  updateExistingData: boolean("updateExistingData").default(false).notNull(), // Whether to update existing machine data
});

// =================================
// ADDITIONAL ESSENTIAL PERFORMANCE INDEXES
// =================================

// TODO: All collection indexes temporarily disabled due to Drizzle compatibility issues
// Will be re-enabled after resolving index field compatibility

// Multi-tenancy: organizationId filtering (most critical)
// export const collectionTypeOrgIndex = index(
//   "CollectionType_organizationId_idx",
// ).on(collectionTypes.organizationId);

// PinballMap config lookup (already has unique constraint but adding explicit index)
// export const pinballMapConfigOrgIndex = index(
//   "PinballMapConfig_organizationId_idx",
// ).on(pinballMapConfigs.organizationId);

// Collection type filtering and display ordering
// export const collectionTypeEnabledIndex = index(
//   "CollectionType_isEnabled_idx",
// ).on(collectionTypes.isEnabled);

// export const collectionTypeSortIndex = index("CollectionType_sortOrder_idx").on(
//   collectionTypes.sortOrder,
// );

// Collection filtering by type
// export const collectionTypeIndex = index("Collection_typeId_idx").on(
//   collections.typeId,
// );
