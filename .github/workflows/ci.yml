permissions:
  contents: read
  pull-requests: write
  security-events: write
name: CI

env:
  CI: true
  NODE_ENV: test

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: TypeScript Type Checking
  typecheck:
    name: TypeScript
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: TypeScript Check (Multi-config)
        id: typecheck
        run: |
          # Production code (strictest) - must pass
          echo "=== Checking Production Code (Strictest) ==="
          set +e  # Allow commands to fail temporarily
          npm run typecheck > production-typescript.log 2>&1
          TYPECHECK_EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          if [ $TYPECHECK_EXIT_CODE -ne 0 ]; then
            echo "❌ Production code has TypeScript errors!" >> "$GITHUB_STEP_SUMMARY"
            cat production-typescript.log
            grep "error TS" production-typescript.log | head -10 >> "$GITHUB_STEP_SUMMARY" || true
            exit 1
          fi

          # Check test utilities separately (warnings only)
          echo "=== Checking Test Utils (Recommended) ==="
          npx tsc --project tsconfig.test-utils.json --noEmit > test-utils-typescript.log 2>&1 || true

          # Check test files separately (warnings only)
          echo "=== Checking Test Files (Relaxed) ==="
          npx tsc --project tsconfig.tests.json --noEmit > tests-typescript.log 2>&1 || true

          echo "✅ Multi-config TypeScript check completed!" >> "$GITHUB_STEP_SUMMARY"
      - name: Upload TypeScript Error Report
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: typescript-errors
          path: typescript-output.log

  # Job 2: ESLint Linting
  lint:
    name: ESLint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      # Clean environment setup to prevent cache issues
      - name: Clean Environment Setup
        run: |
          echo "🧹 Cleaning CI environment..."
          # Remove any duplicate lockfiles that cause warnings
          find . -name "package-lock.json" -not -path "./package-lock.json" -delete || true
          # Clear npm cache to prevent stale artifacts
          npm cache clean --force || true
          echo "✅ Environment cleaned"

      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: ESLint Check
        run: npm run lint
      - name: ESLint SARIF Report
        run: npm run lint:sarif
        continue-on-error: true
        env:
          # Use test environment for SARIF generation to avoid requiring production environment variables
          NODE_ENV: test
      - name: Upload ESLint SARIF results
        uses: github/codeql-action/upload-sarif@181d5eefc20863364f96762470ba6f862bdef56b # v3
        if: always()
        with:
          sarif_file: eslint-results.sarif
          category: eslint

  # Job 3: Prettier Formatting
  format:
    name: Prettier
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: Prettier Check
        run: npm run format

  # Job 4: Tests (Parallel Shards)
  # Uses matrix strategy to run test shards in parallel
  test:
    name: Tests (${{ matrix.shard }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        shard:
          - "unit-node"
          - "unit-jsdom" 
          - "integration"
    env:
      NODE_ENV: test
      CI: true
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: Run Tests (${{ matrix.shard }}) with Coverage
        run: |
          # Temporary simplified test setup - using unified config until projects are working
          case "${{ matrix.shard }}" in
            "unit-node")
              npx vitest run --coverage --coverage.thresholds=false
              ;;
            "unit-jsdom")
              # For now, run the same tests since we have unified config
              npx vitest run --coverage --coverage.thresholds=false
              ;;
            "integration")
              # For now, run the same tests since we have unified config
              npx vitest run --coverage --coverage.thresholds=false
              ;;
          esac
      - name: Upload Coverage (${{ matrix.shard }})
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5
        with:
          files: ./coverage/lcov.info
          flags: ${{ matrix.shard }}
          name: codecov-${{ matrix.shard }}
          fail_ci_if_error: true

  # Job 5: RLS Policy Tests
  # Database-level security validation with pgTAP
  rls-tests:
    name: RLS Validation
    runs-on: ubuntu-latest
    permissions:
      contents: read
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
      NODE_ENV: test
      CI: true
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: Install pg_prove and setup database for RLS testing
        run: |
          # Add PostgreSQL 17 repository
          sudo apt-get update
          sudo apt-get install -y wget ca-certificates
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
          sudo apt-get update
          
          # Install PostgreSQL client tools and pg_prove
          sudo apt-get install -y postgresql-client-17 libtap-parser-sourcehandler-pgtap-perl
          
          # Download and setup pgTAP (no need to install, just load SQL)
          wget https://github.com/theory/pgtap/archive/refs/tags/v1.3.3.tar.gz
          tar -xzf "v1.3.3.tar.gz"
          
          # Debug: Check what files are actually available
          echo "Current directory contents:"
          ls -la
          echo "pgTAP directory contents:"
          ls -la pgtap-1.3.3/ || echo "pgtap-1.3.3/ not found"
          echo "Looking for SQL file:"
          find . -name "pgtap.sql" -type f
          
          # Setup database schema
          npm run db:push:local
          
          # Load pgTAP directly from SQL file (standard pattern)
          psql "$DATABASE_URL" -f pgtap-1.3.3/sql/pgtap.sql
          psql "$DATABASE_URL" -f supabase/tests/setup/01-test-roles.sql
      - name: Run pgTAP RLS tests
        run: |
          if [ -d "supabase/tests/rls" ] && [ -n "$(find supabase/tests/rls -name "*.test.sql" 2>/dev/null)" ]; then
            npm run test:rls
          else
            echo "⚠️ No pgTAP RLS tests found - skipping"
          fi

  # Job 6: Database Validation (Drizzle ORM)
  # Validates real database connection setup with PostgreSQL
  database-validation:
    name: Database Validation
    runs-on: ubuntu-latest
    permissions:
      contents: read
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
      DIRECT_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
      NODE_ENV: test
      CI: true
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: Setup Database Schema
        run: npm run db:push:local
      - name: Run Database CRUD Validation
        run: npm run db:validate:ci
        timeout-minutes: 5
      - name: Upload Database Validation Report
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: database-validation-report
          path: database-validation.log
          retention-days: 7

  # Job 6: Security Audit
  security:
    name: Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: Security Audit
        run: npm run deps:check

  # Job 7: End-to-End Tests (Playwright) - DISABLED during Supabase migration
  # Uncomment the section below when E2E tests are ready to be re-enabled
  #
  # e2e:
  #   name: E2E Tests (${{ matrix.test-group }})
  #   runs-on: ubuntu-latest
  #   container:
  #     image: mcr.microsoft.com/playwright:v1.54.1-jammy
  #   timeout-minutes: 15
  #   permissions:
  #     contents: read
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       test-group:
  #         - "auth-flow"
  #         - "dashboard"
  #         - "roles-permissions"
  #         - "location-browsing"
  #         - "issue-confirmation"
  #         - "unified-dashboard-flow"
  #   services:
  #     postgres:
  #       image: postgres:16
  #       env:
  #         POSTGRES_PASSWORD: test_password
  #         POSTGRES_DB: test_db
  #         POSTGRES_USER: test_user
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   env:
  #     # Override database URLs to use test PostgreSQL service
  #     DATABASE_URL: "postgresql://test_user:test_password@postgres:5432/test_db"
  #     DIRECT_URL: "postgresql://test_user:test_password@postgres:5432/test_db"
  #     NODE_ENV: "test"
  #     CI: true
  #   steps:
  #     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
  #     - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
  #       with:
  #         node-version: "24"
  #         cache: "npm"
  #     - name: Install Vercel CLI
  #       run: npm install --global vercel@latest
  #     - name: Pull Vercel Environment Variables
  #       run: vercel env pull .env.local --token=${{ secrets.VERCEL_TOKEN }}
  #       env:
  #         VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  #         VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  #     - run: npm ci
  #     - name: Set up database
  #       run: npm run db:push:local
  #     - name: Seed database with test data
  #       run: npm run seed
  #     - name: Run Playwright Tests (${{ matrix.test-group }})
  #       run: npx playwright test e2e/${{ matrix.test-group }}.spec.ts
  #     - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
  #       if: ${{ !cancelled() }}
  #       with:
  #         name: playwright-report-${{ matrix.test-group }}
  #         path: playwright-report/
  #         retention-days: 30

  # Job 8: Shell Script Linting with SARIF
  shellcheck:
    name: ShellCheck
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@94e0aab03ca135d11a35e5bfc14e6746dc56e7e9 # v2.0.0
        with:
          scandir: './scripts'
          additional_files: 'start-database.sh'
          severity: error
      - name: Generate ShellCheck SARIF
        run: |
          # Create empty results file to start
          echo "[]" > shellcheck-raw.json
          
          # Run ShellCheck on all shell scripts in scripts directory
          if find scripts -name "*.sh" -type f | head -1 | grep -q .; then
            find scripts -name "*.sh" -type f -exec shellcheck -f json {} + >> shellcheck-raw.json 2>/dev/null || true
          fi
          
          # Also check additional files from the ShellCheck action config
          if [ -f "start-database.sh" ]; then
            shellcheck -f json start-database.sh >> shellcheck-raw.json 2>/dev/null || true
          fi
          
          # Convert ShellCheck JSON output to SARIF format
          node scripts/shellcheck-to-sarif.cjs shellcheck-raw.json shellcheck-results.sarif
          
          # Clean up temporary files
          rm -f shellcheck-raw.json
        continue-on-error: true
      - name: Upload ShellCheck SARIF results
        uses: github/codeql-action/upload-sarif@181d5eefc20863364f96762470ba6f862bdef56b # v3
        if: always()
        with:
          sarif_file: shellcheck-results.sarif
          category: shellcheck

  # Job 9: Validate GitHub Actions
  validate-actions:
    name: Validate Actions
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Validate GitHub workflows
        uses: raven-actions/actionlint@3a24062651993d40fed1019b58ac6fbdfbf276cc # v2
