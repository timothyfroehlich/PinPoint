permissions:
  contents: read
  pull-requests: write
name: CI

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: TypeScript Type Checking
  typecheck:
    name: TypeScript
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    env:
      NODE_ENV: "test"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: TypeScript Check (Multi-config)
        id: typecheck
        run: |
          # Production code (strictest) - must pass
          echo "=== Checking Production Code (Strictest) ==="
          if ! npm run typecheck 2>&1 | tee production-typescript.log; then
            echo "❌ Production code has TypeScript errors!" >> "$GITHUB_STEP_SUMMARY"
            grep "error TS" production-typescript.log | head -10 >> "$GITHUB_STEP_SUMMARY" || true
            exit 1
          fi

          # Check test utilities separately (warnings only)
          echo "=== Checking Test Utils (Recommended) ==="
          npx tsc --project tsconfig.test-utils.json --noEmit 2>&1 | tee test-utils-typescript.log || true

          # Check test files separately (warnings only)
          echo "=== Checking Test Files (Relaxed) ==="
          npx tsc --project tsconfig.tests.json --noEmit 2>&1 | tee tests-typescript.log || true

          echo "✅ Multi-config TypeScript check completed!" >> "$GITHUB_STEP_SUMMARY"
      - name: Upload TypeScript Error Report
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: typescript-errors
          path: typescript-output.log

  # Job 2: ESLint Linting
  lint:
    name: ESLint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      # Clean environment setup to prevent cache issues
      - name: Clean Environment Setup
        run: |
          echo "🧹 Cleaning CI environment..."
          # Remove any duplicate lockfiles that cause warnings
          find . -name "package-lock.json" -not -path "./package-lock.json" -delete || true
          # Clear npm cache to prevent stale artifacts
          npm cache clean --force || true
          echo "✅ Environment cleaned"

      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: ESLint Check
        run: npm run lint

  # Job 3: Prettier Formatting
  format:
    name: Prettier
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: Prettier Check
        run: npm run format

  # Job 4: Tests with Coverage
  # Uses simple PostgreSQL container (Supabase local doesn't work well in CI)
  test:
    name: Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      NODE_ENV: "test"
      CI: "true"
      DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
      POSTGRES_PRISMA_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
      POSTGRES_URL_NON_POOLING: "postgresql://test_user:test_password@localhost:5432/test_db"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: Setup Database Schema
        run: npm run db:push
      - name: Run Tests with Coverage
        run: npm run test:coverage
      - name: Upload Coverage
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  # Job 5: Database Validation (Drizzle ORM)
  database-validation:
    name: Database Validation
    runs-on: ubuntu-latest
    permissions:
      contents: read
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      NODE_ENV: "test"
      CI: "true"
      DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
      POSTGRES_PRISMA_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
      POSTGRES_URL_NON_POOLING: "postgresql://test_user:test_password@localhost:5432/test_db"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: Setup Database Schema
        run: npm run db:push
      - name: Run Database CRUD Validation
        run: npm run db:validate:ci
        timeout-minutes: 5
      - name: Upload Database Validation Report
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: database-validation-report
          path: database-validation.log
          retention-days: 7

  # Job 6: Security Audit
  security:
    name: Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: Security Audit
        run: npm run deps:check

  # Job 7: End-to-End Tests (Playwright) - DISABLED during Supabase migration
  # Uncomment the section below when E2E tests are ready to be re-enabled
  #
  # e2e:
  #   name: E2E Tests (${{ matrix.test-group }})
  #   runs-on: ubuntu-latest
  #   container:
  #     image: mcr.microsoft.com/playwright:v1.54.1-jammy
  #   timeout-minutes: 15
  #   permissions:
  #     contents: read
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       test-group:
  #         - "auth-flow"
  #         - "dashboard"
  #         - "roles-permissions"
  #         - "location-browsing"
  #         - "issue-confirmation"
  #         - "unified-dashboard-flow"
  #   services:
  #     postgres:
  #       image: postgres:16
  #       env:
  #         POSTGRES_PASSWORD: test_password
  #         POSTGRES_DB: test_db
  #         POSTGRES_USER: test_user
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   env:
  #     # Override database URLs to use test PostgreSQL service
  #     POSTGRES_PRISMA_URL: "postgresql://test_user:test_password@postgres:5432/test_db"
  #     POSTGRES_URL_NON_POOLING: "postgresql://test_user:test_password@postgres:5432/test_db"
  #     NODE_ENV: "test"
  #     CI: true
  #   steps:
  #     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
  #     - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
  #       with:
  #         node-version: "24"
  #         cache: "npm"
  #     - name: Install Vercel CLI
  #       run: npm install --global vercel@latest
  #     - name: Pull Vercel Environment Variables
  #       run: vercel env pull .env.local --token=${{ secrets.VERCEL_TOKEN }}
  #       env:
  #         VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  #         VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  #     - run: npm ci
  #     - name: Set up database
  #       run: npx prisma db push --force-reset
  #     - name: Seed database with test data
  #       run: npm run seed
  #     - name: Run Playwright Tests (${{ matrix.test-group }})
  #       run: npx playwright test e2e/${{ matrix.test-group }}.spec.ts
  #     - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
  #       if: ${{ !cancelled() }}
  #       with:
  #         name: playwright-report-${{ matrix.test-group }}
  #         path: playwright-report/
  #         retention-days: 30

  # Job 8: Validate GitHub Actions
  validate-actions:
    name: Validate Actions
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Validate GitHub workflows
        uses: raven-actions/actionlint@3a24062651993d40fed1019b58ac6fbdfbf276cc # v2
