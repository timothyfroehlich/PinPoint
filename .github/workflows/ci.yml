permissions:
  contents: read
  pull-requests: write
name: CI

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: TypeScript Type Checking
  typecheck:
    name: TypeScript
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: TypeScript Check (Test errors non-blocking)
        id: typecheck
        run: |
          npm run typecheck 2>&1 | tee typescript-output.log || true

          # Count total TypeScript errors
          ERROR_COUNT=$(grep -c "error TS" typescript-output.log 2>/dev/null || echo "0")

          # Ensure ERROR_COUNT is a valid number
          if ! [[ "$ERROR_COUNT" =~ ^[0-9]+$ ]]; then
            ERROR_COUNT=0
          fi

          # Filter out test files more comprehensively (including all test-related paths)
          # First, save all errors to a temp file to avoid shell quoting issues
          grep "error TS" typescript-output.log > all-errors.tmp 2>/dev/null || touch all-errors.tmp

          # Filter out test patterns and save to production errors file
          # Note: vitest.test files are now treated as production code (blocking errors)
          grep -v -E "(\.test\.|__tests__|\.spec\.|spec\.|/test/|/tests/|src/test/|mockContext)" all-errors.tmp > production-errors.tmp 2>/dev/null || touch production-errors.tmp

          # Debug: Show what errors we're seeing
          echo "=== ALL TYPESCRIPT ERRORS ==="
          cat all-errors.tmp || echo "No TS errors found"
          echo "=== FILTERED PRODUCTION ERRORS ==="
          cat production-errors.tmp || echo "No production errors found"
          echo "=== END DEBUG ==="

          # Count production errors more reliably
          PRODUCTION_ERROR_COUNT=$(wc -l < production-errors.tmp)
          # Handle empty file case (wc -l returns 0 for empty files, but let's be explicit)
          if [ ! -s production-errors.tmp ]; then
            PRODUCTION_ERROR_COUNT=0
          fi

          # Ensure it's a valid number
          if ! [[ "$PRODUCTION_ERROR_COUNT" =~ ^[0-9]+$ ]]; then
            PRODUCTION_ERROR_COUNT=0
          fi

          # Clean up temp files
          rm -f all-errors.tmp production-errors.tmp

          # Calculate test errors
          TEST_ERROR_COUNT=$((ERROR_COUNT - PRODUCTION_ERROR_COUNT))
          if [ "$TEST_ERROR_COUNT" -lt 0 ]; then
            TEST_ERROR_COUNT=0
          fi

          {
            echo "error_count=$ERROR_COUNT"
            echo "production_error_count=$PRODUCTION_ERROR_COUNT"
            echo "test_error_count=$TEST_ERROR_COUNT"
          } >> "$GITHUB_OUTPUT"

          {
            echo "## TypeScript Check Results"
            echo "- **Production Code Errors**: $PRODUCTION_ERROR_COUNT (❌ blocking)"
            echo "- **Test File Errors**: $TEST_ERROR_COUNT (⚠️ non-blocking)"
            echo "- **Total Errors**: $ERROR_COUNT"
          } >> "$GITHUB_STEP_SUMMARY"

          if [ "$PRODUCTION_ERROR_COUNT" -gt 0 ]; then
            {
              echo "### Production Code Errors (Blocking):"
              head -10 production-errors.tmp || echo "No production errors to display"
            } >> "$GITHUB_STEP_SUMMARY"
            echo "TypeScript job: FAILED (production errors found)"
            exit 1
          elif [ "$TEST_ERROR_COUNT" -gt 0 ]; then
            {
              echo "### Test File Errors (Non-blocking):"
              # Show test errors by filtering all errors (excludes vitest.test files which are now blocking)
              grep "error TS" typescript-output.log | grep -E "(\.test\.|__tests__|\.spec\.|spec\.|/test/|/tests/|src/test/|mockContext)" | head -5 || true
              echo ""
              echo "✅ Test errors don't block CI during TypeScript migration"
              echo "📋 These will be addressed in separate cleanup tasks"
            } >> "$GITHUB_STEP_SUMMARY"
            echo "TypeScript job: SUCCESS (only test errors found)"
            exit 0
          else
            echo "✅ No TypeScript errors found!" >> "$GITHUB_STEP_SUMMARY"
            echo "TypeScript job: SUCCESS (no errors found)"
            exit 0
          fi
      - name: Upload TypeScript Error Report
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: typescript-errors
          path: typescript-output.log

  # Job 2: ESLint Linting (Split into production and test)
  lint-production:
    name: ESLint (Production)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      AUTH_SECRET: "temp_secret_value" # Temporary value for CI validation only
      DATABASE_URL: "sqlite://temp_db.sqlite" # Temporary value for CI validation only
      DEFAULT_ORG_SUBDOMAIN: ${{ secrets.DEFAULT_ORG_SUBDOMAIN }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      OPDB_API_TOKEN: ${{ secrets.OPDB_API_TOKEN }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: ESLint Check - Production Code
        run: |
          npm run lint src/ --quiet

  lint-tests:
    name: ESLint (Tests)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      AUTH_SECRET: "temp_secret_value" # Temporary value for CI validation only
      DATABASE_URL: "sqlite://temp_db.sqlite" # Temporary value for CI validation only
      DEFAULT_ORG_SUBDOMAIN: ${{ secrets.DEFAULT_ORG_SUBDOMAIN }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      OPDB_API_TOKEN: ${{ secrets.OPDB_API_TOKEN }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: ESLint Check - Test Files (Non-blocking)
        id: lint-tests
        run: |
          npm run lint src/ 2>&1 | tee eslint-test-output.log || true

          # Count warnings/errors with proper validation
          WARNING_COUNT=$(grep -c "warning\|error" eslint-test-output.log 2>/dev/null || echo "0")
          # Ensure WARNING_COUNT is a valid number
          if ! [[ "$WARNING_COUNT" =~ ^[0-9]+$ ]]; then
            WARNING_COUNT=0
          fi

          # Output to GitHub Actions with proper formatting
          echo "warning_count=${WARNING_COUNT}" >> "$GITHUB_OUTPUT"

          {
            echo "## ESLint Test Files Report"
            echo "Found $WARNING_COUNT warnings/errors in test files (non-blocking)"
            echo "✅ Test linting issues don't block CI during TypeScript migration"
          } >> "$GITHUB_STEP_SUMMARY"

          echo "ESLint Tests job: SUCCESS (test issues are non-blocking)"
          exit 0

  # Job 3: Prettier Formatting
  format:
    name: Prettier
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: Prettier Check
        run: npm run format:check

  # Job 4: Betterer Regression Check
  betterer:
    name: Betterer
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    env:
      AUTH_SECRET: "temp_secret_value" # Temporary value for CI validation only
      DATABASE_URL: "sqlite://temp_db.sqlite" # Temporary value for CI validation only
      DEFAULT_ORG_SUBDOMAIN: ${{ secrets.DEFAULT_ORG_SUBDOMAIN }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      OPDB_API_TOKEN: ${{ secrets.OPDB_API_TOKEN }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: Betterer Check
        id: betterer
        run: |
          npm run betterer:check 2>&1 | tee betterer-output.log || BETTERER_EXIT=$?
          if [ "$BETTERER_EXIT" = "2" ]; then
            echo "❌ Betterer found regressions!" >> "$GITHUB_STEP_SUMMARY"
            grep "got worse" betterer-output.log >> "$GITHUB_STEP_SUMMARY" || true
            exit 1
          elif [ "$BETTERER_EXIT" = "0" ]; then
            echo "✅ No regressions found" >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Upload Betterer Diff
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: betterer-diff
          path: |
            .betterer.results
            betterer-output.log

  # Job 5: Tests with Coverage
  test:
    name: Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      AUTH_SECRET: "temp_secret_value" # Temporary value for CI
      DATABASE_URL: "sqlite://temp_db.sqlite" # Temporary value for CI
      OPDB_API_TOKEN: "temp_opdb_token" # Temporary value for CI
      DEFAULT_ORG_SUBDOMAIN: "apc"
      NODE_ENV: "test"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: Run Tests with Coverage (Migration-aware)
        id: test-run
        run: |
          npm run test:coverage 2>&1 | tee test-output.log || true
          TEST_EXIT_CODE=${PIPESTATUS[0]}

          # Count failed vs passed tests
          FAILED_TESTS=$(grep -c "FAIL\|failing" test-output.log || echo "0")
          PASSED_TESTS=$(grep -c "PASS\|passing" test-output.log || echo "0")

          {
            echo "## Test Results"
            echo "- **Passed Tests**: $PASSED_TESTS"
            echo "- **Failed Tests**: $FAILED_TESTS"
            echo "- **Exit Code**: $TEST_EXIT_CODE"
            echo ""
            if [ "$TEST_EXIT_CODE" -eq 0 ]; then
              echo "✅ All tests passed successfully!"
            else
              echo "⚠️ Some tests failed - this is acceptable during TypeScript migration"
              echo "Failed tests are tracked but don't block CI during migration phase"
            fi
          } >> "$GITHUB_STEP_SUMMARY"

          echo "Tests job: SUCCESS (failures acceptable during TypeScript migration)"
          exit 0
      - name: Upload Coverage
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  # Job 6: Security Audit
  security:
    name: Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - run: npm ci
      - name: Security Audit
        run: npm audit --audit-level=high

  # Job 7: Validate GitHub Actions
  validate-actions:
    name: Validate Actions
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Validate GitHub workflows
        uses: raven-actions/actionlint@3a24062651993d40fed1019b58ac6fbdfbf276cc # v2

  # Job 8: Migration Progress Report (PR only)
  migration-report:
    name: Migration Progress
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [typecheck, lint-production, lint-tests, betterer]
    permissions:
      contents: read
      pull-requests: write
    env:
      AUTH_SECRET: "temp_secret_value" # Temporary value for CI validation only
      DATABASE_URL: "sqlite://temp_db.sqlite" # Temporary value for CI validation only
      DEFAULT_ORG_SUBDOMAIN: ${{ secrets.DEFAULT_ORG_SUBDOMAIN }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      OPDB_API_TOKEN: ${{ secrets.OPDB_API_TOKEN }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "24"
          cache: "npm"
      - uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3 # v5
        with:
          python-version: "3.12"
      - run: npm ci
      - name: Generate Migration Report
        run: |
          # Update stats using Python script (more reliable than bash)
          python3 scripts/update-typescript-stats.py

          # Create PR comment
          cat > migration-report.md << 'EOF'
          ## 📊 TypeScript Migration Progress Report

          EOF

          # Extract current stats and add Betterer status
          {
            grep -A 5 "### Error Counts" TYPESCRIPT_MIGRATION.md
            echo ""
            echo "### Betterer Status"
            if npm run betterer:check > /dev/null 2>&1; then
              echo "✅ No regressions detected"
            else
              echo "⚠️ Check Betterer results for details"
            fi
            echo ""
            echo "---"
            echo "📖 [Migration Guide](./TYPESCRIPT_MIGRATION.md) | 🔧 [Helper Scripts](./scripts/README.md)"
          } >> migration-report.md

      - name: Comment PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('migration-report.md', 'utf8');

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('TypeScript Migration Progress Report')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: report,
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report,
              });
            }

  # Summary job to ensure all checks pass
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs:
      [
        typecheck,
        lint-production,
        lint-tests,
        format,
        betterer,
        test,
        security,
        validate-actions,
      ]
    if: always()
    permissions:
      contents: read
    steps:
      - name: Check Results (Production code must pass, tests can fail during migration)
        run: |
          # Core production checks that must pass
          if [ "${{ needs.typecheck.result }}" != "success" ] ||
             [ "${{ needs.lint-production.result }}" != "success" ] ||
             [ "${{ needs.format.result }}" != "success" ] ||
             [ "${{ needs.betterer.result }}" != "success" ] ||
             [ "${{ needs.security.result }}" != "success" ] ||
             [ "${{ needs.validate-actions.result }}" != "success" ]; then
            echo "❌ One or more required production checks failed"
            exit 1
          fi

          # Report on test-related jobs (should now be succeeding with warnings)
          echo "## Production Code Status: ✅ PASSING"
          echo "## Test/Migration Status:"
          echo "- typecheck: ${{ needs.typecheck.result }} (production errors block, test errors are warnings)"
          echo "- lint-tests: ${{ needs.lint-tests.result }} (non-blocking)"
          echo "- test: ${{ needs.test.result }} (non-blocking during migration)"
          echo ""
          echo "✅ All production code checks passed!"
          echo "✅ Test-related jobs are designed to succeed while reporting migration status"
