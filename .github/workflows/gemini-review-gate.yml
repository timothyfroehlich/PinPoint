name: '🛡️ Gemini Review Gate'

on:
  pull_request:
    types:
      - 'opened'
      - 'synchronize'
      - 'ready_for_review'
      - 'labeled'
      - 'unlabeled'

concurrency:
  group: '${{ github.workflow }}-${{ github.event.pull_request.number }}'
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

jobs:
  check-review:
    runs-on: 'ubuntu-latest'
    timeout-minutes: 5
    permissions:
      contents: 'read'
      pull-requests: 'read'
      statuses: 'write'
    steps:
      - name: 'Check for Gemini Review'
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea'
        with:
          github-token: '${{ secrets.GITHUB_TOKEN }}'
          script: |
            const { owner, repo } = context.repo;
            const pullNumber = context.payload.pull_request.number;
            const headSha = context.payload.pull_request.head.sha;
            
            console.log(`Checking PR #${pullNumber} (commit: ${headSha})`);
            
            // Get the latest commit timestamp
            const { data: commit } = await github.rest.git.getCommit({
              owner,
              repo,
              commit_sha: headSha
            });
            
            const commitTimestamp = new Date(commit.author.date);
            console.log(`Latest commit timestamp: ${commitTimestamp.toISOString()}`);
            
            // Get all reviews for this PR
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner,
              repo,
              pull_number: pullNumber
            });
            
            console.log(`Found ${reviews.length} reviews`);
            
            // Look for Gemini reviews (check for bot accounts or specific usernames)
            const geminiReviews = reviews.filter(review => {
              const login = review.user?.login?.toLowerCase() || '';
              const isBot = review.user?.type === 'Bot';
              const isGemini = login.includes('gemini') || login.includes('google') || 
                             (isBot && review.body && review.body.includes('🤖'));
              
              console.log(`Review by ${review.user?.login} (${review.user?.type}): isGemini=${isGemini}`);
              return isGemini;
            });
            
            console.log(`Found ${geminiReviews.length} Gemini reviews`);
            
            // Check if any Gemini review is newer than the latest commit
            const recentGeminiReviews = geminiReviews.filter(review => {
              const reviewTimestamp = new Date(review.submitted_at);
              const isRecent = reviewTimestamp > commitTimestamp;
              
              console.log(`Review submitted at ${reviewTimestamp.toISOString()}, isRecent=${isRecent}`);
              return isRecent;
            });
            
            const hasRecentReview = recentGeminiReviews.length > 0;
            console.log(`Has recent Gemini review: ${hasRecentReview}`);
            
            // Set the status check
            const state = hasRecentReview ? 'success' : 'failure';
            const description = hasRecentReview 
              ? 'Gemini review found and up-to-date'
              : 'Gemini review required or outdated. Use @gemini-cli /review to request a review.';
            
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha: headSha,
              state,
              target_url: `https://github.com/${owner}/${repo}/pull/${pullNumber}`,
              description,
              context: 'gemini-review-required'
            });
            
            console.log(`Status check set to: ${state}`);
            
            if (!hasRecentReview) {
              core.setFailed('Gemini review required or outdated');
            }