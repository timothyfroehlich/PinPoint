name: Smoke Test
permissions:
  contents: read

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  smoke-test:
    name: End-to-End Smoke Test
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase Local Stack
        run: |
          set -e  # Exit on any error
          echo "üöÄ Starting local Supabase stack for CI testing..."
          
          # Start Supabase services (auth, database, storage, etc.)
          supabase start
          
          # Wait for services to be ready
          echo "‚è≥ Waiting for Supabase services to be ready..."
          sleep 5
          
          # Export Supabase environment variables automatically
          echo "üîß Configuring environment variables from Supabase CLI..."
          supabase status -o env >> $GITHUB_ENV
          
          # Verify services are running
          supabase status
          
          echo "‚úÖ Supabase local stack ready for testing"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Variables
        run: |
          set -e  # Exit on any error
          # Validate required secrets are present
          [[ -n "${{ secrets.VERCEL_TOKEN }}" ]] || { echo "‚ùå VERCEL_TOKEN secret not set"; exit 1; }
          [[ -n "${{ secrets.VERCEL_ORG_ID }}" ]] || { echo "‚ùå VERCEL_ORG_ID secret not set"; exit 1; }
          [[ -n "${{ secrets.VERCEL_PROJECT_ID }}" ]] || { echo "‚ùå VERCEL_PROJECT_ID secret not set"; exit 1; }
          
          # Pull environment variables
          vercel env pull .env.local --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          
          # Verify the .env.local file was created
          [[ -f .env.local ]] || { echo "‚ùå .env.local file not created"; exit 1; }
          echo "‚úÖ Environment variables successfully pulled from Vercel"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Setup Environment Variables
        run: |
          set -e  # Exit on any error
          echo "üîß Configuring environment for production testing..."
          echo "‚úÖ All application variables pulled from Vercel"
          echo "üìä Test data will be isolated with SMOKE-TEST prefix"
          echo "üéØ Using single source of truth: Vercel configuration"
        env:
          # CI-specific environment flags only
          NODE_ENV: test
          CI: true

      - name: Verify Environment Configuration
        run: |
          set -e  # Exit on any error
          echo "üîç Verifying environment configuration..."
          echo "‚úÖ Environment variables pulled from Vercel"
          echo "üéØ Ready for smoke test execution"

      - name: Cache Playwright Browsers
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4
        id: playwright-cache
        with:
          path: "~/.cache/ms-playwright"
          key: "${{ runner.os }}-playwright-chromium-${{ hashFiles('package-lock.json') }}"
          restore-keys: |
            ${{ runner.os }}-playwright-chromium-
            ${{ runner.os }}-playwright-

      - name: Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium

      - name: Setup Database Schema and Seed Data
        run: |
          set -e  # Exit on any error
          echo "üóÉÔ∏è Setting up database schema and seed data with local Supabase..."
          
          # Push schema to local Supabase database
          npm run db:push
          
          # Seed database with full auth + database users (like local dev)
          npm run seed
          
          echo "‚úÖ Database setup complete - ready for smoke test"
        env:
          # Use local Supabase stack (URLs configured by Supabase CLI automatically)
          # Note: SUPABASE_URL and SUPABASE_SECRET_KEY are set by previous step via $GITHUB_ENV
          NODE_ENV: test
          SKIP_ENV_VALIDATION: true

      - name: Run Smoke Test
        run: |
          set -e  # Exit on any error
          # Validate critical environment variables are set by Supabase CLI
          [[ -n "$SUPABASE_URL" ]] || { echo "‚ùå SUPABASE_URL not set by Supabase CLI"; exit 1; }
          [[ -n "$SUPABASE_ANON_KEY" ]] || { echo "‚ùå SUPABASE_ANON_KEY not set by Supabase CLI"; exit 1; }
          
          # Run smoke test - must pass completely for CI success
          echo "üß™ Running smoke test with local Supabase stack"
          npm run smoke
        env:
          # Use local Supabase stack (URLs and tokens set automatically by Supabase CLI)
          # Note: All SUPABASE_* variables are configured by previous step via $GITHUB_ENV
          NODE_ENV: test
          SKIP_ENV_VALIDATION: true

      - name: Cleanup Test Data
        if: always()
        run: |
          set -e  # Exit on any error (but step always runs due to if: always())
          echo "üßπ Local Supabase cleanup..."
          echo "‚úÖ No cleanup needed - using local Supabase stack"
          echo "üóëÔ∏è  Local stack will be automatically destroyed after job completion"

      - name: Upload Playwright Report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        if: failure()
        with:
          name: playwright-report-smoke
          path: playwright-report/
          retention-days: 7