name: Smoke Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  smoke-test:
    name: End-to-End Smoke Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase Local
        run: |
          # Initialize Supabase project if needed
          if [ ! -f supabase/config.toml ]; then
            supabase init
          fi
          
          # Start Supabase with explicit timeout and better error handling
          timeout 300 supabase start || {
            echo "Supabase start failed, checking logs..."
            container_ids=$(docker ps -q --filter "name=supabase")
            if [ -n "$container_ids" ]; then
              docker logs "$container_ids" 2>&1 || true
            fi
            exit 1
          }
          
          # Wait for all services to be ready
          sleep 10
          
          # Extract keys using the correct supabase status output
          ANON_KEY=$(supabase status --output env | grep SUPABASE_ANON_KEY | cut -d'=' -f2-)
          SERVICE_KEY=$(supabase status --output env | grep SUPABASE_SERVICE_ROLE_KEY | cut -d'=' -f2-)
          
          # Validate that we got the keys
          if [ -z "$ANON_KEY" ] || [ -z "$SERVICE_KEY" ]; then
            echo "Failed to extract Supabase keys"
            supabase status
            exit 1
          fi
          
          # Set environment variables
          {
            echo "POSTGRES_PRISMA_URL=postgresql://postgres:postgres@127.0.0.1:5432/postgres"
            echo "POSTGRES_URL_NON_POOLING=postgresql://postgres:postgres@127.0.0.1:5432/postgres" 
            echo "SUPABASE_URL=http://127.0.0.1:54321"
            echo "SUPABASE_ANON_KEY=${ANON_KEY}"
            echo "SUPABASE_SERVICE_ROLE_KEY=${SERVICE_KEY}"
          } >> "$GITHUB_ENV"
          
          # Debug output (keys will be masked in logs)
          echo "Supabase services started successfully"
          supabase status

      - name: Setup database schema
        run: |
          npm run db:push
          npm run seed

      - name: Install Playwright Browsers
        run: npx playwright install chromium

      - name: Run Smoke Test
        run: npm run smoke

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-smoke
          path: playwright-report/
          retention-days: 7